
BLE_LLD_Pressbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c20  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a468  0800a468  0001a468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a46c  0800a46c  0001a46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  0800a470  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000098  0800a500  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000015e0  200000ac  0800a511  000200ac  2**2
                  ALLOC
  9 ._user_heap_stack 00001404  2000168c  0800a511  0002168c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000b4  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00001b59  200300dc  200300dc  00030000  2**2
                  ALLOC
 14 .debug_line   00022bf9  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00032b63  00000000  00000000  00042cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006033  00000000  00000000  00075835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ee0  00000000  00000000  0007b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f69f8  00000000  00000000  0007d748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001cb8  00000000  00000000  00174140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b7ad  00000000  00000000  00175df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001a15a5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000854c  00000000  00000000  001a15f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ac 	.word	0x200000ac
 800015c:	00000000 	.word	0x00000000
 8000160:	08009d48 	.word	0x08009d48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000b0 	.word	0x200000b0
 800017c:	08009d48 	.word	0x08009d48

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000528:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052c:	3304      	adds	r3, #4

0800052e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000530:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000532:	d3f9      	bcc.n	8000528 <CopyDataInit>
  bx lr
 8000534:	4770      	bx	lr

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000536:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000538:	3004      	adds	r0, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800053a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>
  bx lr
 800053e:	4770      	bx	lr

08000540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000542:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000544:	f002 f8dc 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <LoopForever+0x8>)
 800054a:	490c      	ldr	r1, [pc, #48]	; (800057c <LoopForever+0xc>)
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <LoopForever+0x10>)
 800054e:	2300      	movs	r3, #0
 8000550:	f7ff ffed 	bl	800052e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <LoopForever+0x14>)
 8000556:	490c      	ldr	r1, [pc, #48]	; (8000588 <LoopForever+0x18>)
 8000558:	2300      	movs	r3, #0
 800055a:	f7ff ffee 	bl	800053a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <LoopForever+0x1c>)
 8000560:	490b      	ldr	r1, [pc, #44]	; (8000590 <LoopForever+0x20>)
 8000562:	2300      	movs	r3, #0
 8000564:	f7ff ffe9 	bl	800053a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000568:	f008 fa4c 	bl	8008a04 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800056c:	f000 fd1c 	bl	8000fa8 <main>

08000570 <LoopForever>:

LoopForever:
  b LoopForever
 8000570:	e7fe      	b.n	8000570 <LoopForever>
 8000572:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000574:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000578:	20000008 	.word	0x20000008
 800057c:	20000098 	.word	0x20000098
 8000580:	0800a470 	.word	0x0800a470
  INIT_BSS _sbss, _ebss
 8000584:	200000ac 	.word	0x200000ac
 8000588:	2000168c 	.word	0x2000168c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800058c:	200300dc 	.word	0x200300dc
 8000590:	20031c35 	.word	0x20031c35

08000594 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC1_IRQHandler>
	...

08000598 <LL_PWR_DisableInternWU>:
  * @brief  Disable Internal Wake-up line
  * @rmtoll CR3          EIWF          LL_PWR_DisableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableInternWU(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWUL);
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <LL_PWR_DisableInternWU+0x1c>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <LL_PWR_DisableInternWU+0x1c>)
 80005a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005a6:	6093      	str	r3, [r2, #8]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	58000400 	.word	0x58000400

080005b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_EXTI_EnableIT_32_63+0x24>)
 80005c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <LL_EXTI_EnableIT_32_63+0x24>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	58000800 	.word	0x58000800

080005e0 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80005ea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80005ee:	4905      	ldr	r1, [pc, #20]	; (8000604 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	58000800 	.word	0x58000800

08000608 <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 800060c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000616:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800062e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /**< Configure the system Power Mode */
  SystemPower_Config();
 8000652:	f000 f82f 	bl	80006b4 <SystemPower_Config>
  
/* USER CODE BEGIN APPE_Init_1 */
  /* initialize debugger module if supported and debug trace if activated */
  Init_Debug();
 8000656:	f000 f809 	bl	800066c <Init_Debug>
  
  Led_Init();
 800065a:	f000 f8d5 	bl	8000808 <Led_Init>
  Button_Init();
 800065e:	f000 f8e0 	bl	8000822 <Button_Init>
  
/* USER CODE END APPE_Init_1 */
  /* Initialize all transport layers and start CPU2 which will send back a ready event to CPU1 */
  appe_Tl_Init();
 8000662:	f000 f83d 	bl	80006e0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000666:	bf00      	nop
}
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000670:	f002 f960 	bl	8002934 <HAL_DBGMCU_EnableDBGSleepMode>
  
  /* Enable debugger EXTI lines */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000674:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000678:	f7ff ff9e 	bl	80005b8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800067c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000680:	f7ff ffae 	bl	80005e0 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */
  
#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000684:	f006 fd92 	bl	80071ac <DbgTraceInit>
#endif
  
  /* Send a first trace to debug trace port to see that M4 is alive */
  APP_DBG("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <Init_Debug+0x40>)
 800068a:	2101      	movs	r1, #1
 800068c:	2000      	movs	r0, #0
 800068e:	f001 f82b 	bl	80016e8 <logApplication>
  APP_DBG("traces init done on M4");
 8000692:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <Init_Debug+0x44>)
 8000694:	2101      	movs	r1, #1
 8000696:	2000      	movs	r0, #0
 8000698:	f001 f826 	bl	80016e8 <logApplication>
  APP_DBG("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <Init_Debug+0x40>)
 800069e:	2101      	movs	r1, #1
 80006a0:	2000      	movs	r0, #0
 80006a2:	f001 f821 	bl	80016e8 <logApplication>
  
  return;
 80006a6:	bf00      	nop
}
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08009d60 	.word	0x08009d60
 80006b0:	08009d9c 	.word	0x08009d9c

080006b4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  // Disable internal wake-up which is active by default and is for RTC wake-up
  LL_PWR_DisableInternWU();
 80006b8:	f7ff ff6e 	bl	8000598 <LL_PWR_DisableInternWU>
  
  // Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock
  // start on HSI automatically
  LL_RCC_HSI_EnableAutoFromStop();
 80006bc:	f7ff ffa4 	bl	8000608 <LL_RCC_HSI_EnableAutoFromStop>
  
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006c4:	f7ff ffaf 	bl	8000626 <LL_RCC_SetClkAfterWakeFromStop>
  
  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80006c8:	f007 ff08 	bl	80084dc <UTIL_LPM_Init>
  
  /* Disable low power mode until INIT is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80006cc:	2101      	movs	r1, #1
 80006ce:	2001      	movs	r0, #1
 80006d0:	f007 ff46 	bl	8008560 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80006d4:	2101      	movs	r1, #1
 80006d6:	2001      	movs	r0, #1
 80006d8:	f007 ff12 	bl	8008500 <UTIL_LPM_SetStopMode>
  
  return;
 80006dc:	bf00      	nop
}
 80006de:	bd80      	pop	{r7, pc}

080006e0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  
  /**< Reference table initialization */
  TL_Init();
 80006e6:	f007 fcc7 	bl	8008078 <TL_Init>
  
  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <appe_Tl_Init+0x50>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	2010      	movs	r0, #16
 80006f0:	f008 f850 	bl	8008794 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <appe_Tl_Init+0x54>)
 80006f6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <appe_Tl_Init+0x58>)
 80006fa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	480e      	ldr	r0, [pc, #56]	; (800073c <appe_Tl_Init+0x5c>)
 8000702:	f006 febf 	bl	8007484 <shci_init>
  
  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <appe_Tl_Init+0x60>)
 800070c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <appe_Tl_Init+0x64>)
 8000710:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000712:	f241 43f0 	movw	r3, #5360	; 0x14f0
 8000716:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4618      	mov	r0, r3
 800071e:	f007 fde7 	bl	80082f0 <TL_MM_Init>
  
  /* Enable transport layer and start CPU2 */
  TL_Enable();
 8000722:	f007 fca2 	bl	800806a <TL_Enable>
  
  return;
 8000726:	bf00      	nop
}
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	080074bd 	.word	0x080074bd
 8000734:	200315cc 	.word	0x200315cc
 8000738:	08000749 	.word	0x08000749
 800073c:	0800075f 	.word	0x0800075f
 8000740:	200316d8 	.word	0x200316d8
 8000744:	200300dc 	.word	0x200300dc

08000748 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000752:	bf00      	nop
}
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b084      	sub	sp, #16
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	330b      	adds	r3, #11
 800076c:	60fb      	str	r3, [r7, #12]
  
  switch(p_sys_event->subevtcode)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000778:	d004      	beq.n	8000784 <APPE_SysUserEvtRx+0x26>
 800077a:	f249 2201 	movw	r2, #37377	; 0x9201
 800077e:	4293      	cmp	r3, r2
 8000780:	d007      	beq.n	8000792 <APPE_SysUserEvtRx+0x34>
    case SHCI_SUB_EVT_ERROR_NOTIF:
      APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
      break;
      
    default:
      break;
 8000782:	e00d      	b.n	80007a0 <APPE_SysUserEvtRx+0x42>
      if (p_sys_event->payload[0] == WIRELESS_FW_RUNNING)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d108      	bne.n	800079e <APPE_SysUserEvtRx+0x40>
        APPE_SysEvtReadyProcessing();
 800078c:	f000 f834 	bl	80007f8 <APPE_SysEvtReadyProcessing>
      break;
 8000790:	e005      	b.n	800079e <APPE_SysUserEvtRx+0x40>
      APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	789b      	ldrb	r3, [r3, #2]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f806 	bl	80007a8 <APPE_SysEvtError>
      break;
 800079c:	e000      	b.n	80007a0 <APPE_SysUserEvtRx+0x42>
      break;
 800079e:	bf00      	nop
  }
  return;
 80007a0:	bf00      	nop
}
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b7d      	cmp	r3, #125	; 0x7d
 80007b6:	d002      	beq.n	80007be <APPE_SysEvtError+0x16>
 80007b8:	2b7e      	cmp	r3, #126	; 0x7e
 80007ba:	d006      	beq.n	80007ca <APPE_SysEvtError+0x22>
 80007bc:	e00b      	b.n	80007d6 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
    APP_DBG("** ERR_LLD_TESTS : LLD_FATAL_ERROR \n");
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <APPE_SysEvtError+0x44>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 ff90 	bl	80016e8 <logApplication>
    break;
 80007c8:	e00c      	b.n	80007e4 <APPE_SysEvtError+0x3c>
    
  case ERR_THREAD_UNKNOWN_CMD:
    APP_DBG("** ERR_LLD_TESTS : UNKNOWN_CMD \n");
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <APPE_SysEvtError+0x48>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 ff8a 	bl	80016e8 <logApplication>
    break;
 80007d4:	e006      	b.n	80007e4 <APPE_SysEvtError+0x3c>
    
  default:
    APP_DBG("** ERR_LLD_TESTS : ErroCode=%d \n",ErrorCode);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <APPE_SysEvtError+0x4c>)
 80007da:	2101      	movs	r1, #1
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 ff83 	bl	80016e8 <logApplication>
    break;
 80007e2:	bf00      	nop
  }
  return;
 80007e4:	bf00      	nop
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08009db4 	.word	0x08009db4
 80007f0:	08009ddc 	.word	0x08009ddc
 80007f4:	08009e00 	.word	0x08009e00

080007f8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 80007fc:	f007 fdec 	bl	80083d8 <TL_TRACES_Init>
  
  /* Application specific init */
  PRESSBUTTON_APP_Init();
 8000800:	f001 faae 	bl	8001d60 <PRESSBUTTON_APP_Init>
  /* Thread stack is initialized, low power mode can be enabled */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif

  return;
 8000804:	bf00      	nop
}
 8000806:	bd80      	pop	{r7, pc}

08000808 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /**
   * Leds Initialization
   */
#if (CFG_HW_LPUART1_ENABLED != 1) || ! defined (STM32WB35xx)
  // On WB35, LED_BLUE share the GPIO PB5 with LPUART
  BSP_LED_Init(LED_BLUE);
 800080c:	2000      	movs	r0, #0
 800080e:	f001 fe99 	bl	8002544 <BSP_LED_Init>
#endif
  BSP_LED_Init(LED_GREEN);
 8000812:	2001      	movs	r0, #1
 8000814:	f001 fe96 	bl	8002544 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000818:	2002      	movs	r0, #2
 800081a:	f001 fe93 	bl	8002544 <BSP_LED_Init>
#endif
  
  return;
 800081e:	bf00      	nop
}
 8000820:	bd80      	pop	{r7, pc}

08000822 <Button_Init>:

static void Button_Init( void )
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000826:	2101      	movs	r1, #1
 8000828:	2000      	movs	r0, #0
 800082a:	f001 fef9 	bl	8002620 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800082e:	2101      	movs	r1, #1
 8000830:	2001      	movs	r0, #1
 8000832:	f001 fef5 	bl	8002620 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000836:	2101      	movs	r1, #1
 8000838:	2002      	movs	r0, #2
 800083a:	f001 fef1 	bl	8002620 <BSP_PB_Init>

#endif

  return;
 800083e:	bf00      	nop
}
 8000840:	bd80      	pop	{r7, pc}

08000842 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* Note that WFI (i.e. SLEEP mode) is required for SF timer tests but STOP or OFF mode will be managed by low-power test itself */
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000846:	bf00      	nop
}
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8000858:	2100      	movs	r1, #0
 800085a:	2010      	movs	r0, #16
 800085c:	f007 ffbc 	bl	80087d8 <UTIL_SEQ_SetTask>
  return;
 8000860:	bf00      	nop
}
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8000870:	2001      	movs	r0, #1
 8000872:	f007 ffdd 	bl	8008830 <UTIL_SEQ_SetEvt>
  return;
 8000876:	bf00      	nop
}
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8000886:	2001      	movs	r0, #1
 8000888:	f008 f812 	bl	80088b0 <UTIL_SEQ_WaitEvt>
  return;
 800088c:	bf00      	nop
}
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	330b      	adds	r3, #11
 80008a0:	1c99      	adds	r1, r3, #2
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7a9b      	ldrb	r3, [r3, #10]
 80008a6:	3b02      	subs	r3, #2
 80008a8:	461a      	mov	r2, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	f006 fca4 	bl	80071f8 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f007 fd59 	bl	8008368 <TL_MM_EvtDone>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
#ifdef CFG_DEBUG_TRACE_UART
  MX_UART_Init(CFG_DEBUG_TRACE_UART);
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 f8cc 	bl	8000a60 <MX_UART_Init>
#endif
  return;
 80008c8:	bf00      	nop
}
 80008ca:	bd80      	pop	{r7, pc}

080008cc <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	460b      	mov	r3, r1
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80008da:	897a      	ldrh	r2, [r7, #10]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68f9      	ldr	r1, [r7, #12]
 80008e0:	2002      	movs	r0, #2
 80008e2:	f000 f989 	bl	8000bf8 <HW_UART_Transmit_DMA>

  return;
 80008e6:	bf00      	nop
}
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4013      	ands	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800092e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4313      	orrs	r3, r2
 8000936:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000944:	68fb      	ldr	r3, [r7, #12]
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800095a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4313      	orrs	r3, r2
 8000968:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800096a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4013      	ands	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <gpio_lld_phy_gpioHardFault_up>:
// Be carrefull with the .h included as this file must be compilable on both M0 and M4 environments
#include "app_conf.h"
#include "gpio_lld.h"

/* Set PHY GPIO_HARD_FAULT to '1' */
void gpio_lld_phy_gpioHardFault_up(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIO_HARD_FAULT_PORT, GPIO_HARD_FAULT_PIN, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2110      	movs	r1, #16
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f002 fdc8 	bl	8003524 <HAL_GPIO_WritePin>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <gpio_lld_usart_init>:
  HAL_GPIO_WritePin(GPIO_HARD_FAULT_PORT, GPIO_HARD_FAULT_PIN, GPIO_PIN_RESET);
}

/* Initialize GPIOs used by USART */
void gpio_lld_usart_init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  USART_TX_GPIO_CLK_ENABLE();
 80009ac:	2002      	movs	r0, #2
 80009ae:	f7ff ff9e 	bl	80008ee <LL_AHB2_GRP1_EnableClock>
  USART_RX_GPIO_CLK_ENABLE();
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff ff9b 	bl	80008ee <LL_AHB2_GRP1_EnableClock>

  /* Common configuration to Tx and Rx */
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Pull       = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	613b      	str	r3, [r7, #16]

  /* Configure USART Tx */
  gpioinitstruct.Pin        = USART_TX_PIN;
 80009c4:	2340      	movs	r3, #64	; 0x40
 80009c6:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Alternate  = USART_TX_AF;
 80009c8:	2307      	movs	r3, #7
 80009ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USART_TX_GPIO_PORT, &gpioinitstruct);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <gpio_lld_usart_init+0x60>)
 80009d2:	f002 fc37 	bl	8003244 <HAL_GPIO_Init>

  /* Configure USART Rx */
  gpioinitstruct.Pin        = USART_RX_PIN;
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Alternate  = USART_RX_AF;
 80009da:	2307      	movs	r3, #7
 80009dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USART_RX_GPIO_PORT, &gpioinitstruct);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <gpio_lld_usart_init+0x60>)
 80009e4:	f002 fc2e 	bl	8003244 <HAL_GPIO_Init>

  /*** Configure the USART peripheral ***/
  /* Enable USART clock */
  USART_CLK_ENABLE();
 80009e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ec:	f7ff ffb1 	bl	8000952 <LL_APB2_GRP1_EnableClock>
}
 80009f0:	bf00      	nop
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	48000400 	.word	0x48000400

080009fc <gpio_lld_lpuart_init>:
  to not need power in STOP mode */
}

/* Initialize GPIOs used by LPUART */
void gpio_lld_lpuart_init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  LPUART_TX_GPIO_CLK_ENABLE();
 8000a10:	2004      	movs	r0, #4
 8000a12:	f7ff ff6c 	bl	80008ee <LL_AHB2_GRP1_EnableClock>
  LPUART_RX_GPIO_CLK_ENABLE();
 8000a16:	2004      	movs	r0, #4
 8000a18:	f7ff ff69 	bl	80008ee <LL_AHB2_GRP1_EnableClock>

  /* Common configuration to Tx and Rx */
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	613b      	str	r3, [r7, #16]

  /* Configure LPUART Tx */
  gpioinitstruct.Pin        = LPUART_TX_PIN;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Alternate  = LPUART_TX_AF;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LPUART_TX_GPIO_PORT, &gpioinitstruct);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <gpio_lld_lpuart_init+0x60>)
 8000a36:	f002 fc05 	bl	8003244 <HAL_GPIO_Init>

  /* Configure LPUART Rx */
  gpioinitstruct.Pin        = LPUART_RX_PIN;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Alternate  = LPUART_RX_AF;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LPUART_RX_GPIO_PORT, &gpioinitstruct);
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <gpio_lld_lpuart_init+0x60>)
 8000a48:	f002 fbfc 	bl	8003244 <HAL_GPIO_Init>

  /*** Configure the LPUART peripheral ***/
  /* Enable LPUART clock */
  LPUART_CLK_ENABLE();
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ff67 	bl	8000920 <LL_APB1_GRP2_EnableClock>
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	48000800 	.word	0x48000800

08000a60 <MX_UART_Init>:
#endif

/* Functions Definition ------------------------------------------------------*/

void MX_UART_Init(hw_uart_id_t uart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  USART_TypeDef *instance = NULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  switch(uart){
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <MX_UART_Init+0x1e>
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d005      	beq.n	8000a88 <MX_UART_Init+0x28>
 8000a7c:	e009      	b.n	8000a92 <MX_UART_Init+0x32>
    case hw_uart1:
#if (CFG_HW_USART1_ENABLED != 1)
      return;
#endif
      handle = &huart1;
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <MX_UART_Init+0xcc>)
 8000a80:	60fb      	str	r3, [r7, #12]
      instance = USART1;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_UART_Init+0xd0>)
 8000a84:	60bb      	str	r3, [r7, #8]
      break;
 8000a86:	e006      	b.n	8000a96 <MX_UART_Init+0x36>
    case hw_lpuart1:
#if (CFG_HW_LPUART1_ENABLED != 1)
      return;
#endif
      handle = &hlpuart1;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_UART_Init+0xd4>)
 8000a8a:	60fb      	str	r3, [r7, #12]
      instance = LPUART1;
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_UART_Init+0xd8>)
 8000a8e:	60bb      	str	r3, [r7, #8]
      break;
 8000a90:	e001      	b.n	8000a96 <MX_UART_Init+0x36>
    default: Error_Handler();
 8000a92:	f000 fc39 	bl	8001308 <Error_Handler>
  }
  handle->Instance = instance;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	601a      	str	r2, [r3, #0]
  handle->Init.BaudRate = 115200;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa2:	605a      	str	r2, [r3, #4]
  handle->Init.WordLength = UART_WORDLENGTH_8B;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  handle->Init.StopBits = UART_STOPBITS_1;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  handle->Init.Parity = UART_PARITY_NONE;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  handle->Init.Mode = UART_MODE_TX_RX;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	220c      	movs	r2, #12
 8000aba:	615a      	str	r2, [r3, #20]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  handle->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  handle->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  handle->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  handle->FifoMode = UART_FIFOMODE_DISABLE;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2200      	movs	r2, #0
 8000ade:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(handle) != HAL_OK)
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f004 fb71 	bl	80051c8 <HAL_UART_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_UART_Init+0x90>
  {
    Error_Handler();
 8000aec:	f000 fc0c 	bl	8001308 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(handle, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f005 ff61 	bl	80069ba <HAL_UARTEx_SetTxFifoThreshold>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_UART_Init+0xa2>
  {
    Error_Handler();
 8000afe:	f000 fc03 	bl	8001308 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(handle, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f005 ff96 	bl	8006a36 <HAL_UARTEx_SetRxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_UART_Init+0xb4>
  {
    Error_Handler();
 8000b10:	f000 fbfa 	bl	8001308 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(handle) != HAL_OK)
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f005 ff17 	bl	8006948 <HAL_UARTEx_DisableFifoMode>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_UART_Init+0xc4>
  {
    Error_Handler();
 8000b20:	f000 fbf2 	bl	8001308 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20001580 	.word	0x20001580
 8000b30:	40013800 	.word	0x40013800
 8000b34:	20001490 	.word	0x20001490
 8000b38:	40008000 	.word	0x40008000

08000b3c <HW_UART_Transmit_IT>:
  
  return hw_status;
}

hw_status_t HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	75fb      	strb	r3, [r7, #23]
  hw_status_t hw_status = hw_uart_ok;
 8000b52:	2300      	movs	r3, #0
 8000b54:	75bb      	strb	r3, [r7, #22]
  
  switch (hw_uart_id)
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <HW_UART_Transmit_IT+0x26>
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d00f      	beq.n	8000b80 <HW_UART_Transmit_IT+0x44>
      HW_UART_TX_IT(hlpuart1, LPUART1);
      break;
#endif
    
    default:
      break;
 8000b60:	e01d      	b.n	8000b9e <HW_UART_Transmit_IT+0x62>
      HW_UART_TX_IT(huart1, USART1);
 8000b62:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HW_UART_Transmit_IT+0xa4>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HW_UART_Transmit_IT+0xa8>)
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <HW_UART_Transmit_IT+0xac>)
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	89bb      	ldrh	r3, [r7, #12]
 8000b70:	461a      	mov	r2, r3
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	481b      	ldr	r0, [pc, #108]	; (8000be4 <HW_UART_Transmit_IT+0xa8>)
 8000b76:	f004 fb77 	bl	8005268 <HAL_UART_Transmit_IT>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8000b7e:	e00e      	b.n	8000b9e <HW_UART_Transmit_IT+0x62>
      HW_UART_TX_IT(hlpuart1, LPUART1);
 8000b80:	4a1a      	ldr	r2, [pc, #104]	; (8000bec <HW_UART_Transmit_IT+0xb0>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HW_UART_Transmit_IT+0xb4>)
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HW_UART_Transmit_IT+0xb8>)
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	89bb      	ldrh	r3, [r7, #12]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <HW_UART_Transmit_IT+0xb4>)
 8000b94:	f004 fb68 	bl	8005268 <HAL_UART_Transmit_IT>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8000b9c:	bf00      	nop
  }
  
  switch (hal_status)
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d817      	bhi.n	8000bd4 <HW_UART_Transmit_IT+0x98>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <HW_UART_Transmit_IT+0x70>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000bc3 	.word	0x08000bc3
 8000bb4:	08000bc9 	.word	0x08000bc9
 8000bb8:	08000bcf 	.word	0x08000bcf
  {
    case HAL_OK:
      hw_status = hw_uart_ok;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	75bb      	strb	r3, [r7, #22]
      break;
 8000bc0:	e009      	b.n	8000bd6 <HW_UART_Transmit_IT+0x9a>
    
    case HAL_ERROR:
      hw_status = hw_uart_error;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	75bb      	strb	r3, [r7, #22]
      break;
 8000bc6:	e006      	b.n	8000bd6 <HW_UART_Transmit_IT+0x9a>
    
    case HAL_BUSY:
      hw_status = hw_uart_busy;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	75bb      	strb	r3, [r7, #22]
      break;
 8000bcc:	e003      	b.n	8000bd6 <HW_UART_Transmit_IT+0x9a>
    
    case HAL_TIMEOUT:
      hw_status = hw_uart_to;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	75bb      	strb	r3, [r7, #22]
      break;
 8000bd2:	e000      	b.n	8000bd6 <HW_UART_Transmit_IT+0x9a>
    
    default:
      break;
 8000bd4:	bf00      	nop
  }
  
  return hw_status;
 8000bd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20001674 	.word	0x20001674
 8000be4:	20001580 	.word	0x20001580
 8000be8:	40013800 	.word	0x40013800
 8000bec:	20001488 	.word	0x20001488
 8000bf0:	20001490 	.word	0x20001490
 8000bf4:	40008000 	.word	0x40008000

08000bf8 <HW_UART_Transmit_DMA>:
  
  return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4603      	mov	r3, r0
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	4613      	mov	r3, r2
 8000c08:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	75fb      	strb	r3, [r7, #23]
  hw_status_t hw_status = hw_uart_ok;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	75bb      	strb	r3, [r7, #22]
  
  switch (hw_uart_id)
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <HW_UART_Transmit_DMA+0x26>
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d00f      	beq.n	8000c3c <HW_UART_Transmit_DMA+0x44>
      hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
      break;
#endif
    
    default:
      break;
 8000c1c:	e01d      	b.n	8000c5a <HW_UART_Transmit_DMA+0x62>
      HW_huart1TxCb = cb;
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HW_UART_Transmit_DMA+0xa4>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6013      	str	r3, [r2, #0]
      huart1.Instance = USART1;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HW_UART_Transmit_DMA+0xa8>)
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HW_UART_Transmit_DMA+0xac>)
 8000c28:	601a      	str	r2, [r3, #0]
      hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8000c2a:	89bb      	ldrh	r3, [r7, #12]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <HW_UART_Transmit_DMA+0xa8>)
 8000c32:	f004 fbc1 	bl	80053b8 <HAL_UART_Transmit_DMA>
 8000c36:	4603      	mov	r3, r0
 8000c38:	75fb      	strb	r3, [r7, #23]
      break;
 8000c3a:	e00e      	b.n	8000c5a <HW_UART_Transmit_DMA+0x62>
      HW_hlpuart1TxCb = cb;
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HW_UART_Transmit_DMA+0xb0>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
      hlpuart1.Instance = LPUART1;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HW_UART_Transmit_DMA+0xb4>)
 8000c44:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <HW_UART_Transmit_DMA+0xb8>)
 8000c46:	601a      	str	r2, [r3, #0]
      hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8000c48:	89bb      	ldrh	r3, [r7, #12]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <HW_UART_Transmit_DMA+0xb4>)
 8000c50:	f004 fbb2 	bl	80053b8 <HAL_UART_Transmit_DMA>
 8000c54:	4603      	mov	r3, r0
 8000c56:	75fb      	strb	r3, [r7, #23]
      break;
 8000c58:	bf00      	nop
  }
  
  switch (hal_status)
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d817      	bhi.n	8000c90 <HW_UART_Transmit_DMA+0x98>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <HW_UART_Transmit_DMA+0x70>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c79 	.word	0x08000c79
 8000c6c:	08000c7f 	.word	0x08000c7f
 8000c70:	08000c85 	.word	0x08000c85
 8000c74:	08000c8b 	.word	0x08000c8b
  {
    case HAL_OK:
      hw_status = hw_uart_ok;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	75bb      	strb	r3, [r7, #22]
      break;
 8000c7c:	e009      	b.n	8000c92 <HW_UART_Transmit_DMA+0x9a>
    
    case HAL_ERROR:
      hw_status = hw_uart_error;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	75bb      	strb	r3, [r7, #22]
      break;
 8000c82:	e006      	b.n	8000c92 <HW_UART_Transmit_DMA+0x9a>
    
    case HAL_BUSY:
      hw_status = hw_uart_busy;
 8000c84:	2302      	movs	r3, #2
 8000c86:	75bb      	strb	r3, [r7, #22]
      break;
 8000c88:	e003      	b.n	8000c92 <HW_UART_Transmit_DMA+0x9a>
    
    case HAL_TIMEOUT:
      hw_status = hw_uart_to;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	75bb      	strb	r3, [r7, #22]
      break;
 8000c8e:	e000      	b.n	8000c92 <HW_UART_Transmit_DMA+0x9a>
    
    default:
      break;
 8000c90:	bf00      	nop
  }
  
  return hw_status;
 8000c92:	7dbb      	ldrb	r3, [r7, #22]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20001674 	.word	0x20001674
 8000ca0:	20001580 	.word	0x20001580
 8000ca4:	40013800 	.word	0x40013800
 8000ca8:	20001488 	.word	0x20001488
 8000cac:	20001490 	.word	0x20001490
 8000cb0:	40008000 	.word	0x40008000

08000cb4 <HAL_UART_TxCpltCallback>:
  
  return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)huart->Instance)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_UART_TxCpltCallback+0x4c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00a      	beq.n	8000cdc <HAL_UART_TxCpltCallback+0x28>
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <HAL_UART_TxCpltCallback+0x50>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d10f      	bne.n	8000cec <HAL_UART_TxCpltCallback+0x38>
  {
#if (CFG_HW_USART1_ENABLED == 1)
    case (uint32_t)USART1:
      if(HW_huart1TxCb)
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_UART_TxCpltCallback+0x54>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00d      	beq.n	8000cf0 <HAL_UART_TxCpltCallback+0x3c>
      {
          HW_huart1TxCb();
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_UART_TxCpltCallback+0x54>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4798      	blx	r3
      }
      break;
 8000cda:	e009      	b.n	8000cf0 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
    case (uint32_t)LPUART1:
      if(HW_hlpuart1TxCb)
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_UART_TxCpltCallback+0x58>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <HAL_UART_TxCpltCallback+0x40>
      {
          HW_hlpuart1TxCb();
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_UART_TxCpltCallback+0x58>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4798      	blx	r3
      }
      break;
 8000cea:	e003      	b.n	8000cf4 <HAL_UART_TxCpltCallback+0x40>
#endif
    
    default:
      break;
 8000cec:	bf00      	nop
 8000cee:	e002      	b.n	8000cf6 <HAL_UART_TxCpltCallback+0x42>
      break;
 8000cf0:	bf00      	nop
 8000cf2:	e000      	b.n	8000cf6 <HAL_UART_TxCpltCallback+0x42>
      break;
 8000cf4:	bf00      	nop
  }
  
  return;
 8000cf6:	bf00      	nop
}
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40008000 	.word	0x40008000
 8000d04:	40013800 	.word	0x40013800
 8000d08:	20001674 	.word	0x20001674
 8000d0c:	20001488 	.word	0x20001488

08000d10 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <LL_EXTI_DisableIT_0_31+0x28>)
 8000d1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4905      	ldr	r1, [pc, #20]	; (8000d38 <LL_EXTI_DisableIT_0_31+0x28>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	58000800 	.word	0x58000800

08000d3c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <LL_EXTI_DisableIT_32_63+0x28>)
 8000d46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4905      	ldr	r1, [pc, #20]	; (8000d64 <LL_EXTI_DisableIT_32_63+0x28>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	58000800 	.word	0x58000800

08000d68 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000d76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d82:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	cafecafe 	.word	0xcafecafe

08000da4 <LL_RCC_LSE_SetDriveCapability>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000db4:	f023 0218 	bic.w	r2, r3, #24
 8000db8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e28:	d101      	bne.n	8000e2e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e4e:	d101      	bne.n	8000e54 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_AHB1_GRP1_EnableClock>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_AHB3_GRP1_EnableClock>:
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	041b      	lsls	r3, r3, #16
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	605a      	str	r2, [r3, #4]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	041b      	lsls	r3, r3, #16
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	615a      	str	r2, [r3, #20]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695a      	ldr	r2, [r3, #20]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	615a      	str	r2, [r3, #20]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	609a      	str	r2, [r3, #8]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	619a      	str	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <LL_LPM_EnableSleep+0x1c>)
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <LL_LPM_EnableSleep+0x1c>)
 8000f92:	f023 0304 	bic.w	r3, r3, #4
 8000f96:	6113      	str	r3, [r2, #16]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <main+0x38>)
 8000fae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb2:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f001 fc26 	bl	8002804 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8000fb8:	f000 f933 	bl	8001222 <Reset_Device>
  Config_HSE();
 8000fbc:	f000 f91d 	bl	80011fa <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock on HSE without using PLL and the periph clock needed by this application */
  SystemClock_Config();
 8000fc0:	f000 f8a2 	bl	8001108 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8000fc4:	f000 f8f8 	bl	80011b8 <PeriphClock_Config>
  Init_Exti();
 8000fc8:	f000 f96d 	bl	80012a6 <Init_Exti>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000fcc:	f000 f8da 	bl	8001184 <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8000fd0:	f7ff fb3d 	bl	800064e <APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f007 faf2 	bl	80085c0 <UTIL_SEQ_Run>
 8000fdc:	e7fa      	b.n	8000fd4 <main+0x2c>
 8000fde:	bf00      	nop
 8000fe0:	58004000 	.word	0x58004000

08000fe4 <SystemClock_Config_HSE>:
           SystemClock_Config_HSE() must be called once just after boot (to go from default MSI to HSE).
           Then application user can call both SystemClock_Config_HSE() and SystemClock_Config_MSI() at any time.
  * @retval None
  */
void SystemClock_Config_HSE(uint32_t usePLL)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b09c      	sub	sp, #112	; 0x70
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff0:	2248      	movs	r2, #72	; 0x48
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fd37 	bl	8008a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	619a      	str	r2, [r3, #24]

  /* First, just set MSI ON (with the 32Mhz range) in case it was OFF, without any update on PLL */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 800100e:	2320      	movs	r3, #32
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_10;
 8001016:	23a0      	movs	r3, #160	; 0xa0
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800101a:	2300      	movs	r3, #0
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 800101e:	2300      	movs	r3, #0
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fe5a 	bl	8003ce0 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config_HSE+0x52>
  {
    /* Initialization Error */
    Error_Handler();
 8001032:	f000 f969 	bl	8001308 <Error_Handler>
  }
  /* Select MSI as system clock in order to be able to update HSE and PLL configuration */
  RCC_ClkInitStruct.ClockType    = RCC_CLOCKTYPE_SYSCLK;
 8001036:	2301      	movs	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f003 f9d7 	bl	80043f8 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config_HSE+0x70>
  {
    /* Initialization Error */
    Error_Handler();
 8001050:	f000 f95a 	bl	8001308 <Error_Handler>
  }

  /* Configure HSE and PLL if needed*/
  RCC_OscInitStruct.OscillatorType       = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState             = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource        = RCC_PLLSOURCE_HSE;
 800105e:	2303      	movs	r3, #3
 8001060:	65bb      	str	r3, [r7, #88]	; 0x58
  if (usePLL == 1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <SystemClock_Config_HSE+0x8a>
    RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_ON;
 8001068:	2302      	movs	r3, #2
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
 800106c:	e001      	b.n	8001072 <SystemClock_Config_HSE+0x8e>
  else
    RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_OFF;
 800106e:	2301      	movs	r3, #1
 8001070:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM             = RCC_PLLM_DIV2;
 8001072:	2310      	movs	r3, #16
 8001074:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN             = 8;
 8001076:	2308      	movs	r3, #8
 8001078:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP             = RCC_PLLP_DIV4;
 800107a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800107e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ             = RCC_PLLQ_DIV4;
 8001080:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001084:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR             = RCC_PLLR_DIV4;
 8001086:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800108a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fe25 	bl	8003ce0 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config_HSE+0xbc>
  {
    Error_Handler();
 800109c:	f000 f934 	bl	8001308 <Error_Handler>
  }

  /* Configure the system clock source and the dividers according to the fact that system clock source is 32Mhz */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK |
 80010a0:	236f      	movs	r3, #111	; 0x6f
 80010a2:	60fb      	str	r3, [r7, #12]
                                     RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  if (usePLL == 1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <SystemClock_Config_HSE+0xcc>
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2303      	movs	r3, #3
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	e001      	b.n	80010b4 <SystemClock_Config_HSE+0xd0>
  else
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010b0:	2302      	movs	r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2101      	movs	r1, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 f992 	bl	80043f8 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config_HSE+0xfa>
  {
    Error_Handler();
 80010da:	f000 f915 	bl	8001308 <Error_Handler>

  // Note that function UTILS_SetFlashLatency() could be used to set the correct Flash latency
  // (with 32Mhz, 2WS are needed if the range is changed to 1V instead of 1.2V)

  /* Disable MSI Oscillator as the MSI is no more needed by the application */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_MSI;
 80010de:	2320      	movs	r3, #32
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState        = RCC_MSI_OFF;
 80010e2:	2300      	movs	r3, #0
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_NONE;  /* No update on PLL */
 80010e6:	2300      	movs	r3, #0
 80010e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fdf6 	bl	8003ce0 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config_HSE+0x11a>
  {
    /* Initialization Error */
    Error_Handler();
 80010fa:	f000 f905 	bl	8001308 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3770      	adds	r7, #112	; 0x70
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration : must be called during application start-up
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2248      	movs	r2, #72	; 0x48
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f007 fca6 	bl	8008a68 <memset>

  /* Configure LSE Drive Capability */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fe41 	bl	8000da4 <LL_RCC_LSE_SetDriveCapability>

  /* Configure the main internal regulator output voltage */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <SystemClock_Config+0x78>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <SystemClock_Config+0x78>)
 800112c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <SystemClock_Config+0x78>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* Assuming that MSI is enabled by default after boot, lets go to HSE without using PLL */
  SystemClock_Config_HSE(0);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff ff50 	bl	8000fe4 <SystemClock_Config_HSE>

  /* Configure Others clock */
  RCC_OscInitStruct.OscillatorType       = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 |
 8001144:	2356      	movs	r3, #86	; 0x56
 8001146:	60bb      	str	r3, [r7, #8]
                                           RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI2;
  RCC_OscInitStruct.HSI48State           = RCC_HSI48_OFF;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState             = RCC_LSE_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSIState             = RCC_HSI_OFF;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue  = RCC_HSICALIBRATION_DEFAULT;
 8001154:	2340      	movs	r3, #64	; 0x40
 8001156:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState             = RCC_LSI_OFF;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSI2CalibrationValue = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fdb9 	bl	8003ce0 <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001174:	f000 f8c8 	bl	8001308 <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3750      	adds	r7, #80	; 0x50
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	58000400 	.word	0x58000400

08001184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001188:	2004      	movs	r0, #4
 800118a:	f7ff fe69 	bl	8000e60 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff fe66 	bl	8000e60 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	200e      	movs	r0, #14
 800119a:	f001 fcac 	bl	8002af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800119e:	200e      	movs	r0, #14
 80011a0:	f001 fcc3 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	200f      	movs	r0, #15
 80011aa:	f001 fca4 	bl	8002af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f001 fcbb 	bl	8002b2a <HAL_NVIC_EnableIRQ>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <PeriphClock_Config>:

static void PeriphClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2250      	movs	r2, #80	; 0x50
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fc4f 	bl	8008a68 <memset>
  /* Initialize SMPS here like in BLE applis */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#else
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_RFWAKEUP | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_LPUART1;
 80011ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80011ce:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.Usart1ClockSelection   = RCC_USART1CLKSOURCE_PCLK2;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Lpuart1ClockSelection  = RCC_LPUART1CLKSOURCE_PCLK1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80011d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fd4a 	bl	8004c7a <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <PeriphClock_Config+0x3a>
  {
    Error_Handler();
 80011ec:	f000 f88c 	bl	8001308 <Error_Handler>
  }
#endif

  return;
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
}
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <Config_HSE>:

static void Config_HSE(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001200:	2000      	movs	r0, #0
 8001202:	f006 f851 	bl	80072a8 <OTP_Read>
 8001206:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	799b      	ldrb	r3, [r3, #6]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fda8 	bl	8000d68 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001218:	bf00      	nop
 800121a:	bf00      	nop
}
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <Reset_Device>:


static void Reset_Device( void )
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001226:	f000 f827 	bl	8001278 <Reset_BackupDomain>

  Reset_IPCC();
 800122a:	f000 f803 	bl	8001234 <Reset_IPCC>
#endif

  return;
 800122e:	bf00      	nop
}
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001238:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800123c:	f7ff fe29 	bl	8000e92 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001240:	213f      	movs	r1, #63	; 0x3f
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <Reset_IPCC+0x40>)
 8001244:	f7ff fe84 	bl	8000f50 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001248:	213f      	movs	r1, #63	; 0x3f
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <Reset_IPCC+0x40>)
 800124c:	f7ff fe8e 	bl	8000f6c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001250:	213f      	movs	r1, #63	; 0x3f
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <Reset_IPCC+0x40>)
 8001254:	f7ff fe36 	bl	8000ec4 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001258:	213f      	movs	r1, #63	; 0x3f
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <Reset_IPCC+0x40>)
 800125c:	f7ff fe55 	bl	8000f0a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001260:	213f      	movs	r1, #63	; 0x3f
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <Reset_IPCC+0x40>)
 8001264:	f7ff fe40 	bl	8000ee8 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001268:	213f      	movs	r1, #63	; 0x3f
 800126a:	4802      	ldr	r0, [pc, #8]	; (8001274 <Reset_IPCC+0x40>)
 800126c:	f7ff fe5f 	bl	8000f2e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001270:	bf00      	nop
}
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58000c00 	.word	0x58000c00

08001278 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800127c:	f7ff fdca 	bl	8000e14 <LL_RCC_IsActiveFlag_PINRST>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00d      	beq.n	80012a2 <Reset_BackupDomain+0x2a>
 8001286:	f7ff fdd8 	bl	8000e3a <LL_RCC_IsActiveFlag_SFTRST>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d108      	bne.n	80012a2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001290:	f002 f992 	bl	80035b8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001294:	f002 f990 	bl	80035b8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001298:	f7ff fd9a 	bl	8000dd0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800129c:	f7ff fda9 	bl	8000df2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
}
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <Init_Exti>:

static void Init_Exti( void )
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except LPUART(25), IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31( (~0) & (~(LL_EXTI_LINE_25)) );
 80012aa:	f06f 7000 	mvn.w	r0, #33554432	; 0x2000000
 80012ae:	f7ff fd2f 	bl	8000d10 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80012b2:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80012b6:	f7ff fd41 	bl	8000d3c <LL_EXTI_DisableIT_32_63>

  return;
 80012ba:	bf00      	nop
}
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c6:	f001 fb03 	bl	80028d0 <HAL_GetTick>
 80012ca:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d6:	d00a      	beq.n	80012ee <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80012d8:	f001 fb12 	bl	8002900 <HAL_GetTickFreq>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	e002      	b.n	80012ee <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80012e8:	f7ff fe4e 	bl	8000f88 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80012ec:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	f001 faef 	bl	80028d0 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d8f4      	bhi.n	80012e8 <HAL_Delay+0x2a>
  }
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  BSP_LED_On(LED_BLUE);
 800130c:	2000      	movs	r0, #0
 800130e:	f001 f953 	bl	80025b8 <BSP_LED_On>
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <LL_APB2_GRP1_EnableClock>:
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800132e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001332:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4013      	ands	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;

#if (CFG_HW_LPUART1_ENABLED == 1)
  if(huart->Instance == LPUART1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a45      	ldr	r2, [pc, #276]	; (800147c <HAL_UART_MspInit+0x124>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d148      	bne.n	80013fc <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

    /* GPIOs configuration */
    #if(CFG_DEBUG_TRACE != 0)
    gpio_lld_lpuart_init();
 800136a:	f7ff fb47 	bl	80009fc <gpio_lld_lpuart_init>
    #endif


    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_UART_MspInit+0x128>)
 8001370:	4a44      	ldr	r2, [pc, #272]	; (8001484 <HAL_UART_MspInit+0x12c>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_UART_MspInit+0x128>)
 8001376:	2211      	movs	r2, #17
 8001378:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_UART_MspInit+0x128>)
 800137c:	2210      	movs	r2, #16
 800137e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_UART_MspInit+0x128>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <HAL_UART_MspInit+0x128>)
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138c:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <HAL_UART_MspInit+0x128>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_UART_MspInit+0x128>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_UART_MspInit+0x128>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_UART_MspInit+0x128>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80013a4:	4836      	ldr	r0, [pc, #216]	; (8001480 <HAL_UART_MspInit+0x128>)
 80013a6:	f001 fbdb 	bl	8002b60 <HAL_DMA_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_UART_MspInit+0x5c>
    {
      Error_Handler();
 80013b0:	f7ff ffaa 	bl	8001308 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80013b4:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80013b8:	60bb      	str	r3, [r7, #8]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncEnable = DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	743b      	strb	r3, [r7, #16]
    pSyncConfig.EventEnable = DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	747b      	strb	r3, [r7, #17]
    pSyncConfig.RequestNumber = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	482b      	ldr	r0, [pc, #172]	; (8001480 <HAL_UART_MspInit+0x128>)
 80013d2:	f001 fef7 	bl	80031c4 <HAL_DMAEx_ConfigMuxSync>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_UART_MspInit+0x88>
    {
      Error_Handler();
 80013dc:	f7ff ff94 	bl	8001308 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_UART_MspInit+0x128>)
 80013e4:	679a      	str	r2, [r3, #120]	; 0x78
 80013e6:	4a26      	ldr	r2, [pc, #152]	; (8001480 <HAL_UART_MspInit+0x128>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2025      	movs	r0, #37	; 0x25
 80013f2:	f001 fb80 	bl	8002af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80013f6:	2025      	movs	r0, #37	; 0x25
 80013f8:	f001 fb97 	bl	8002b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */
  }
#endif
#if (CFG_HW_USART1_ENABLED == 1)
  if(huart->Instance == USART1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_UART_MspInit+0x130>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d136      	bne.n	8001474 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001406:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800140a:	f7ff ff84 	bl	8001316 <LL_APB2_GRP1_EnableClock>

    /* GPIOs configuration */
    #if(CFG_DEBUG_TRACE != 0)
    gpio_lld_usart_init();
 800140e:	f7ff fac3 	bl	8000998 <gpio_lld_usart_init>
    #endif


    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_UART_MspInit+0x134>)
 8001414:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_UART_MspInit+0x138>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_UART_MspInit+0x134>)
 800141a:	220f      	movs	r2, #15
 800141c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_UART_MspInit+0x134>)
 8001420:	2210      	movs	r2, #16
 8001422:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_UART_MspInit+0x134>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_UART_MspInit+0x134>)
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_UART_MspInit+0x134>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_UART_MspInit+0x134>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_UART_MspInit+0x134>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_UART_MspInit+0x134>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <HAL_UART_MspInit+0x134>)
 800144a:	f001 fb89 	bl	8002b60 <HAL_DMA_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001454:	f7ff ff58 	bl	8001308 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_UART_MspInit+0x134>)
 800145c:	679a      	str	r2, [r3, #120]	; 0x78
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_UART_MspInit+0x134>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	2024      	movs	r0, #36	; 0x24
 800146a:	f001 fb44 	bl	8002af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146e:	2024      	movs	r0, #36	; 0x24
 8001470:	f001 fb5b 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
#endif
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40008000 	.word	0x40008000
 8001480:	20001610 	.word	0x20001610
 8001484:	40020044 	.word	0x40020044
 8001488:	40013800 	.word	0x40013800
 800148c:	20001520 	.word	0x20001520
 8001490:	40020058 	.word	0x40020058

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  gpio_lld_phy_gpioHardFault_up();
 80014a6:	f7ff fa6d 	bl	8000984 <gpio_lld_phy_gpioHardFault_up>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x8>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f001 f9dc 	bl	80028a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <DMA1_Channel4_IRQHandler>:
/******************************************************************************/
/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
#if (CFG_HW_LPUART1_ENABLED == 1)
#if (CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA1_Channel4_IRQHandler+0x10>)
 80014fa:	f001 fd12 	bl	8002f22 <HAL_DMA_IRQHandler>
#endif
#endif
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20001610 	.word	0x20001610

08001508 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
#if (CFG_HW_USART1_ENABLED == 1)
#if (CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA1_Channel5_IRQHandler+0x10>)
 800150e:	f001 fd08 	bl	8002f22 <HAL_DMA_IRQHandler>
#endif
#endif
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20001520 	.word	0x20001520

0800151c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
#if (CFG_HW_USART1_ENABLED == 1)
  HAL_UART_IRQHandler(&huart1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <USART1_IRQHandler+0x10>)
 8001522:	f003 ffdb 	bl	80054dc <HAL_UART_IRQHandler>
#endif
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20001580 	.word	0x20001580

08001530 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
#if (CFG_HW_LPUART1_ENABLED == 1)
  HAL_UART_IRQHandler(&hlpuart1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <LPUART1_IRQHandler+0x10>)
 8001536:	f003 ffd1 	bl	80054dc <HAL_UART_IRQHandler>
#endif
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20001490 	.word	0x20001490

08001544 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void BUTTON_SW1_EXTI_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8001548:	2010      	movs	r0, #16
 800154a:	f002 f81d 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}

08001552 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void BUTTON_SW2_EXTI_IRQHandler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8001556:	2001      	movs	r0, #1
 8001558:	f002 f816 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void BUTTON_SW3_EXTI_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8001564:	2002      	movs	r0, #2
 8001566:	f002 f80f 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}

0800156e <IPCC_C1_TX_IRQHandler>:
  HW_TS_RTC_Wakeup_Handler();
}
#endif

void IPCC_C1_TX_IRQHandler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001572:	f000 fe93 	bl	800229c <HW_IPCC_Tx_Handler>

  return;
 8001576:	bf00      	nop
}
 8001578:	bd80      	pop	{r7, pc}

0800157a <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800157e:	f000 fe33 	bl	80021e8 <HW_IPCC_Rx_Handler>
  return;
 8001582:	bf00      	nop
}
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	3b01      	subs	r3, #1
 800159c:	2b04      	cmp	r3, #4
 800159e:	d83e      	bhi.n	800161e <logRegion+0x96>
 80015a0:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <logRegion+0x20>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015bd 	.word	0x080015bd
 80015ac:	080015d1 	.word	0x080015d1
 80015b0:	080015e5 	.word	0x080015e5
 80015b4:	080015f7 	.word	0x080015f7
 80015b8:	0800160b 	.word	0x0800160b
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <logRegion+0xc4>)
 80015c2:	461c      	mov	r4, r3
 80015c4:	4615      	mov	r5, r2
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	7023      	strb	r3, [r4, #0]
      break;
 80015ce:	e02f      	b.n	8001630 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <logRegion+0xc8>)
 80015d6:	461c      	mov	r4, r3
 80015d8:	4615      	mov	r5, r2
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	6023      	str	r3, [r4, #0]
      break;
 80015e2:	e025      	b.n	8001630 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <logRegion+0xcc>)
 80015ea:	461c      	mov	r4, r3
 80015ec:	4613      	mov	r3, r2
 80015ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f0:	c407      	stmia	r4!, {r0, r1, r2}
 80015f2:	8023      	strh	r3, [r4, #0]
      break;
 80015f4:	e01c      	b.n	8001630 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <logRegion+0xd0>)
 80015fc:	461c      	mov	r4, r3
 80015fe:	4615      	mov	r5, r2
 8001600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	8023      	strh	r3, [r4, #0]
      break;
 8001608:	e012      	b.n	8001630 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <logRegion+0xd4>)
 8001610:	461c      	mov	r4, r3
 8001612:	4615      	mov	r5, r2
 8001614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	7023      	strb	r3, [r4, #0]
      break;
 800161c:	e008      	b.n	8001630 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <logRegion+0xd8>)
 8001624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001628:	6018      	str	r0, [r3, #0]
 800162a:	3304      	adds	r3, #4
 800162c:	7019      	strb	r1, [r3, #0]
      break;
 800162e:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8001630:	8879      	ldrh	r1, [r7, #2]
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <logRegion+0xdc>)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f007 fa35 	bl	8008aa8 <sniprintf>
 800163e:	4603      	mov	r3, r0
 8001640:	b29b      	uxth	r3, r3
}
 8001642:	4618      	mov	r0, r3
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	08009e24 	.word	0x08009e24
 8001650:	08009e38 	.word	0x08009e38
 8001654:	08009e4c 	.word	0x08009e4c
 8001658:	08009e5c 	.word	0x08009e5c
 800165c:	08009e70 	.word	0x08009e70
 8001660:	08009e84 	.word	0x08009e84
 8001664:	08009e8c 	.word	0x08009e8c

08001668 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d00a      	beq.n	800168e <levelToString+0x26>
 8001678:	2b03      	cmp	r3, #3
 800167a:	dc0a      	bgt.n	8001692 <levelToString+0x2a>
 800167c:	2b01      	cmp	r3, #1
 800167e:	d002      	beq.n	8001686 <levelToString+0x1e>
 8001680:	2b02      	cmp	r3, #2
 8001682:	d002      	beq.n	800168a <levelToString+0x22>
 8001684:	e005      	b.n	8001692 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <levelToString+0x38>)
 8001688:	e004      	b.n	8001694 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <levelToString+0x3c>)
 800168c:	e002      	b.n	8001694 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <levelToString+0x40>)
 8001690:	e000      	b.n	8001694 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <levelToString+0x44>)
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	08009e90 	.word	0x08009e90
 80016a4:	08009e98 	.word	0x08009e98
 80016a8:	08009ea0 	.word	0x08009ea0
 80016ac:	08009ea8 	.word	0x08009ea8

080016b0 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 80016c0:	887c      	ldrh	r4, [r7, #2]
 80016c2:	787b      	ldrb	r3, [r7, #1]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffcf 	bl	8001668 <levelToString>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <logLevel+0x34>)
 80016ce:	4621      	mov	r1, r4
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f007 f9e9 	bl	8008aa8 <sniprintf>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29b      	uxth	r3, r3
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	08009eb0 	.word	0x08009eb0

080016e8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80016e8:	b40c      	push	{r2, r3}
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b0c4      	sub	sp, #272	; 0x110
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4602      	mov	r2, r0
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	1dbb      	adds	r3, r7, #6
 80016f8:	460a      	mov	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8001702:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	18d0      	adds	r0, r2, r3
 800170c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001710:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001714:	b299      	uxth	r1, r3
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	f7ff ffc8 	bl	80016b0 <logLevel>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001728:	4413      	add	r3, r2
 800172a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800172e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001732:	f107 020c 	add.w	r2, r7, #12
 8001736:	18d0      	adds	r0, r2, r3
 8001738:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800173c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001740:	b299      	uxth	r1, r3
 8001742:	1dbb      	adds	r3, r7, #6
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	f7ff ff1e 	bl	8001588 <logRegion>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001754:	4413      	add	r3, r2
 8001756:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800175a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8001764:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001768:	f107 020c 	add.w	r2, r7, #12
 800176c:	18d0      	adds	r0, r2, r3
 800176e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001772:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001780:	f007 f9f2 	bl	8008b68 <vsniprintf>
 8001784:	4603      	mov	r3, r0
 8001786:	b29a      	uxth	r2, r3
 8001788:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800178c:	4413      	add	r3, r2
 800178e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8001792:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800179c:	461a      	mov	r2, r3
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	210d      	movs	r1, #13
 80017a4:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 80017a6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80017b0:	461a      	mov	r2, r3
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	210a      	movs	r1, #10
 80017b8:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 80017ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80017c4:	461a      	mov	r2, r3
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d805      	bhi.n	80017e2 <logApplication+0xfa>
  {
    printf("%s", logString);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <logApplication+0x10c>)
 80017de:	f007 f94b 	bl	8008a78 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80017e2:	bf00      	nop
 80017e4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80017e8:	46bd      	mov	sp, r7
 80017ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ee:	b002      	add	sp, #8
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	08009eb0 	.word	0x08009eb0

080017f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
	}

return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185a:	605a      	str	r2, [r3, #4]
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_isatty>:

int _isatty(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	return 1;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f007 f894 	bl	80089f8 <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20030000 	.word	0x20030000
 80018fc:	00001000 	.word	0x00001000
 8001900:	200000c8 	.word	0x200000c8
 8001904:	20001690 	.word	0x20001690

08001908 <APP_BLE_LLD_Init>:


/* Functions Definition ------------------------------------------------------*/

void APP_BLE_LLD_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
  uint32_t devId = HAL_GetDEVID();
 800190e:	f001 f80a 	bl	8002926 <HAL_GetDEVID>
 8001912:	4603      	mov	r3, r0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t revId = HAL_GetREVID();
 8001916:	f000 ffff 	bl	8002918 <HAL_GetREVID>
 800191a:	4603      	mov	r3, r0
 800191c:	60fb      	str	r3, [r7, #12]
  uint8_t  param[8];
  SHCI_CmdStatus_t LldTestsInitStatus;

  /* Initialize transport layer */
  BleLldConfigBuffer.p_BleLldCmdRspBuffer = (uint8_t*)&BleLldCmdRspPacket;
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <APP_BLE_LLD_Init+0xa0>)
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <APP_BLE_LLD_Init+0xa4>)
 8001922:	601a      	str	r2, [r3, #0]
  BleLldConfigBuffer.p_BleLldM0CmdBuffer = (uint8_t*)&BleLldM0CmdPacket;
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <APP_BLE_LLD_Init+0xa0>)
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <APP_BLE_LLD_Init+0xa8>)
 8001928:	605a      	str	r2, [r3, #4]
  TL_BLE_LLD_Init(&BleLldConfigBuffer);
 800192a:	481f      	ldr	r0, [pc, #124]	; (80019a8 <APP_BLE_LLD_Init+0xa0>)
 800192c:	f006 fc96 	bl	800825c <TL_BLE_LLD_Init>

  APP_BLE_LLD_Init_UART();
 8001930:	f000 f8ee 	bl	8001b10 <APP_BLE_LLD_Init_UART>

  /* Send LLD tests start information to UART */
  uartWrite("");
 8001934:	481f      	ldr	r0, [pc, #124]	; (80019b4 <APP_BLE_LLD_Init+0xac>)
 8001936:	f000 f907 	bl	8001b48 <uartWrite>
  uartWrite("================================");
 800193a:	481f      	ldr	r0, [pc, #124]	; (80019b8 <APP_BLE_LLD_Init+0xb0>)
 800193c:	f000 f904 	bl	8001b48 <uartWrite>
  uartWrite("RF BLE LLD");
 8001940:	481e      	ldr	r0, [pc, #120]	; (80019bc <APP_BLE_LLD_Init+0xb4>)
 8001942:	f000 f901 	bl	8001b48 <uartWrite>
  uartWrite("================================");
 8001946:	481c      	ldr	r0, [pc, #112]	; (80019b8 <APP_BLE_LLD_Init+0xb0>)
 8001948:	f000 f8fe 	bl	8001b48 <uartWrite>
#endif
#if (( CFG_DEBUG_TRACE_FULL == 0 ) && ( CFG_DEBUG_TRACE_LIGHT == 0 ))
  uartWrite("Trace is de-activated");
#endif

  APP_DBG("Test appli initialized on M4, waiting for M0 initialization");
 800194c:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <APP_BLE_LLD_Init+0xb8>)
 800194e:	2101      	movs	r1, #1
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fec9 	bl	80016e8 <logApplication>
 8001956:	693b      	ldr	r3, [r7, #16]

  /* Send start cmd to M0 (with device and revision ID as parameters */
  memcpy(&param[0], &devId, sizeof(devId));
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
  memcpy(&param[4], &revId, sizeof(revId));
 800195c:	60bb      	str	r3, [r7, #8]
  LldTestsInitStatus = SHCI_C2_BLE_LLD_Init(sizeof(param), param);
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	2008      	movs	r0, #8
 8001964:	f005 fcc8 	bl	80072f8 <SHCI_C2_BLE_LLD_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	75fb      	strb	r3, [r7, #23]
  if(LldTestsInitStatus != SHCI_Success){
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <APP_BLE_LLD_Init+0x76>
    APP_DBG("!! ERROR during M0 init !!");
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <APP_BLE_LLD_Init+0xbc>)
 8001974:	2101      	movs	r1, #1
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff feb6 	bl	80016e8 <logApplication>
 800197c:	e004      	b.n	8001988 <APP_BLE_LLD_Init+0x80>
  }else{
    APP_DBG("M0 initialized");
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <APP_BLE_LLD_Init+0xc0>)
 8001980:	2101      	movs	r1, #1
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff feb0 	bl	80016e8 <logApplication>
  }

  UTIL_SEQ_RegTask( 1<<CFG_TASK_CMD_FROM_M0_TO_M4, UTIL_SEQ_RFU, m0CmdProcess);
 8001988:	4a10      	ldr	r2, [pc, #64]	; (80019cc <APP_BLE_LLD_Init+0xc4>)
 800198a:	2100      	movs	r1, #0
 800198c:	2001      	movs	r0, #1
 800198e:	f006 ff01 	bl	8008794 <UTIL_SEQ_RegTask>

  BLE_LLD_PRX_Init(&bleparam_BLE_LLD_Packet.params,
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <APP_BLE_LLD_Init+0xc8>)
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <APP_BLE_LLD_Init+0xcc>)
 8001996:	4910      	ldr	r1, [pc, #64]	; (80019d8 <APP_BLE_LLD_Init+0xd0>)
 8001998:	4810      	ldr	r0, [pc, #64]	; (80019dc <APP_BLE_LLD_Init+0xd4>)
 800199a:	f005 f977 	bl	8006c8c <BLE_LLD_PRX_Init>
                   &txBuffer,
                   &rxBuffer,
                   APP_BLE_LLD_SendCmdM0);
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20030028 	.word	0x20030028
 80019ac:	200318f0 	.word	0x200318f0
 80019b0:	200317e4 	.word	0x200317e4
 80019b4:	08009eb4 	.word	0x08009eb4
 80019b8:	08009eb8 	.word	0x08009eb8
 80019bc:	08009edc 	.word	0x08009edc
 80019c0:	08009ee8 	.word	0x08009ee8
 80019c4:	08009f24 	.word	0x08009f24
 80019c8:	08009f40 	.word	0x08009f40
 80019cc:	08001ca1 	.word	0x08001ca1
 80019d0:	08001cd9 	.word	0x08001cd9
 80019d4:	20031b34 	.word	0x20031b34
 80019d8:	20031a30 	.word	0x20031a30
 80019dc:	200319fd 	.word	0x200319fd

080019e0 <APP_BLE_LLD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_BLE_LLD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  char *msg;
  switch(ErrId)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d00f      	beq.n	8001a10 <APP_BLE_LLD_Error+0x30>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d80f      	bhi.n	8001a16 <APP_BLE_LLD_Error+0x36>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <APP_BLE_LLD_Error+0x24>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d003      	beq.n	8001a0a <APP_BLE_LLD_Error+0x2a>
 8001a02:	e008      	b.n	8001a16 <APP_BLE_LLD_Error+0x36>
  {
    case ERR_BLE_LLD_SET_STATE_CB:          msg = "ERROR: ERR_BLE_LLD_SET_STATE_CB";           break;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <APP_BLE_LLD_Error+0x78>)
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e008      	b.n	8001a1c <APP_BLE_LLD_Error+0x3c>
    case ERR_BLE_LLD_ERASE_PERSISTENT_INFO: msg = "ERROR: ERR_BLE_BLE_LLD_ERASE_PERSISTENT_INFO"; break;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <APP_BLE_LLD_Error+0x7c>)
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e005      	b.n	8001a1c <APP_BLE_LLD_Error+0x3c>
    case ERR_BLE_LLD_CHECK_WIRELESS:        msg = "ERROR: ERR_BLE_LLD_CHECK_WIRELESS ";       break;
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <APP_BLE_LLD_Error+0x80>)
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e002      	b.n	8001a1c <APP_BLE_LLD_Error+0x3c>
    default:                                msg = "ERROR Unknown ";                            break;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <APP_BLE_LLD_Error+0x84>)
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	bf00      	nop
  }
  APP_DBG("**** Fatal error = %s (Err = %d)", msg, ErrCode);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <APP_BLE_LLD_Error+0x88>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fe5e 	bl	80016e8 <logApplication>
  while(true)
  {
    BSP_LED_Toggle(LED1);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 fddd 	bl	80025ec <BSP_LED_Toggle>
    HAL_Delay(500U);
 8001a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a36:	f7ff fc42 	bl	80012be <HAL_Delay>
    BSP_LED_Toggle(LED2);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f000 fdd6 	bl	80025ec <BSP_LED_Toggle>
    HAL_Delay(500U);
 8001a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a44:	f7ff fc3b 	bl	80012be <HAL_Delay>
    BSP_LED_Toggle(LED3);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f000 fdcf 	bl	80025ec <BSP_LED_Toggle>
    HAL_Delay(500U);
 8001a4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a52:	f7ff fc34 	bl	80012be <HAL_Delay>
    BSP_LED_Toggle(LED1);
 8001a56:	e7e9      	b.n	8001a2c <APP_BLE_LLD_Error+0x4c>
 8001a58:	08009f50 	.word	0x08009f50
 8001a5c:	08009f70 	.word	0x08009f70
 8001a60:	08009fa0 	.word	0x08009fa0
 8001a64:	08009fc4 	.word	0x08009fc4
 8001a68:	08009fd4 	.word	0x08009fd4

08001a6c <CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
void CheckWirelessFirmwareInfo(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af02      	add	r7, sp, #8
  WirelessFwInfo_t  wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	617b      	str	r3, [r7, #20]
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f005 fc56 	bl	8007328 <SHCI_GetWirelessFwInfo>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <CheckWirelessFirmwareInfo+0x20>
  {
    APP_BLE_LLD_Error(ERR_BLE_LLD_CHECK_WIRELESS, 0);
 8001a82:	2100      	movs	r1, #0
 8001a84:	2002      	movs	r0, #2
 8001a86:	f7ff ffab 	bl	80019e0 <APP_BLE_LLD_Error>
      break;
    }
    APP_DBG("  M0 FW VERSION: v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
    APP_DBG("**********************************************************");
  }
}
 8001a8a:	e032      	b.n	8001af2 <CheckWirelessFirmwareInfo+0x86>
    APP_DBG("**********************************************************");
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <CheckWirelessFirmwareInfo+0x90>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fe29 	bl	80016e8 <logApplication>
    APP_DBG("Loaded M0 TEST FW info:");
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <CheckWirelessFirmwareInfo+0x94>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fe24 	bl	80016e8 <logApplication>
    switch(p_wireless_info->StackType)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	7a5b      	ldrb	r3, [r3, #9]
 8001aa4:	2b62      	cmp	r3, #98	; 0x62
 8001aa6:	d105      	bne.n	8001ab4 <CheckWirelessFirmwareInfo+0x48>
      APP_DBG("  M0 FW Type: BLE and radio PHY validation");
 8001aa8:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <CheckWirelessFirmwareInfo+0x98>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fe1b 	bl	80016e8 <logApplication>
      break;
 8001ab2:	e009      	b.n	8001ac8 <CheckWirelessFirmwareInfo+0x5c>
      APP_DBG("  ERROR: incompatible firmware");
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <CheckWirelessFirmwareInfo+0x9c>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fe15 	bl	80016e8 <logApplication>
      APP_BLE_LLD_Error(ERR_BLE_LLD_CHECK_WIRELESS, 0);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f7ff ff8d 	bl	80019e0 <APP_BLE_LLD_Error>
      break;
 8001ac6:	bf00      	nop
    APP_DBG("  M0 FW VERSION: v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	785b      	ldrb	r3, [r3, #1]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	789b      	ldrb	r3, [r3, #2]
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	9200      	str	r2, [sp, #0]
 8001adc:	460b      	mov	r3, r1
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <CheckWirelessFirmwareInfo+0xa0>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fe00 	bl	80016e8 <logApplication>
    APP_DBG("**********************************************************");
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <CheckWirelessFirmwareInfo+0x90>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fdfb 	bl	80016e8 <logApplication>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	08009ff8 	.word	0x08009ff8
 8001b00:	0800a034 	.word	0x0800a034
 8001b04:	0800a04c 	.word	0x0800a04c
 8001b08:	0800a078 	.word	0x0800a078
 8001b0c:	0800a098 	.word	0x0800a098

08001b10 <APP_BLE_LLD_Init_UART>:
 * @brief Perform initialization of UART.
 * @param  None
 * @retval None
 */
void APP_BLE_LLD_Init_UART(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af02      	add	r7, sp, #8
#ifdef CFG_UART
  MX_UART_Init(CFG_UART);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7fe ffa2 	bl	8000a60 <MX_UART_Init>
#endif

  CircularQueue_Init(&uartTxBuf,
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001b26:	4905      	ldr	r1, [pc, #20]	; (8001b3c <APP_BLE_LLD_Init_UART+0x2c>)
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <APP_BLE_LLD_Init_UART+0x30>)
 8001b2a:	f005 fe9d 	bl	8007868 <CircularQueue_Init>
                     uartTxBufData,
                     sizeof(uartTxBufData),
                     sizeof(char),
                     CIRCULAR_QUEUE_NO_FLAG);
  txBusy = false;
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <APP_BLE_LLD_Init_UART+0x34>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200000ec 	.word	0x200000ec
 8001b40:	200000cc 	.word	0x200000cc
 8001b44:	200001f8 	.word	0x200001f8

08001b48 <uartWrite>:
  // Since UART is in full duplex, receive can be always active without blocking send
  uartRxStart();
}

void uartWrite(const char *format, ...)
{
 8001b48:	b40f      	push	{r0, r1, r2, r3}
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b092      	sub	sp, #72	; 0x48
 8001b4e:	af00      	add	r7, sp, #0
  char out[UART_BUFFER_SIZE];
  int nbChar;
  va_list argp;
  va_start(argp, format);
 8001b50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b54:	603b      	str	r3, [r7, #0]
  nbChar = vsnprintf(out, sizeof(out), format, argp);
 8001b56:	1d38      	adds	r0, r7, #4
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	f007 f803 	bl	8008b68 <vsniprintf>
 8001b62:	6478      	str	r0, [r7, #68]	; 0x44
  va_end(argp);
  if (nbChar < 0){
 8001b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db1c      	blt.n	8001ba4 <uartWrite+0x5c>
    return;
  }
  if (nbChar > (sizeof(out) - ((strlen(UART_LINE_END) + 1)))){
 8001b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6c:	2b3d      	cmp	r3, #61	; 0x3d
 8001b6e:	d907      	bls.n	8001b80 <uartWrite+0x38>
    strcpy(&(out[sizeof(out) - (strlen(UART_LINE_END) + 1)]), UART_LINE_END);
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	333d      	adds	r3, #61	; 0x3d
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <uartWrite+0x6c>)
 8001b76:	8811      	ldrh	r1, [r2, #0]
 8001b78:	7892      	ldrb	r2, [r2, #2]
 8001b7a:	8019      	strh	r1, [r3, #0]
 8001b7c:	709a      	strb	r2, [r3, #2]
 8001b7e:	e00c      	b.n	8001b9a <uartWrite+0x52>
  }else{
    strcat(out, UART_LINE_END);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fafc 	bl	8000180 <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <uartWrite+0x6c>)
 8001b92:	8811      	ldrh	r1, [r2, #0]
 8001b94:	7892      	ldrb	r2, [r2, #2]
 8001b96:	8019      	strh	r1, [r3, #0]
 8001b98:	709a      	strb	r2, [r3, #2]
  }
  uartWriteRaw(out);
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f80b 	bl	8001bb8 <uartWriteRaw>
 8001ba2:	e000      	b.n	8001ba6 <uartWrite+0x5e>
    return;
 8001ba4:	bf00      	nop
}
 8001ba6:	3748      	adds	r7, #72	; 0x48
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bae:	b004      	add	sp, #16
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	0800a0dc 	.word	0x0800a0dc

08001bb8 <uartWriteRaw>:

void uartWriteRaw(const char *str)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8001bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8001bc6:	693b      	ldr	r3, [r7, #16]
  CRITICAL_BEGIN();
 8001bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bca:	b672      	cpsid	i
}
 8001bcc:	bf00      	nop
  while (*str != '\0'){
 8001bce:	e008      	b.n	8001be2 <uartWriteRaw+0x2a>
    CircularQueue_Add(&uartTxBuf, (uint8_t *)str, 0, 1);
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <uartWriteRaw+0x58>)
 8001bd8:	f005 fe78 	bl	80078cc <CircularQueue_Add>
    str++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
  while (*str != '\0'){
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f2      	bne.n	8001bd0 <uartWriteRaw+0x18>
  }
  if (! txBusy){
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <uartWriteRaw+0x5c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <uartWriteRaw+0x44>
    uartTxSendChunk();
 8001bf8:	f000 f80e 	bl	8001c18 <uartTxSendChunk>
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f383 8810 	msr	PRIMASK, r3
}
 8001c06:	bf00      	nop
  }
  CRITICAL_END();
}
 8001c08:	bf00      	nop
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200000cc 	.word	0x200000cc
 8001c14:	200001f8 	.word	0x200001f8

08001c18 <uartTxSendChunk>:

// Send multiple chars through the UART
// must be called inside critical section
// loop on itself via the UART callback
static void uartTxSendChunk(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  static char hwBuf[UART_TX_CHUNK_SIZE];
  char *charPtr;
  uint32_t count = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]

  while ((charPtr = (char *)CircularQueue_Remove(&uartTxBuf, NULL)) != NULL){
 8001c22:	e00c      	b.n	8001c3e <uartTxSendChunk+0x26>
    hwBuf[count] = *charPtr;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <uartTxSendChunk+0x74>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	460a      	mov	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
    count++;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3301      	adds	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
    if (count >= UART_TX_CHUNK_SIZE){
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	d808      	bhi.n	8001c50 <uartTxSendChunk+0x38>
  while ((charPtr = (char *)CircularQueue_Remove(&uartTxBuf, NULL)) != NULL){
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4813      	ldr	r0, [pc, #76]	; (8001c90 <uartTxSendChunk+0x78>)
 8001c42:	f006 f86a 	bl	8007d1a <CircularQueue_Remove>
 8001c46:	6038      	str	r0, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ea      	bne.n	8001c24 <uartTxSendChunk+0xc>
 8001c4e:	e000      	b.n	8001c52 <uartTxSendChunk+0x3a>
      break;
 8001c50:	bf00      	nop
    }
  }
  if (count != 0){
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d012      	beq.n	8001c7e <uartTxSendChunk+0x66>
    txBusy = true;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <uartTxSendChunk+0x7c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
    if (HW_UART_Transmit_IT(CFG_UART, (uint8_t *)hwBuf, count, uartTxSendChunk) != hw_uart_ok){
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <uartTxSendChunk+0x80>)
 8001c64:	4909      	ldr	r1, [pc, #36]	; (8001c8c <uartTxSendChunk+0x74>)
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7fe ff68 	bl	8000b3c <HW_UART_Transmit_IT>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <uartTxSendChunk+0x6c>
      APP_DBG("ERROR returned by HW_UART_Transmit_IT()");
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <uartTxSendChunk+0x84>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fd36 	bl	80016e8 <logApplication>
    }
  }else{
    txBusy = false;
  }
}
 8001c7c:	e002      	b.n	8001c84 <uartTxSendChunk+0x6c>
    txBusy = false;
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <uartTxSendChunk+0x7c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200001fc 	.word	0x200001fc
 8001c90:	200000cc 	.word	0x200000cc
 8001c94:	200001f8 	.word	0x200001f8
 8001c98:	08001c19 	.word	0x08001c19
 8001c9c:	0800a0e0 	.word	0x0800a0e0

08001ca0 <m0CmdProcess>:

static void m0CmdProcess(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  BLE_LLD_PRX_EventProcessTask();
 8001ca4:	f005 f95e 	bl	8006f64 <BLE_LLD_PRX_EventProcessTask>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <TL_BLE_LLD_ReceiveM0Cmd>:
 *
 * @param   cmdBuffer : a pointer to TL_CmdPacket_t
 * @return  None
 */
void TL_BLE_LLD_ReceiveM0Cmd( TL_CmdPacket_t * cmdBuffer )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  BLE_LLD_PRX_EventProcessInter((radioEventType)cmdBuffer->cmdserial.cmd.cmdcode);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 f91e 	bl	8006f00 <BLE_LLD_PRX_EventProcessInter>
  UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f006 fd86 	bl	80087d8 <UTIL_SEQ_SetTask>
  TL_BLE_LLD_SendM0CmdAck();
 8001ccc:	f006 faea 	bl	80082a4 <TL_BLE_LLD_SendM0CmdAck>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <APP_BLE_LLD_SendCmdM0>:
 * Waits for reply from radio CPU before returning (synchronous calls).
 *
 * @param[in] command BLE command already packed (by LLD)
 */
uint8_t APP_BLE_LLD_SendCmdM0(BLE_LLD_Code_t bleCmd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  BleLldCmdRspPacket.cmdserial.cmd.cmdcode = bleCmd;
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <APP_BLE_LLD_SendCmdM0+0x3c>)
 8001ce8:	f8a3 2009 	strh.w	r2, [r3, #9]
  payload_BLE_LLD_t *payload = (payload_BLE_LLD_t *)&BleLldCmdRspPacket.cmdserial.cmd.payload;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <APP_BLE_LLD_SendCmdM0+0x40>)
 8001cee:	60fb      	str	r3, [r7, #12]
  payload->msg = &bleparam_BLE_LLD_Packet;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <APP_BLE_LLD_SendCmdM0+0x44>)
 8001cf4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_ClrEvt(1U << CFG_EVT_RECEIVE_RSPACKEVT);
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f006 fdba 	bl	8008870 <UTIL_SEQ_ClrEvt>
  TL_BLE_LLD_SendCmd();
 8001cfc:	f006 fad8 	bl	80082b0 <TL_BLE_LLD_SendCmd>
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_RECEIVE_RSPACKEVT);
 8001d00:	2002      	movs	r0, #2
 8001d02:	f006 fdd5 	bl	80088b0 <UTIL_SEQ_WaitEvt>

  return bleparam_BLE_LLD_Packet.returnValue;
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <APP_BLE_LLD_SendCmdM0+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200318f0 	.word	0x200318f0
 8001d18:	200318fc 	.word	0x200318fc
 8001d1c:	200319fc 	.word	0x200319fc

08001d20 <TL_BLE_LLD_ReceiveRsp>:
 *
 * @param   Notbuffer : a pointer to TL_CmdPacket_t
 * @return  None
 */
void TL_BLE_LLD_ReceiveRsp( TL_CmdPacket_t * Notbuffer )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  switch (Notbuffer->cmdserial.cmd.cmdcode){
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <TL_BLE_LLD_ReceiveRsp+0x1c>
    case BLE_LLD_RSP_END:
      UTIL_SEQ_SetEvt(1U << CFG_EVT_RECEIVE_RSPACKEVT);
 8001d34:	2002      	movs	r0, #2
 8001d36:	f006 fd7b 	bl	8008830 <UTIL_SEQ_SetEvt>
      break;
 8001d3a:	e008      	b.n	8001d4e <TL_BLE_LLD_ReceiveRsp+0x2e>
    default:
      APP_DBG("WARNING: unknown response received %d", Notbuffer->cmdserial.cmd.cmdcode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <TL_BLE_LLD_ReceiveRsp+0x3c>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fccd 	bl	80016e8 <logApplication>
  }

    /* This is just a trace from M0, write to UART */
    //uartWriteRaw(sourceBuf);

  TL_BLE_LLD_SendRspAck();
 8001d4e:	f006 fac9 	bl	80082e4 <TL_BLE_LLD_SendRspAck>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	0800a108 	.word	0x0800a108

08001d60 <PRESSBUTTON_APP_Init>:
static uint32_t ledToToggle;

/* Functions Definition ------------------------------------------------------*/

void PRESSBUTTON_APP_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  CheckWirelessFirmwareInfo();
 8001d64:	f7ff fe82 	bl	8001a6c <CheckWirelessFirmwareInfo>

  /* Disable low power */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE_LLD, UTIL_LPM_DISABLE);
 8001d68:	2101      	movs	r1, #1
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f006 fbf8 	bl	8008560 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_BLE_LLD, UTIL_LPM_DISABLE );
 8001d70:	2101      	movs	r1, #1
 8001d72:	2002      	movs	r0, #2
 8001d74:	f006 fbc4 	bl	8008500 <UTIL_LPM_SetStopMode>

  /* Register tasks for event processing */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BUTTON, UTIL_SEQ_RFU, sendStart);
 8001d78:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <PRESSBUTTON_APP_Init+0x34>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2008      	movs	r0, #8
 8001d7e:	f006 fd09 	bl	8008794 <UTIL_SEQ_RegTask>

  APP_BLE_LLD_Init();
 8001d82:	f7ff fdc1 	bl	8001908 <APP_BLE_LLD_Init>
  radioInit();
 8001d86:	f000 f807 	bl	8001d98 <radioInit>
  listenStart();
 8001d8a:	f000 f853 	bl	8001e34 <listenStart>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	08001f15 	.word	0x08001f15

08001d98 <radioInit>:

static void radioInit(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af02      	add	r7, sp, #8
  HAL_BLE_LLD_Init(CFG_HS_STARTUP_TIME, true);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2099      	movs	r0, #153	; 0x99
 8001da2:	f004 fed5 	bl	8006b50 <HAL_BLE_LLD_Init>
  HAL_BLE_LLD_Configure(POWER, CHANNEL, true, CFG_BACK2BACK_TIME, NET_ID);
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <radioInit+0x24>)
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	23c8      	movs	r3, #200	; 0xc8
 8001dac:	2201      	movs	r2, #1
 8001dae:	2108      	movs	r1, #8
 8001db0:	201f      	movs	r0, #31
 8001db2:	f004 fee0 	bl	8006b76 <HAL_BLE_LLD_Configure>
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	5a964129 	.word	0x5a964129

08001dc0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  static uint32_t latest = 0;

  // Debounce
  if (timeDifference(latest, HAL_GetTick()) > DEBOUNCE_MS){
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001dcc:	681c      	ldr	r4, [r3, #0]
 8001dce:	f000 fd7f 	bl	80028d0 <HAL_GetTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f000 f8d6 	bl	8001f88 <timeDifference>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2bfa      	cmp	r3, #250	; 0xfa
 8001de0:	d920      	bls.n	8001e24 <HAL_GPIO_EXTI_Callback+0x64>
    latest = HAL_GetTick();
 8001de2:	f000 fd75 	bl	80028d0 <HAL_GetTick>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001dea:	6013      	str	r3, [r2, #0]
    switch (GPIO_Pin){
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d006      	beq.n	8001e00 <HAL_GPIO_EXTI_Callback+0x40>
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	dc15      	bgt.n	8001e22 <HAL_GPIO_EXTI_Callback+0x62>
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d006      	beq.n	8001e08 <HAL_GPIO_EXTI_Callback+0x48>
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d008      	beq.n	8001e10 <HAL_GPIO_EXTI_Callback+0x50>
      case BUTTON_SW1_PIN: ledToToggle = LED1; break;
      case BUTTON_SW2_PIN: ledToToggle = LED2; break;
      case BUTTON_SW3_PIN: ledToToggle = LED3; break;
      default: return;
 8001dfe:	e010      	b.n	8001e22 <HAL_GPIO_EXTI_Callback+0x62>
      case BUTTON_SW1_PIN: ledToToggle = LED1; break;
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x70>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_GPIO_EXTI_Callback+0x58>
      case BUTTON_SW2_PIN: ledToToggle = LED2; break;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x70>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_EXTI_Callback+0x58>
      case BUTTON_SW3_PIN: ledToToggle = LED3; break;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x70>)
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	bf00      	nop
    }
    UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON, CFG_SCH_PRIO_0);
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2008      	movs	r0, #8
 8001e1c:	f006 fcdc 	bl	80087d8 <UTIL_SEQ_SetTask>
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_EXTI_Callback+0x64>
      default: return;
 8001e22:	bf00      	nop
  }
}
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000210 	.word	0x20000210
 8001e30:	2000020c 	.word	0x2000020c

08001e34 <listenStart>:

static void listenStart(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  uint8_t status;
  status = HAL_BLE_LLD_ReceivePacket(RX_TIMEOUT_US, listenEnd);
 8001e3a:	4909      	ldr	r1, [pc, #36]	; (8001e60 <listenStart+0x2c>)
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <listenStart+0x30>)
 8001e3e:	f004 fef7 	bl	8006c30 <HAL_BLE_LLD_ReceivePacket>
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if (status != SUCCESS_0){
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <listenStart+0x24>
    APP_DBG("ERROR: %s: HAL call failed", __func__);
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <listenStart+0x34>)
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <listenStart+0x38>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fc48 	bl	80016e8 <logApplication>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	08001e71 	.word	0x08001e71
 8001e64:	000f4240 	.word	0x000f4240
 8001e68:	0800a2bc 	.word	0x0800a2bc
 8001e6c:	0800a130 	.word	0x0800a130

08001e70 <listenEnd>:

static void listenEnd(radioEventType cmd, ActionPacket *ap, void *data, uint8_t size)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	4613      	mov	r3, r2
 8001e82:	73bb      	strb	r3, [r7, #14]
  userPayload *payload = data;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	617b      	str	r3, [r7, #20]
  Led_TypeDef led;
  APP_DBG("%s: event %s", __func__, eventToString(cmd));
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f005 f8b6 	bl	8006ffc <eventToString>
 8001e90:	4603      	mov	r3, r0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <listenEnd+0x90>)
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <listenEnd+0x94>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fc24 	bl	80016e8 <logApplication>
  if (cmd == RX_OK_READY){
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d125      	bne.n	8001ef2 <listenEnd+0x82>
    if (size != sizeof(userPayload)){
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d006      	beq.n	8001eba <listenEnd+0x4a>
      APP_DBG("%s: wrong payload length, packet discarded", __func__);
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <listenEnd+0x90>)
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <listenEnd+0x98>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fc18 	bl	80016e8 <logApplication>
 8001eb8:	e01b      	b.n	8001ef2 <listenEnd+0x82>
    }else{
      led = (Led_TypeDef)payload->led;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	74fb      	strb	r3, [r7, #19]
      if (led != LED1 && led != LED2 && led != LED3){
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00c      	beq.n	8001ee0 <listenEnd+0x70>
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d009      	beq.n	8001ee0 <listenEnd+0x70>
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d006      	beq.n	8001ee0 <listenEnd+0x70>
        APP_DBG("%s: wrong led value, packet discarded", __func__);
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <listenEnd+0x90>)
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <listenEnd+0x9c>)
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff fc05 	bl	80016e8 <logApplication>
 8001ede:	e008      	b.n	8001ef2 <listenEnd+0x82>
      }else{
        BSP_LED_Toggle(led);
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fb82 	bl	80025ec <BSP_LED_Toggle>
        uartWrite("Led %d is Toggling", led);
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4808      	ldr	r0, [pc, #32]	; (8001f10 <listenEnd+0xa0>)
 8001eee:	f7ff fe2b 	bl	8001b48 <uartWrite>
      }
    }
  }
  listenStart();
 8001ef2:	f7ff ff9f 	bl	8001e34 <listenStart>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	0800a2c8 	.word	0x0800a2c8
 8001f04:	0800a14c 	.word	0x0800a14c
 8001f08:	0800a15c 	.word	0x0800a15c
 8001f0c:	0800a188 	.word	0x0800a188
 8001f10:	0800a1b0 	.word	0x0800a1b0

08001f14 <sendStart>:


static void sendStart(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  userPayload payload;

  // Need to interrupt radio while it is listening, then to reinit
  BLE_LLD_StopActivity();
 8001f1a:	f004 ffe9 	bl	8006ef0 <BLE_LLD_StopActivity>
  radioInit();
 8001f1e:	f7ff ff3b 	bl	8001d98 <radioInit>

  payload.led = ledToToggle;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <sendStart+0x2c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	713b      	strb	r3, [r7, #4]
  HAL_BLE_LLD_SendPacket(&payload, sizeof(payload),sendEnd);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <sendStart+0x30>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fe4b 	bl	8006bcc <HAL_BLE_LLD_SendPacket>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000020c 	.word	0x2000020c
 8001f44:	08001f49 	.word	0x08001f49

08001f48 <sendEnd>:

static void sendEnd(radioEventType cmd, ActionPacket *ap, void *data, uint8_t size)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	73bb      	strb	r3, [r7, #14]
  APP_DBG("%s: event %s", __func__, eventToString(cmd));
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 f84c 	bl	8006ffc <eventToString>
 8001f64:	4603      	mov	r3, r0
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <sendEnd+0x38>)
 8001f6a:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <sendEnd+0x3c>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fbba 	bl	80016e8 <logApplication>
  listenStart();
 8001f74:	f7ff ff5e 	bl	8001e34 <listenStart>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	0800a2d4 	.word	0x0800a2d4
 8001f84:	0800a14c 	.word	0x0800a14c

08001f88 <timeDifference>:

// Computes difference between old and new timestamps with rollover handling
static inline uint32_t timeDifference(uint32_t old, uint32_t new){
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  if(new < old){
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d203      	bcs.n	8001fa2 <timeDifference+0x1a>
    // Rollover happened
    return UINT32_MAX - old + 1 + new;
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	e002      	b.n	8001fa8 <timeDifference+0x20>
  }else{
    return new - old;
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1ad3      	subs	r3, r2, r3
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <LL_PWR_EnableBootC2+0x1c>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <LL_PWR_EnableBootC2+0x1c>)
 8001fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	58000400 	.word	0x58000400

08001fd4 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001fde:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001fe2:	4905      	ldr	r1, [pc, #20]	; (8001ff8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	58000800 	.word	0x58000800

08001ffc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	4904      	ldr	r1, [pc, #16]	; (800201c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4313      	orrs	r3, r2
 800200e:	620b      	str	r3, [r1, #32]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	58000800 	.word	0x58000800

08002020 <LL_AHB3_GRP1_EnableClock>:
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800202e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4313      	orrs	r3, r2
 8002036:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_C1_IPCC_EnableIT_TXF>:
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_C1_IPCC_EnableIT_RXO>:
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_C1_IPCC_EnableTransmitChannel>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	605a      	str	r2, [r3, #4]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	43db      	mvns	r3, r3
 8002126:	401a      	ands	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	605a      	str	r2, [r3, #4]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	605a      	str	r2, [r3, #4]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_C1_IPCC_ClearFlag_CHx>:
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	609a      	str	r2, [r3, #8]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_C1_IPCC_SetFlag_CHx>:
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	041a      	lsls	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	4013      	ands	r3, r2
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d101      	bne.n	80021b0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4013      	ands	r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d101      	bne.n	80021da <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80021ec:	2102      	movs	r1, #2
 80021ee:	482a      	ldr	r0, [pc, #168]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 80021f0:	f7ff ffe5 	bl	80021be <LL_C2_IPCC_IsActiveFlag_CHx>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HW_IPCC_Rx_Handler+0x26>
 80021fa:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	43db      	mvns	r3, r3
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002208:	f000 f8e8 	bl	80023dc <HW_IPCC_SYS_EvtHandler>
 800220c:	e041      	b.n	8002292 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_LLDTESTS_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef BLE_LLD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_LLD_RSP_CHANNEL ))
 800220e:	2110      	movs	r1, #16
 8002210:	4821      	ldr	r0, [pc, #132]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 8002212:	f7ff ffd4 	bl	80021be <LL_C2_IPCC_IsActiveFlag_CHx>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HW_IPCC_Rx_Handler+0x48>
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	43db      	mvns	r3, r3
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_BLE_LLD_ReceiveRspHandler();
 800222a:	f000 f90b 	bl	8002444 <HW_IPCC_BLE_LLD_ReceiveRspHandler>
 800222e:	e030      	b.n	8002292 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_LLD_M0_CMD_CHANNEL ))
 8002230:	2104      	movs	r1, #4
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 8002234:	f7ff ffc3 	bl	80021be <LL_C2_IPCC_IsActiveFlag_CHx>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HW_IPCC_Rx_Handler+0x6a>
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	43db      	mvns	r3, r3
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_BLE_LLD_ReceiveM0CmdHandler();
 800224c:	f000 f8e0 	bl	8002410 <HW_IPCC_BLE_LLD_ReceiveM0CmdHandler>
 8002250:	e01f      	b.n	8002292 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8002252:	2101      	movs	r1, #1
 8002254:	4810      	ldr	r0, [pc, #64]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 8002256:	f7ff ffb2 	bl	80021be <LL_C2_IPCC_IsActiveFlag_CHx>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HW_IPCC_Rx_Handler+0x8a>
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800226c:	f000 f87a 	bl	8002364 <HW_IPCC_BLE_EvtHandler>
 8002270:	e00f      	b.n	8002292 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8002272:	2108      	movs	r1, #8
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 8002276:	f7ff ffa2 	bl	80021be <LL_C2_IPCC_IsActiveFlag_CHx>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HW_IPCC_Rx_Handler+0xac>
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HW_IPCC_Rx_Handler+0xb0>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	43db      	mvns	r3, r3
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800228e:	f000 f933 	bl	80024f8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8002292:	bf00      	nop
 8002294:	bf00      	nop
}
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58000c00 	.word	0x58000c00

0800229c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80022a0:	2102      	movs	r1, #2
 80022a2:	481a      	ldr	r0, [pc, #104]	; (800230c <HW_IPCC_Tx_Handler+0x70>)
 80022a4:	f7ff ff76 	bl	8002194 <LL_C1_IPCC_IsActiveFlag_CHx>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HW_IPCC_Tx_Handler+0x26>
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HW_IPCC_Tx_Handler+0x70>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80022bc:	f000 f882 	bl	80023c4 <HW_IPCC_SYS_CmdEvtHandler>
 80022c0:	e020      	b.n	8002304 <HW_IPCC_Tx_Handler+0x68>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */

  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80022c2:	2108      	movs	r1, #8
 80022c4:	4811      	ldr	r0, [pc, #68]	; (800230c <HW_IPCC_Tx_Handler+0x70>)
 80022c6:	f7ff ff65 	bl	8002194 <LL_C1_IPCC_IsActiveFlag_CHx>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <HW_IPCC_Tx_Handler+0x48>
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HW_IPCC_Tx_Handler+0x70>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80022de:	f000 f8ed 	bl	80024bc <HW_IPCC_MM_FreeBufHandler>
 80022e2:	e00f      	b.n	8002304 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80022e4:	2120      	movs	r1, #32
 80022e6:	4809      	ldr	r0, [pc, #36]	; (800230c <HW_IPCC_Tx_Handler+0x70>)
 80022e8:	f7ff ff54 	bl	8002194 <LL_C1_IPCC_IsActiveFlag_CHx>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HW_IPCC_Tx_Handler+0x6a>
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HW_IPCC_Tx_Handler+0x70>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002300:	f000 f83c 	bl	800237c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002304:	bf00      	nop
 8002306:	bf00      	nop
}
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	58000c00 	.word	0x58000c00

08002310 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002314:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002318:	f7ff fe9b 	bl	8002052 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800231c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002320:	f7ff fe58 	bl	8001fd4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8002324:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002328:	f7ff fe68 	bl	8001ffc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800232c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800232e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8002330:	f7ff fe40 	bl	8001fb4 <LL_PWR_EnableBootC2>

  return;
 8002334:	bf00      	nop
}
 8002336:	bd80      	pop	{r7, pc}

08002338 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800233c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002340:	f7ff fe6e 	bl	8002020 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8002344:	4806      	ldr	r0, [pc, #24]	; (8002360 <HW_IPCC_Init+0x28>)
 8002346:	f7ff feb0 	bl	80020aa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <HW_IPCC_Init+0x28>)
 800234c:	f7ff fe9d 	bl	800208a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002350:	202c      	movs	r0, #44	; 0x2c
 8002352:	f000 fbea 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002356:	202d      	movs	r0, #45	; 0x2d
 8002358:	f000 fbe7 	bl	8002b2a <HAL_NVIC_EnableIRQ>

  return;
 800235c:	bf00      	nop
}
 800235e:	bd80      	pop	{r7, pc}
 8002360:	58000c00 	.word	0x58000c00

08002364 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8002368:	f005 fec0 	bl	80080ec <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800236c:	2101      	movs	r1, #1
 800236e:	4802      	ldr	r0, [pc, #8]	; (8002378 <HW_IPCC_BLE_EvtHandler+0x14>)
 8002370:	f7ff fef3 	bl	800215a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002374:	bf00      	nop
}
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58000c00 	.word	0x58000c00

0800237c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8002380:	2120      	movs	r1, #32
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8002384:	f7ff feb4 	bl	80020f0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8002388:	f005 fee0 	bl	800814c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800238c:	bf00      	nop
}
 800238e:	bd80      	pop	{r7, pc}
 8002390:	58000c00 	.word	0x58000c00

08002394 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002398:	2102      	movs	r1, #2
 800239a:	4802      	ldr	r0, [pc, #8]	; (80023a4 <HW_IPCC_SYS_Init+0x10>)
 800239c:	f7ff feba 	bl	8002114 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80023a0:	bf00      	nop
}
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	58000c00 	.word	0x58000c00

080023a8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80023ac:	2102      	movs	r1, #2
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80023b0:	f7ff fee1 	bl	8002176 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80023b4:	2102      	movs	r1, #2
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80023b8:	f7ff fe87 	bl	80020ca <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80023bc:	bf00      	nop
}
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	58000c00 	.word	0x58000c00

080023c4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80023c8:	2102      	movs	r1, #2
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80023cc:	f7ff fe90 	bl	80020f0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80023d0:	f005 ff0c 	bl	80081ec <HW_IPCC_SYS_CmdEvtNot>

  return;
 80023d4:	bf00      	nop
}
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58000c00 	.word	0x58000c00

080023dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80023e0:	f005 ff1a 	bl	8008218 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80023e4:	2102      	movs	r1, #2
 80023e6:	4802      	ldr	r0, [pc, #8]	; (80023f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80023e8:	f7ff feb7 	bl	800215a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80023ec:	bf00      	nop
}
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	58000c00 	.word	0x58000c00

080023f4 <HW_IPCC_BLE_LLD_Init>:
/******************************************************************************
 * BLE LLD
 ******************************************************************************/
#ifdef BLE_LLD_WB
void HW_IPCC_BLE_LLD_Init( void )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_LLD_RSP_CHANNEL );
 80023f8:	2110      	movs	r1, #16
 80023fa:	4804      	ldr	r0, [pc, #16]	; (800240c <HW_IPCC_BLE_LLD_Init+0x18>)
 80023fc:	f7ff fe8a 	bl	8002114 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_LLD_M0_CMD_CHANNEL );
 8002400:	2104      	movs	r1, #4
 8002402:	4802      	ldr	r0, [pc, #8]	; (800240c <HW_IPCC_BLE_LLD_Init+0x18>)
 8002404:	f7ff fe86 	bl	8002114 <LL_C1_IPCC_EnableReceiveChannel>
  return;
 8002408:	bf00      	nop
}
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58000c00 	.word	0x58000c00

08002410 <HW_IPCC_BLE_LLD_ReceiveM0CmdHandler>:
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_LLD_CLI_RSP_CHANNEL );
  return;
}

static void HW_IPCC_BLE_LLD_ReceiveM0CmdHandler( void )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  //LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_BLE_LLD_M0_CMD_CHANNEL );
  HW_IPCC_BLE_LLD_ReceiveM0Cmd();
 8002414:	f005 ff3a 	bl	800828c <HW_IPCC_BLE_LLD_ReceiveM0Cmd>
  return;
 8002418:	bf00      	nop
}
 800241a:	bd80      	pop	{r7, pc}

0800241c <HW_IPCC_BLE_LLD_SendM0CmdAck>:


void HW_IPCC_BLE_LLD_SendM0CmdAck( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_LLD_M0_CMD_CHANNEL );
 8002420:	2104      	movs	r1, #4
 8002422:	4802      	ldr	r0, [pc, #8]	; (800242c <HW_IPCC_BLE_LLD_SendM0CmdAck+0x10>)
 8002424:	f7ff fe99 	bl	800215a <LL_C1_IPCC_ClearFlag_CHx>
  //LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_LLD_M0_CMD_CHANNEL );
  return;
 8002428:	bf00      	nop
}
 800242a:	bd80      	pop	{r7, pc}
 800242c:	58000c00 	.word	0x58000c00

08002430 <HW_IPCC_BLE_LLD_SendCmd>:
__weak void HW_IPCC_BLE_LLD_ReceiveCliRsp( void ){};
__weak void HW_IPCC_BLE_LLD_ReceiveM0Cmd( void ){};

/* Transparent Mode */
void HW_IPCC_BLE_LLD_SendCmd( void )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_LLD_CMD_CHANNEL );
 8002434:	2110      	movs	r1, #16
 8002436:	4802      	ldr	r0, [pc, #8]	; (8002440 <HW_IPCC_BLE_LLD_SendCmd+0x10>)
 8002438:	f7ff fe9d 	bl	8002176 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800243c:	bf00      	nop
}
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58000c00 	.word	0x58000c00

08002444 <HW_IPCC_BLE_LLD_ReceiveRspHandler>:

static void HW_IPCC_BLE_LLD_ReceiveRspHandler( void )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_BLE_LLD_RSP_CHANNEL );
 8002448:	2110      	movs	r1, #16
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <HW_IPCC_BLE_LLD_ReceiveRspHandler+0x14>)
 800244c:	f7ff fe74 	bl	8002138 <LL_C1_IPCC_DisableReceiveChannel>
  HW_IPCC_BLE_LLD_ReceiveRsp();
 8002450:	f005 ff3c 	bl	80082cc <HW_IPCC_BLE_LLD_ReceiveRsp>
  return;
 8002454:	bf00      	nop
}
 8002456:	bd80      	pop	{r7, pc}
 8002458:	58000c00 	.word	0x58000c00

0800245c <HW_IPCC_BLE_LLD_SendRspAck>:

void HW_IPCC_BLE_LLD_SendRspAck( void )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_LLD_RSP_CHANNEL );
 8002460:	2110      	movs	r1, #16
 8002462:	4804      	ldr	r0, [pc, #16]	; (8002474 <HW_IPCC_BLE_LLD_SendRspAck+0x18>)
 8002464:	f7ff fe79 	bl	800215a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_LLD_RSP_CHANNEL );
 8002468:	2110      	movs	r1, #16
 800246a:	4802      	ldr	r0, [pc, #8]	; (8002474 <HW_IPCC_BLE_LLD_SendRspAck+0x18>)
 800246c:	f7ff fe52 	bl	8002114 <LL_C1_IPCC_EnableReceiveChannel>
  return;
 8002470:	bf00      	nop
}
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58000c00 	.word	0x58000c00

08002478 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8002480:	2108      	movs	r1, #8
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002484:	f7ff fe86 	bl	8002194 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002494:	2108      	movs	r1, #8
 8002496:	4807      	ldr	r0, [pc, #28]	; (80024b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002498:	f7ff fe17 	bl	80020ca <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800249c:	e006      	b.n	80024ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80024a2:	2108      	movs	r1, #8
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80024a6:	f7ff fe66 	bl	8002176 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80024aa:	bf00      	nop
}
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	58000c00 	.word	0x58000c00
 80024b8:	20000214 	.word	0x20000214

080024bc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80024c0:	2108      	movs	r1, #8
 80024c2:	4806      	ldr	r0, [pc, #24]	; (80024dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80024c4:	f7ff fe14 	bl	80020f0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80024ce:	2108      	movs	r1, #8
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80024d2:	f7ff fe50 	bl	8002176 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80024d6:	bf00      	nop
}
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	58000c00 	.word	0x58000c00
 80024e0:	20000214 	.word	0x20000214

080024e4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80024e8:	2108      	movs	r1, #8
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <HW_IPCC_TRACES_Init+0x10>)
 80024ec:	f7ff fe12 	bl	8002114 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80024f0:	bf00      	nop
}
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	58000c00 	.word	0x58000c00

080024f8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80024fc:	f005 ff7e 	bl	80083fc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002500:	2108      	movs	r1, #8
 8002502:	4802      	ldr	r0, [pc, #8]	; (800250c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8002504:	f7ff fe29 	bl	800215a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002508:	bf00      	nop
}
 800250a:	bd80      	pop	{r7, pc}
 800250c:	58000c00 	.word	0x58000c00

08002510 <LL_AHB2_GRP1_EnableClock>:
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800251e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4313      	orrs	r3, r2
 8002526:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002534:	68fb      	ldr	r3, [r7, #12]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800255e:	2002      	movs	r0, #2
 8002560:	f7ff ffd6 	bl	8002510 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <BSP_LED_Init+0x6c>)
 8002568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800256c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256e:	2301      	movs	r3, #1
 8002570:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <BSP_LED_Init+0x70>)
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	f107 020c 	add.w	r2, r7, #12
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fe5b 	bl	8003244 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <BSP_LED_Init+0x70>)
 8002592:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <BSP_LED_Init+0x6c>)
 800259a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800259e:	2200      	movs	r2, #0
 80025a0:	4619      	mov	r1, r3
 80025a2:	f000 ffbf 	bl	8003524 <HAL_GPIO_WritePin>
}
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800a2dc 	.word	0x0800a2dc
 80025b4:	20000008 	.word	0x20000008

080025b8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <BSP_LED_On+0x2c>)
 80025c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <BSP_LED_On+0x30>)
 80025ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4619      	mov	r1, r3
 80025d6:	f000 ffa5 	bl	8003524 <HAL_GPIO_WritePin>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000008 	.word	0x20000008
 80025e8:	0800a2dc 	.word	0x0800a2dc

080025ec <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <BSP_LED_Toggle+0x2c>)
 80025fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4906      	ldr	r1, [pc, #24]	; (800261c <BSP_LED_Toggle+0x30>)
 8002602:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f000 ffa3 	bl	8003554 <HAL_GPIO_TogglePin>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008
 800261c:	0800a2dc 	.word	0x0800a2dc

08002620 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	460a      	mov	r2, r1
 800262a:	71fb      	strb	r3, [r7, #7]
 800262c:	4613      	mov	r3, r2
 800262e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <BSP_PB_Init+0x2e>
 8002646:	2004      	movs	r0, #4
 8002648:	f7ff ff62 	bl	8002510 <LL_AHB2_GRP1_EnableClock>
 800264c:	e00c      	b.n	8002668 <BSP_PB_Init+0x48>
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d103      	bne.n	800265c <BSP_PB_Init+0x3c>
 8002654:	2008      	movs	r0, #8
 8002656:	f7ff ff5b 	bl	8002510 <LL_AHB2_GRP1_EnableClock>
 800265a:	e005      	b.n	8002668 <BSP_PB_Init+0x48>
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d102      	bne.n	8002668 <BSP_PB_Init+0x48>
 8002662:	2008      	movs	r0, #8
 8002664:	f7ff ff54 	bl	8002510 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002668:	79bb      	ldrb	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d117      	bne.n	800269e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <BSP_PB_Init+0xd4>)
 8002672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002676:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800267c:	2301      	movs	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <BSP_PB_Init+0xd8>)
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	f107 020c 	add.w	r2, r7, #12
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fdd6 	bl	8003244 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8002698:	2001      	movs	r0, #1
 800269a:	f7fe fe10 	bl	80012be <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d123      	bne.n	80026ec <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <BSP_PB_Init+0xd4>)
 80026a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026ac:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80026ae:	2301      	movs	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80026b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026b6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <BSP_PB_Init+0xd8>)
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	f107 020c 	add.w	r2, r7, #12
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fdbc 	bl	8003244 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <BSP_PB_Init+0xdc>)
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	2200      	movs	r2, #0
 80026d6:	210f      	movs	r1, #15
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fa0c 	bl	8002af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <BSP_PB_Init+0xdc>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fa1f 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  }
}
 80026ec:	bf00      	nop
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	0800a2e4 	.word	0x0800a2e4
 80026f8:	20000014 	.word	0x20000014
 80026fc:	0800a2ec 	.word	0x0800a2ec

08002700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <SystemInit+0xa0>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <SystemInit+0xa0>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <SystemInit+0xa0>)
 8002712:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002716:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002732:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <SystemInit+0xa4>)
 8002740:	4013      	ands	r3, r2
 8002742:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002750:	f023 0305 	bic.w	r3, r3, #5
 8002754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800276c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <SystemInit+0xa8>)
 8002772:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <SystemInit+0xa8>)
 800277a:	611a      	str	r2, [r3, #16]
#endif

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	faf6fefb 	.word	0xfaf6fefb
 80027a8:	22041000 	.word	0x22041000

080027ac <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <LL_DBGMCU_GetDeviceID+0x18>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e0042000 	.word	0xe0042000

080027c8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <LL_DBGMCU_GetRevisionID+0x18>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	b29b      	uxth	r3, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e0042000 	.word	0xe0042000

080027e4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6053      	str	r3, [r2, #4]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e0042000 	.word	0xe0042000

08002804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280e:	2003      	movs	r0, #3
 8002810:	f000 f966 	bl	8002ae0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002814:	200f      	movs	r0, #15
 8002816:	f000 f80d 	bl	8002834 <HAL_InitTick>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	e001      	b.n	800282a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002826:	f7fe fd8f 	bl	8001348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800282a:	79fb      	ldrb	r3, [r7, #7]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_InitTick+0x6c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d024      	beq.n	8002892 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002848:	f001 ff82 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_InitTick+0x6c>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002858:	fbb3 f3f1 	udiv	r3, r3, r1
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f970 	bl	8002b46 <HAL_SYSTICK_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	d809      	bhi.n	8002886 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002872:	2200      	movs	r2, #0
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	f04f 30ff 	mov.w	r0, #4294967295
 800287a:	f000 f93c 	bl	8002af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_InitTick+0x70>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e007      	b.n	8002896 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e004      	b.n	8002896 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e001      	b.n	8002896 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000028 	.word	0x20000028
 80028a4:	20000024 	.word	0x20000024

080028a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x20>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_IncTick+0x24>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <HAL_IncTick+0x24>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000028 	.word	0x20000028
 80028cc:	20001678 	.word	0x20001678

080028d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20001678 	.word	0x20001678

080028e8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_GetTickPrio+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000024 	.word	0x20000024

08002900 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_GetTickFreq+0x14>)
 8002906:	781b      	ldrb	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000028 	.word	0x20000028

08002918 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
   return(LL_DBGMCU_GetRevisionID());
 800291c:	f7ff ff54 	bl	80027c8 <LL_DBGMCU_GetRevisionID>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0
   return(LL_DBGMCU_GetDeviceID());
 800292a:	f7ff ff3f 	bl	80027ac <LL_DBGMCU_GetDeviceID>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002938:	f7ff ff54 	bl	80027e4 <LL_DBGMCU_EnableDBGSleepMode>
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800296c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002972:	4a04      	ldr	r2, [pc, #16]	; (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	60d3      	str	r3, [r2, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <__NVIC_GetPriorityGrouping+0x18>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	f003 0307 	and.w	r3, r3, #7
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	db0b      	blt.n	80029ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	4907      	ldr	r1, [pc, #28]	; (80029dc <__NVIC_EnableIRQ+0x38>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2001      	movs	r0, #1
 80029c6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000e100 	.word	0xe000e100

080029e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	; (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
         );
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aac:	d301      	bcc.n	8002ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00f      	b.n	8002ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <SysTick_Config+0x40>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aba:	210f      	movs	r1, #15
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f7ff ff8e 	bl	80029e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <SysTick_Config+0x40>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <SysTick_Config+0x40>)
 8002acc:	2207      	movs	r2, #7
 8002ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000e010 	.word	0xe000e010

08002ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff29 	bl	8002940 <__NVIC_SetPriorityGrouping>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff40 	bl	8002988 <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff90 	bl	8002a34 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5f 	bl	80029e0 <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff33 	bl	80029a4 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa4 	bl	8002a9c <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e08e      	b.n	8002c90 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_DMA_Init+0x138>)
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d80f      	bhi.n	8002b9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <HAL_DMA_Init+0x13c>)
 8002b86:	4413      	add	r3, r2
 8002b88:	4a45      	ldr	r2, [pc, #276]	; (8002ca0 <HAL_DMA_Init+0x140>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_DMA_Init+0x144>)
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9c:	e00e      	b.n	8002bbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <HAL_DMA_Init+0x148>)
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a3d      	ldr	r2, [pc, #244]	; (8002ca0 <HAL_DMA_Init+0x140>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	009a      	lsls	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a3c      	ldr	r2, [pc, #240]	; (8002cac <HAL_DMA_Init+0x14c>)
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa74 	bl	80030fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c1c:	d102      	bne.n	8002c24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <HAL_DMA_Init+0x106>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d80c      	bhi.n	8002c66 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa93 	bl	8003178 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	e008      	b.n	8002c78 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40020407 	.word	0x40020407
 8002c9c:	bffdfff8 	.word	0xbffdfff8
 8002ca0:	cccccccd 	.word	0xcccccccd
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	bffdfbf8 	.word	0xbffdfbf8
 8002cac:	40020400 	.word	0x40020400

08002cb0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_DMA_Start_IT+0x20>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e066      	b.n	8002d9e <HAL_DMA_Start_IT+0xee>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d155      	bne.n	8002d90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f9b9 	bl	8003080 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 020e 	orr.w	r2, r2, #14
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e00f      	b.n	8002d48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 020a 	orr.w	r2, r2, #10
 8002d46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e005      	b.n	8002d9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e04f      	b.n	8002e58 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d008      	beq.n	8002dd6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e040      	b.n	8002e58 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 020e 	bic.w	r2, r2, #14
 8002de4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f003 021c 	and.w	r2, r3, #28
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f202 	lsl.w	r2, r1, r2
 8002e18:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00c      	beq.n	8002e46 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d005      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	e047      	b.n	8002f18 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 020e 	bic.w	r2, r2, #14
 8002e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	f003 021c 	and.w	r2, r3, #28
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ed4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00c      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ef6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
    }
  }
  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f003 031c 	and.w	r3, r3, #28
 8002f42:	2204      	movs	r2, #4
 8002f44:	409a      	lsls	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d026      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x7a>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d021      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0204 	bic.w	r2, r2, #4
 8002f74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 021c 	and.w	r2, r3, #28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2104      	movs	r1, #4
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d071      	beq.n	8003076 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f9a:	e06c      	b.n	8003076 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f003 031c 	and.w	r3, r3, #28
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d02e      	beq.n	800300e <HAL_DMA_IRQHandler+0xec>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d029      	beq.n	800300e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 020a 	bic.w	r2, r2, #10
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	f003 021c 	and.w	r2, r3, #28
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2102      	movs	r1, #2
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d038      	beq.n	8003076 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800300c:	e033      	b.n	8003076 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f003 031c 	and.w	r3, r3, #28
 8003016:	2208      	movs	r2, #8
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02a      	beq.n	8003078 <HAL_DMA_IRQHandler+0x156>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d025      	beq.n	8003078 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 020e 	bic.w	r2, r2, #14
 800303a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f003 021c 	and.w	r2, r3, #28
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f202 	lsl.w	r2, r1, r2
 800304e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003076:	bf00      	nop
 8003078:	bf00      	nop
}
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003096:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 021c 	and.w	r2, r3, #28
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d108      	bne.n	80030e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030de:	e007      	b.n	80030f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800310c:	429a      	cmp	r2, r3
 800310e:	d80a      	bhi.n	8003126 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800311c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6493      	str	r3, [r2, #72]	; 0x48
 8003124:	e007      	b.n	8003136 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	009a      	lsls	r2, r3, #2
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003130:	4413      	add	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	3b08      	subs	r3, #8
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800314c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2201      	movs	r2, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40020407 	.word	0x40020407
 800316c:	4002081c 	.word	0x4002081c
 8003170:	cccccccd 	.word	0xcccccccd
 8003174:	40020880 	.word	0x40020880

08003178 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003188:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800319c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2201      	movs	r2, #1
 80031a8:	409a      	lsls	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	1000823f 	.word	0x1000823f
 80031c0:	40020940 	.word	0x40020940

080031c4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d12b      	bne.n	8003232 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_DMAEx_ConfigMuxSync+0x24>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e025      	b.n	8003234 <HAL_DMAEx_ConfigMuxSync+0x70>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	6811      	ldr	r1, [r2, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	3a01      	subs	r2, #1
 8003204:	04d2      	lsls	r2, r2, #19
 8003206:	4311      	orrs	r1, r2
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	6852      	ldr	r2, [r2, #4]
 800320c:	4311      	orrs	r1, r2
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	7a12      	ldrb	r2, [r2, #8]
 8003212:	0412      	lsls	r2, r2, #16
 8003214:	4311      	orrs	r1, r2
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	7a52      	ldrb	r2, [r2, #9]
 800321a:	0252      	lsls	r2, r2, #9
 800321c:	4311      	orrs	r1, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003222:	430b      	orrs	r3, r1
 8003224:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000fdff 	.word	0xe000fdff

08003244 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003252:	e14c      	b.n	80034ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	4013      	ands	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 813e 	beq.w	80034e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d005      	beq.n	8003284 <HAL_GPIO_Init+0x40>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d130      	bne.n	80032e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	2203      	movs	r2, #3
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ba:	2201      	movs	r2, #1
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 0201 	and.w	r2, r3, #1
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d017      	beq.n	8003322 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d123      	bne.n	8003376 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	08da      	lsrs	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3208      	adds	r2, #8
 8003370:	6939      	ldr	r1, [r7, #16]
 8003372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8098 	beq.w	80034e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80033b8:	4a54      	ldr	r2, [pc, #336]	; (800350c <HAL_GPIO_Init+0x2c8>)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033e2:	d019      	beq.n	8003418 <HAL_GPIO_Init+0x1d4>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a4a      	ldr	r2, [pc, #296]	; (8003510 <HAL_GPIO_Init+0x2cc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <HAL_GPIO_Init+0x1d0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a49      	ldr	r2, [pc, #292]	; (8003514 <HAL_GPIO_Init+0x2d0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00d      	beq.n	8003410 <HAL_GPIO_Init+0x1cc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a48      	ldr	r2, [pc, #288]	; (8003518 <HAL_GPIO_Init+0x2d4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <HAL_GPIO_Init+0x1c8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a47      	ldr	r2, [pc, #284]	; (800351c <HAL_GPIO_Init+0x2d8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <HAL_GPIO_Init+0x1c4>
 8003404:	2304      	movs	r3, #4
 8003406:	e008      	b.n	800341a <HAL_GPIO_Init+0x1d6>
 8003408:	2307      	movs	r3, #7
 800340a:	e006      	b.n	800341a <HAL_GPIO_Init+0x1d6>
 800340c:	2303      	movs	r3, #3
 800340e:	e004      	b.n	800341a <HAL_GPIO_Init+0x1d6>
 8003410:	2302      	movs	r3, #2
 8003412:	e002      	b.n	800341a <HAL_GPIO_Init+0x1d6>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_GPIO_Init+0x1d6>
 8003418:	2300      	movs	r3, #0
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	f002 0203 	and.w	r2, r2, #3
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	4093      	lsls	r3, r2
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800342a:	4938      	ldr	r1, [pc, #224]	; (800350c <HAL_GPIO_Init+0x2c8>)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	3302      	adds	r3, #2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003486:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 800348e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034b2:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80034ba:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 80034bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034e0:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3301      	adds	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f47f aeab 	bne.w	8003254 <HAL_GPIO_Init+0x10>
  }
}
 80034fe:	bf00      	nop
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40010000 	.word	0x40010000
 8003510:	48000400 	.word	0x48000400
 8003514:	48000800 	.word	0x48000800
 8003518:	48000c00 	.word	0x48000c00
 800351c:	48001000 	.word	0x48001000
 8003520:	58000800 	.word	0x58000800

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003540:	e002      	b.n	8003548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43d9      	mvns	r1, r3
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	400b      	ands	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe fc0a 	bl	8001dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	58000800 	.word	0x58000800

080035b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	58000400 	.word	0x58000400

080035d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	58000400 	.word	0x58000400

080035f4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80035f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003606:	d101      	bne.n	800360c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_RCC_HSE_Enable>:
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800361c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362a:	6013      	str	r3, [r2, #0]
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_RCC_HSE_Disable>:
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_RCC_HSE_IsReady>:
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003666:	d101      	bne.n	800366c <LL_RCC_HSE_IsReady+0x18>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <LL_RCC_HSE_IsReady+0x1a>
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_RCC_HSI_Enable>:
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_RCC_HSI_Disable>:
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LL_RCC_HSI_IsReady>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d101      	bne.n	80036cc <LL_RCC_HSI_IsReady+0x18>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <LL_RCC_HSI_IsReady+0x1a>
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_RCC_HSI48_Enable>:
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800370e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_RCC_HSI48_Disable>:
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <LL_RCC_HSI48_IsReady>:
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d101      	bne.n	800375e <LL_RCC_HSI48_IsReady+0x18>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <LL_RCC_HSI48_IsReady+0x1a>
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_RCC_LSE_Enable>:
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_RCC_LSE_Disable>:
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_LSE_EnableBypass>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_RCC_LSE_DisableBypass>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_RCC_LSE_IsReady>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d101      	bne.n	800380a <LL_RCC_LSE_IsReady+0x18>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <LL_RCC_LSE_IsReady+0x1a>
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_RCC_LSI1_Enable>:
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_RCC_LSI1_Disable>:
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800383c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_RCC_LSI1_IsReady>:
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d101      	bne.n	8003872 <LL_RCC_LSI1_IsReady+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_RCC_LSI1_IsReady+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_RCC_LSI2_Enable>:
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_LSI2_Disable>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_LSI2_IsReady>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d101      	bne.n	80038da <LL_RCC_LSI2_IsReady+0x18>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <LL_RCC_LSI2_IsReady+0x1a>
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_RCC_LSI2_SetTrimming>:
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80038ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_RCC_MSI_Enable>:
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_RCC_MSI_Disable>:
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6013      	str	r3, [r2, #0]
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_RCC_MSI_IsReady>:
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d101      	bne.n	8003966 <LL_RCC_MSI_IsReady+0x16>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_RCC_MSI_IsReady+0x18>
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_RCC_MSI_SetRange>:
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800397a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_RCC_MSI_GetRange>:
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2bb0      	cmp	r3, #176	; 0xb0
 80039b0:	d901      	bls.n	80039b6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80039b2:	23b0      	movs	r3, #176	; 0xb0
 80039b4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80039b6:	687b      	ldr	r3, [r7, #4]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_SetSysClkSource>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 0203 	bic.w	r2, r3, #3
 8003a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_GetSysClkSource>:
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_RCC_SetAHBPrescaler>:
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_SetAHB4Prescaler>:
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a92:	f023 020f 	bic.w	r2, r3, #15
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_SetAPB1Prescaler>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_SetAPB2Prescaler>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_RCC_GetAHBPrescaler>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_RCC_GetAHB4Prescaler>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_RCC_GetAPB1Prescaler>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_RCC_GetAPB2Prescaler>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_RCC_PLL_Enable>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_PLL_Disable>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b94:	6013      	str	r3, [r2, #0]
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_PLL_IsReady>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bb2:	d101      	bne.n	8003bb8 <LL_RCC_PLL_IsReady+0x18>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <LL_RCC_PLL_IsReady+0x1a>
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_RCC_PLL_GetN>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_RCC_PLL_GetR>:
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <LL_RCC_PLL_GetDivider>:
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_RCC_PLL_GetMainSource>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0303 	and.w	r3, r3, #3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d101      	bne.n	8003c3e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c5e:	d101      	bne.n	8003c64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d101      	bne.n	8003c8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca8:	d101      	bne.n	8003cae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ccc:	d101      	bne.n	8003cd2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b08d      	sub	sp, #52	; 0x34
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e37e      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8092 	beq.w	8003e24 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d00:	f7ff fe89 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8003d04:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d06:	f7ff ff82 	bl	8003c0e <LL_RCC_PLL_GetMainSource>
 8003d0a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x3e>
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	d14c      	bne.n	8003db2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d149      	bne.n	8003db2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d1e:	f7ff fe17 	bl	8003950 <LL_RCC_MSI_IsReady>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_OscConfig+0x54>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e35d      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d38:	f7ff fe2f 	bl	800399a <LL_RCC_MSI_GetRange>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	429c      	cmp	r4, r3
 8003d40:	d914      	bls.n	8003d6c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd42 	bl	80047d0 <RCC_SetFlashLatencyFromMSIRange>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e34c      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fe09 	bl	8003972 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fe2d 	bl	80039c4 <LL_RCC_MSI_SetCalibTrimming>
 8003d6a:	e013      	b.n	8003d94 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fdfe 	bl	8003972 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fe22 	bl	80039c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fd23 	bl	80047d0 <RCC_SetFlashLatencyFromMSIRange>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e32d      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d94:	f000 fcdc 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4ab3      	ldr	r2, [pc, #716]	; (8004068 <HAL_RCC_OscConfig+0x388>)
 8003d9c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d9e:	4bb3      	ldr	r3, [pc, #716]	; (800406c <HAL_RCC_OscConfig+0x38c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fd46 	bl	8002834 <HAL_InitTick>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d039      	beq.n	8003e22 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e31e      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01e      	beq.n	8003df8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dba:	f7ff fdab 	bl	8003914 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dbe:	f7fe fd87 	bl	80028d0 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dc6:	f7fe fd83 	bl	80028d0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e30b      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003dd8:	f7ff fdba 	bl	8003950 <LL_RCC_MSI_IsReady>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f1      	beq.n	8003dc6 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fdc3 	bl	8003972 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fde7 	bl	80039c4 <LL_RCC_MSI_SetCalibTrimming>
 8003df6:	e015      	b.n	8003e24 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003df8:	f7ff fd9b 	bl	8003932 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fd68 	bl	80028d0 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e04:	f7fe fd64 	bl	80028d0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e2ec      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e16:	f7ff fd9b 	bl	8003950 <LL_RCC_MSI_IsReady>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f1      	bne.n	8003e04 <HAL_RCC_OscConfig+0x124>
 8003e20:	e000      	b.n	8003e24 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e22:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d04e      	beq.n	8003ece <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e30:	f7ff fdf1 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8003e34:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e36:	f7ff feea 	bl	8003c0e <LL_RCC_PLL_GetMainSource>
 8003e3a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x16e>
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d10d      	bne.n	8003e64 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d10a      	bne.n	8003e64 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4e:	f7ff fc01 	bl	8003654 <LL_RCC_HSE_IsReady>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d039      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d135      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e2c5      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d102      	bne.n	8003e74 <HAL_RCC_OscConfig+0x194>
 8003e6e:	f7ff fbd3 	bl	8003618 <LL_RCC_HSE_Enable>
 8003e72:	e001      	b.n	8003e78 <HAL_RCC_OscConfig+0x198>
 8003e74:	f7ff fbdf 	bl	8003636 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fd26 	bl	80028d0 <HAL_GetTick>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe fd22 	bl	80028d0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e2aa      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e9a:	f7ff fbdb 	bl	8003654 <LL_RCC_HSE_IsReady>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f1      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1a8>
 8003ea4:	e013      	b.n	8003ece <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fe fd13 	bl	80028d0 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eae:	f7fe fd0f 	bl	80028d0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e297      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ec0:	f7ff fbc8 	bl	8003654 <LL_RCC_HSE_IsReady>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f1      	bne.n	8003eae <HAL_RCC_OscConfig+0x1ce>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d051      	beq.n	8003f7e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eda:	f7ff fd9c 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8003ede:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee0:	f7ff fe95 	bl	8003c0e <LL_RCC_PLL_GetMainSource>
 8003ee4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x218>
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d113      	bne.n	8003f1a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d110      	bne.n	8003f1a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef8:	f7ff fbdc 	bl	80036b4 <LL_RCC_HSI_IsReady>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_RCC_OscConfig+0x22e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e270      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fbe0 	bl	80036d8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f18:	e031      	b.n	8003f7e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f22:	f7ff fba9 	bl	8003678 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fe fcd3 	bl	80028d0 <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fccf 	bl	80028d0 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e257      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f40:	f7ff fbb8 	bl	80036b4 <LL_RCC_HSI_IsReady>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f1      	beq.n	8003f2e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fbc2 	bl	80036d8 <LL_RCC_HSI_SetCalibTrimming>
 8003f54:	e013      	b.n	8003f7e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f56:	f7ff fb9e 	bl	8003696 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fcb9 	bl	80028d0 <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fe fcb5 	bl	80028d0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e23d      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f74:	f7ff fb9e 	bl	80036b4 <LL_RCC_HSI_IsReady>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f1      	bne.n	8003f62 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80a3 	beq.w	80040de <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d076      	beq.n	800408e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d046      	beq.n	800403a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003fac:	f7ff fc55 	bl	800385a <LL_RCC_LSI1_IsReady>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003fb6:	f7ff fc2e 	bl	8003816 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fba:	f7fe fc89 	bl	80028d0 <HAL_GetTick>
 8003fbe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fc2:	f7fe fc85 	bl	80028d0 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e20d      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fd4:	f7ff fc41 	bl	800385a <LL_RCC_LSI1_IsReady>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f1      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003fde:	f7ff fc4e 	bl	800387e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fe fc75 	bl	80028d0 <HAL_GetTick>
 8003fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fea:	f7fe fc71 	bl	80028d0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e1f9      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003ffc:	f7ff fc61 	bl	80038c2 <LL_RCC_LSI2_IsReady>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f1      	beq.n	8003fea <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fc6b 	bl	80038e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004010:	f7ff fc12 	bl	8003838 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe fc5c 	bl	80028d0 <HAL_GetTick>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800401c:	f7fe fc58 	bl	80028d0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1e0      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800402e:	f7ff fc14 	bl	800385a <LL_RCC_LSI1_IsReady>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f1      	bne.n	800401c <HAL_RCC_OscConfig+0x33c>
 8004038:	e051      	b.n	80040de <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800403a:	f7ff fbec 	bl	8003816 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fe fc47 	bl	80028d0 <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004046:	f7fe fc43 	bl	80028d0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1cb      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004058:	f7ff fbff 	bl	800385a <LL_RCC_LSI1_IsReady>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f1      	beq.n	8004046 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004062:	f7ff fc1d 	bl	80038a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004066:	e00c      	b.n	8004082 <HAL_RCC_OscConfig+0x3a2>
 8004068:	20000020 	.word	0x20000020
 800406c:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004070:	f7fe fc2e 	bl	80028d0 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b03      	cmp	r3, #3
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e1b6      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004082:	f7ff fc1e 	bl	80038c2 <LL_RCC_LSI2_IsReady>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f1      	bne.n	8004070 <HAL_RCC_OscConfig+0x390>
 800408c:	e027      	b.n	80040de <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800408e:	f7ff fc07 	bl	80038a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004092:	f7fe fc1d 	bl	80028d0 <HAL_GetTick>
 8004096:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800409a:	f7fe fc19 	bl	80028d0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e1a1      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040ac:	f7ff fc09 	bl	80038c2 <LL_RCC_LSI2_IsReady>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f1      	bne.n	800409a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80040b6:	f7ff fbbf 	bl	8003838 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fe fc09 	bl	80028d0 <HAL_GetTick>
 80040be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040c2:	f7fe fc05 	bl	80028d0 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e18d      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040d4:	f7ff fbc1 	bl	800385a <LL_RCC_LSI1_IsReady>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f1      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d05b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ea:	4bb5      	ldr	r3, [pc, #724]	; (80043c0 <HAL_RCC_OscConfig+0x6e0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d114      	bne.n	8004120 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040f6:	f7ff fa5f 	bl	80035b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fe fbe9 	bl	80028d0 <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fe fbe5 	bl	80028d0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e16d      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4baa      	ldr	r3, [pc, #680]	; (80043c0 <HAL_RCC_OscConfig+0x6e0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d102      	bne.n	800412e <HAL_RCC_OscConfig+0x44e>
 8004128:	f7ff fb1f 	bl	800376a <LL_RCC_LSE_Enable>
 800412c:	e00c      	b.n	8004148 <HAL_RCC_OscConfig+0x468>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d104      	bne.n	8004140 <HAL_RCC_OscConfig+0x460>
 8004136:	f7ff fb3a 	bl	80037ae <LL_RCC_LSE_EnableBypass>
 800413a:	f7ff fb16 	bl	800376a <LL_RCC_LSE_Enable>
 800413e:	e003      	b.n	8004148 <HAL_RCC_OscConfig+0x468>
 8004140:	f7ff fb24 	bl	800378c <LL_RCC_LSE_Disable>
 8004144:	f7ff fb44 	bl	80037d0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d014      	beq.n	800417a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fe fbbe 	bl	80028d0 <HAL_GetTick>
 8004154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004156:	e00a      	b.n	800416e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004158:	f7fe fbba 	bl	80028d0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e140      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800416e:	f7ff fb40 	bl	80037f2 <LL_RCC_LSE_IsReady>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ef      	beq.n	8004158 <HAL_RCC_OscConfig+0x478>
 8004178:	e013      	b.n	80041a2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fe fba9 	bl	80028d0 <HAL_GetTick>
 800417e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fe fba5 	bl	80028d0 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e12b      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004198:	f7ff fb2b 	bl	80037f2 <LL_RCC_LSE_IsReady>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ef      	bne.n	8004182 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d02c      	beq.n	8004208 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d014      	beq.n	80041e0 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041b6:	f7ff faa4 	bl	8003702 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fe fb89 	bl	80028d0 <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c2:	f7fe fb85 	bl	80028d0 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e10d      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041d4:	f7ff fab7 	bl	8003746 <LL_RCC_HSI48_IsReady>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f1      	beq.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
 80041de:	e013      	b.n	8004208 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041e0:	f7ff faa0 	bl	8003724 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fe fb74 	bl	80028d0 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ec:	f7fe fb70 	bl	80028d0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0f8      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041fe:	f7ff faa2 	bl	8003746 <LL_RCC_HSI48_IsReady>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f1      	bne.n	80041ec <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80ee 	beq.w	80043ee <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004212:	f7ff fc00 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8004216:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	2b02      	cmp	r3, #2
 8004226:	f040 80af 	bne.w	8004388 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	429a      	cmp	r2, r3
 8004236:	d123      	bne.n	8004280 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d114      	bne.n	8004280 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d10d      	bne.n	8004280 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d106      	bne.n	8004280 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d05d      	beq.n	800433c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d058      	beq.n	8004338 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0ab      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004298:	f7ff fc73 	bl	8003b82 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800429c:	f7fe fb18 	bl	80028d0 <HAL_GetTick>
 80042a0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fe fb14 	bl	80028d0 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e09c      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ef      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCC_OscConfig+0x6e4>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042dc:	0212      	lsls	r2, r2, #8
 80042de:	4311      	orrs	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042e4:	4311      	orrs	r1, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042f0:	430a      	orrs	r2, r1
 80042f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042fa:	f7ff fc33 	bl	8003b64 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800430e:	f7fe fadf 	bl	80028d0 <HAL_GetTick>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fe fadb 	bl	80028d0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e063      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ef      	beq.n	8004316 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004336:	e05a      	b.n	80043ee <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e059      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d151      	bne.n	80043ee <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800434a:	f7ff fc0b 	bl	8003b64 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800435e:	f7fe fab7 	bl	80028d0 <HAL_GetTick>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004366:	f7fe fab3 	bl	80028d0 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e03b      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ef      	beq.n	8004366 <HAL_RCC_OscConfig+0x686>
 8004386:	e032      	b.n	80043ee <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d02d      	beq.n	80043ea <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438e:	f7ff fbf8 	bl	8003b82 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ac:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b6:	f7fe fa8b 	bl	80028d0 <HAL_GetTick>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043bc:	e00d      	b.n	80043da <HAL_RCC_OscConfig+0x6fa>
 80043be:	bf00      	nop
 80043c0:	58000400 	.word	0x58000400
 80043c4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fe fa82 	bl	80028d0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ef      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6e8>
 80043e8:	e001      	b.n	80043ee <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3734      	adds	r7, #52	; 0x34
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd90      	pop	{r4, r7, pc}

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e12d      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b98      	ldr	r3, [pc, #608]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d91b      	bls.n	8004452 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b95      	ldr	r3, [pc, #596]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 0207 	bic.w	r2, r3, #7
 8004422:	4993      	ldr	r1, [pc, #588]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442a:	f7fe fa51 	bl	80028d0 <HAL_GetTick>
 800442e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004430:	e008      	b.n	8004444 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004432:	f7fe fa4d 	bl	80028d0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e111      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004444:	4b8a      	ldr	r3, [pc, #552]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d1ef      	bne.n	8004432 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d016      	beq.n	800448c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fae3 	bl	8003a2e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004468:	f7fe fa32 	bl	80028d0 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004470:	f7fe fa2e 	bl	80028d0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e0f2      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004482:	f7ff fbd0 	bl	8003c26 <LL_RCC_IsActiveFlag_HPRE>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f1      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d016      	beq.n	80044c6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fada 	bl	8003a56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044a2:	f7fe fa15 	bl	80028d0 <HAL_GetTick>
 80044a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044aa:	f7fe fa11 	bl	80028d0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e0d5      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044bc:	f7ff fbc5 	bl	8003c4a <LL_RCC_IsActiveFlag_C2HPRE>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f1      	beq.n	80044aa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fad3 	bl	8003a82 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044dc:	f7fe f9f8 	bl	80028d0 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044e4:	f7fe f9f4 	bl	80028d0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0b8      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044f6:	f7ff fbbb 	bl	8003c70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f1      	beq.n	80044e4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff facd 	bl	8003ab0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004516:	f7fe f9db 	bl	80028d0 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800451e:	f7fe f9d7 	bl	80028d0 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e09b      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004530:	f7ff fbb1 	bl	8003c96 <LL_RCC_IsActiveFlag_PPRE1>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f1      	beq.n	800451e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fac3 	bl	8003ad8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004552:	f7fe f9bd 	bl	80028d0 <HAL_GetTick>
 8004556:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800455a:	f7fe f9b9 	bl	80028d0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e07d      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800456c:	f7ff fba5 	bl	8003cba <LL_RCC_IsActiveFlag_PPRE2>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f1      	beq.n	800455a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d043      	beq.n	800460a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d106      	bne.n	8004598 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800458a:	f7ff f863 	bl	8003654 <LL_RCC_HSE_IsReady>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11e      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e067      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d106      	bne.n	80045ae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80045a0:	f7ff fafe 	bl	8003ba0 <LL_RCC_PLL_IsReady>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d113      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e05c      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80045b6:	f7ff f9cb 	bl	8003950 <LL_RCC_MSI_IsReady>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e051      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80045c4:	f7ff f876 	bl	80036b4 <LL_RCC_HSI_IsReady>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e04a      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fa09 	bl	80039ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045dc:	f7fe f978 	bl	80028d0 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e4:	f7fe f974 	bl	80028d0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e036      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	f7ff fa0c 	bl	8003a16 <LL_RCC_GetSysClkSource>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	429a      	cmp	r2, r3
 8004608:	d1ec      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d21b      	bcs.n	8004650 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004618:	4b15      	ldr	r3, [pc, #84]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 0207 	bic.w	r2, r3, #7
 8004620:	4913      	ldr	r1, [pc, #76]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fe f952 	bl	80028d0 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	e008      	b.n	8004642 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004630:	f7fe f94e 	bl	80028d0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e012      	b.n	8004668 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_ClockConfig+0x278>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d1ef      	bne.n	8004630 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004650:	f000 f87e 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004654:	4603      	mov	r3, r0
 8004656:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_RCC_ClockConfig+0x27c>)
 8004658:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800465a:	f7fe f945 	bl	80028e8 <HAL_GetTickPrio>
 800465e:	4603      	mov	r3, r0
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe f8e7 	bl	8002834 <HAL_InitTick>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	58004000 	.word	0x58004000
 8004674:	20000020 	.word	0x20000020

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467e:	f7ff f9ca 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8004682:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800468a:	f7ff f986 	bl	800399a <LL_RCC_MSI_GetRange>
 800468e:	4603      	mov	r3, r0
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e04b      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d102      	bne.n	80046ac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046a6:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e045      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d10a      	bne.n	80046c8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046b2:	f7fe ff9f 	bl	80035f4 <LL_RCC_HSE_IsEnabledDiv2>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d102      	bne.n	80046c2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80046bc:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e03a      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_RCC_GetSysClockFreq+0xd4>)
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e037      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80046c8:	f7ff faa1 	bl	8003c0e <LL_RCC_PLL_GetMainSource>
 80046cc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d003      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x64>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x6a>
 80046da:	e00d      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046de:	60bb      	str	r3, [r7, #8]
        break;
 80046e0:	e015      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046e2:	f7fe ff87 	bl	80035f4 <LL_RCC_HSE_IsEnabledDiv2>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d102      	bne.n	80046f2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046ee:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80046f0:	e00d      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_RCC_GetSysClockFreq+0xd4>)
 80046f4:	60bb      	str	r3, [r7, #8]
        break;
 80046f6:	e00a      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046f8:	f7ff f94f 	bl	800399a <LL_RCC_MSI_GetRange>
 80046fc:	4603      	mov	r3, r0
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	60bb      	str	r3, [r7, #8]
        break;
 800470c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800470e:	f7ff fa59 	bl	8003bc4 <LL_RCC_PLL_GetN>
 8004712:	4602      	mov	r2, r0
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	fb03 f402 	mul.w	r4, r3, r2
 800471a:	f7ff fa6c 	bl	8003bf6 <LL_RCC_PLL_GetDivider>
 800471e:	4603      	mov	r3, r0
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	3301      	adds	r3, #1
 8004724:	fbb4 f4f3 	udiv	r4, r4, r3
 8004728:	f7ff fa59 	bl	8003bde <LL_RCC_PLL_GetR>
 800472c:	4603      	mov	r3, r0
 800472e:	0f5b      	lsrs	r3, r3, #29
 8004730:	3301      	adds	r3, #1
 8004732:	fbb4 f3f3 	udiv	r3, r4, r3
 8004736:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004738:	68fb      	ldr	r3, [r7, #12]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop
 8004744:	0800a350 	.word	0x0800a350
 8004748:	00f42400 	.word	0x00f42400
 800474c:	01e84800 	.word	0x01e84800

08004750 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b598      	push	{r3, r4, r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004754:	f7ff ff90 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004758:	4604      	mov	r4, r0
 800475a:	f7ff f9d1 	bl	8003b00 <LL_RCC_GetAHBPrescaler>
 800475e:	4603      	mov	r3, r0
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4a03      	ldr	r2, [pc, #12]	; (8004774 <HAL_RCC_GetHCLKFreq+0x24>)
 8004768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd98      	pop	{r3, r4, r7, pc}
 8004774:	0800a2f0 	.word	0x0800a2f0

08004778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004778:	b598      	push	{r3, r4, r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800477c:	f7ff ffe8 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004780:	4604      	mov	r4, r0
 8004782:	f7ff f9d7 	bl	8003b34 <LL_RCC_GetAPB1Prescaler>
 8004786:	4603      	mov	r3, r0
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa24 f303 	lsr.w	r3, r4, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd98      	pop	{r3, r4, r7, pc}
 80047a0:	0800a330 	.word	0x0800a330

080047a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a4:	b598      	push	{r3, r4, r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80047a8:	f7ff ffd2 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 80047ac:	4604      	mov	r4, r0
 80047ae:	f7ff f9cd 	bl	8003b4c <LL_RCC_GetAPB2Prescaler>
 80047b2:	4603      	mov	r3, r0
 80047b4:	0adb      	lsrs	r3, r3, #11
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd98      	pop	{r3, r4, r7, pc}
 80047cc:	0800a330 	.word	0x0800a330

080047d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2bb0      	cmp	r3, #176	; 0xb0
 80047dc:	d903      	bls.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e007      	b.n	80047f6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80047f6:	f7ff f98f 	bl	8003b18 <LL_RCC_GetAHB4Prescaler>
 80047fa:	4603      	mov	r3, r0
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	fbb2 f3f3 	udiv	r3, r2, r3
 800480e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	0c9c      	lsrs	r4, r3, #18
 800481a:	f7fe fedd 	bl	80035d8 <HAL_PWREx_GetVoltageRange>
 800481e:	4603      	mov	r3, r0
 8004820:	4619      	mov	r1, r3
 8004822:	4620      	mov	r0, r4
 8004824:	f000 f80c 	bl	8004840 <RCC_SetFlashLatency>
 8004828:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	bf00      	nop
 8004834:	0800a350 	.word	0x0800a350
 8004838:	0800a2f0 	.word	0x0800a2f0
 800483c:	431bde83 	.word	0x431bde83

08004840 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b093      	sub	sp, #76	; 0x4c
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800484a:	4b39      	ldr	r3, [pc, #228]	; (8004930 <RCC_SetFlashLatency+0xf0>)
 800484c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004856:	4a37      	ldr	r2, [pc, #220]	; (8004934 <RCC_SetFlashLatency+0xf4>)
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	ca07      	ldmia	r2, {r0, r1, r2}
 800485e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004862:	4b35      	ldr	r3, [pc, #212]	; (8004938 <RCC_SetFlashLatency+0xf8>)
 8004864:	f107 040c 	add.w	r4, r7, #12
 8004868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800486a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800486e:	2300      	movs	r3, #0
 8004870:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d11c      	bne.n	80048b4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800487a:	2300      	movs	r3, #0
 800487c:	643b      	str	r3, [r7, #64]	; 0x40
 800487e:	e015      	b.n	80048ac <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004888:	4413      	add	r3, r2
 800488a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d808      	bhi.n	80048a6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800489c:	4413      	add	r3, r2
 800489e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048a2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048a4:	e022      	b.n	80048ec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80048a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a8:	3301      	adds	r3, #1
 80048aa:	643b      	str	r3, [r7, #64]	; 0x40
 80048ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d9e6      	bls.n	8004880 <RCC_SetFlashLatency+0x40>
 80048b2:	e01b      	b.n	80048ec <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048b4:	2300      	movs	r3, #0
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b8:	e015      	b.n	80048e6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048c2:	4413      	add	r3, r2
 80048c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d808      	bhi.n	80048e0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048d6:	4413      	add	r3, r2
 80048d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048de:	e005      	b.n	80048ec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e2:	3301      	adds	r3, #1
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d9e6      	bls.n	80048ba <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <RCC_SetFlashLatency+0xfc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 0207 	bic.w	r2, r3, #7
 80048f4:	4911      	ldr	r1, [pc, #68]	; (800493c <RCC_SetFlashLatency+0xfc>)
 80048f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048fc:	f7fd ffe8 	bl	80028d0 <HAL_GetTick>
 8004900:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004902:	e008      	b.n	8004916 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004904:	f7fd ffe4 	bl	80028d0 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e007      	b.n	8004926 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <RCC_SetFlashLatency+0xfc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004920:	429a      	cmp	r2, r3
 8004922:	d1ef      	bne.n	8004904 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	374c      	adds	r7, #76	; 0x4c
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}
 800492e:	bf00      	nop
 8004930:	0800a1c4 	.word	0x0800a1c4
 8004934:	0800a1d4 	.word	0x0800a1d4
 8004938:	0800a1e0 	.word	0x0800a1e0
 800493c:	58004000 	.word	0x58004000

08004940 <LL_RCC_LSE_IsEnabled>:
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <LL_RCC_LSE_IsEnabled+0x18>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <LL_RCC_LSE_IsEnabled+0x1a>
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_RCC_LSE_IsReady>:
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d101      	bne.n	800497c <LL_RCC_LSE_IsReady+0x18>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <LL_RCC_LSE_IsReady+0x1a>
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_RCC_SetRFWKPClockSource>:
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004998:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800499c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <LL_RCC_SetSMPSClockSource>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_RCC_SetSMPSPrescaler>:
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_RCC_SetUSARTClockSource>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f023 0203 	bic.w	r2, r3, #3
 8004a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_RCC_SetLPUARTClockSource>:
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_SetI2CClockSource>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_RCC_SetLPTIMClockSource>:
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	43db      	mvns	r3, r3
 8004aae:	401a      	ands	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_RCC_SetSAIClockSource>:
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_RCC_SetRNGClockSource>:
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_SetCLK48ClockSource>:
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_SetUSBClockSource>:
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff ffe3 	bl	8004b22 <LL_RCC_SetCLK48ClockSource>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <LL_RCC_SetADCClockSource>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_SetRTCClockSource>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <LL_RCC_GetRTCClockSource>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_RCC_ForceBackupDomainReset>:
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bee:	bf00      	nop
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <LL_RCC_PLLSAI1_Enable>:
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c2c:	6013      	str	r3, [r2, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <LL_RCC_PLLSAI1_Disable>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c4a:	6013      	str	r3, [r2, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <LL_RCC_PLLSAI1_IsReady>:
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c68:	d101      	bne.n	8004c6e <LL_RCC_PLLSAI1_IsReady+0x18>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b088      	sub	sp, #32
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004c82:	2300      	movs	r3, #0
 8004c84:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c86:	2300      	movs	r3, #0
 8004c88:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d034      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c9e:	d021      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004ca0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ca4:	d81b      	bhi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004caa:	d01d      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cb0:	d815      	bhi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cba:	d110      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cca:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ccc:	e00d      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f947 	bl	8004f66 <RCCEx_PLLSAI1_ConfigNP>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cdc:	e005      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	77fb      	strb	r3, [r7, #31]
        break;
 8004ce2:	e002      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cea:	7ffb      	ldrb	r3, [r7, #31]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fee8 	bl	8004aca <LL_RCC_SetSAIClockSource>
 8004cfa:	e001      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d046      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004d0c:	f7ff ff56 	bl	8004bbc <LL_RCC_GetRTCClockSource>
 8004d10:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d03c      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d1c:	f7fe fc4c 	bl	80035b8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d105      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ff30 	bl	8004b90 <LL_RCC_SetRTCClockSource>
 8004d30:	e02e      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d3c:	f7ff ff4b 	bl	8004bd6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d40:	f7ff ff5a 	bl	8004bf8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004d5c:	f7ff fdf0 	bl	8004940 <LL_RCC_LSE_IsEnabled>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d114      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d66:	f7fd fdb3 	bl	80028d0 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d6c:	e00b      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fd fdaf 	bl	80028d0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d902      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	77fb      	strb	r3, [r7, #31]
              break;
 8004d84:	e004      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d86:	f7ff fded 	bl	8004964 <LL_RCC_LSE_IsReady>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d1ee      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
 8004d92:	77bb      	strb	r3, [r7, #30]
 8004d94:	e001      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	7ffb      	ldrb	r3, [r7, #31]
 8004d98:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fe2a 	bl	8004a04 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fe35 	bl	8004a30 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fe5d 	bl	8004a96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fe52 	bl	8004a96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fe2a 	bl	8004a5c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fe1f 	bl	8004a5c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d022      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fe8d 	bl	8004b4e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e56:	d10b      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f8dd 	bl	800501c <RCCEx_PLLSAI1_ConfigNQ>
 8004e62:	4603      	mov	r3, r0
 8004e64:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004e6c:	7ffb      	ldrb	r3, [r7, #31]
 8004e6e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d02b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d008      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e8e:	d003      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fe2a 	bl	8004af6 <LL_RCC_SetRNGClockSource>
 8004ea2:	e00a      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7ff fe21 	bl	8004af6 <LL_RCC_SetRNGClockSource>
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fe34 	bl	8004b22 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d022      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fe3d 	bl	8004b64 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef2:	d107      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f02:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f0c:	d10b      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f8dd 	bl	80050d2 <RCCEx_PLLSAI1_ConfigNR>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004f1c:	7ffb      	ldrb	r3, [r7, #31]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d004      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fd26 	bl	8004988 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fd45 	bl	80049dc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fd2c 	bl	80049b4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004f5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f72:	f7ff fe61 	bl	8004c38 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f76:	f7fd fcab 	bl	80028d0 <HAL_GetTick>
 8004f7a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f7c:	e009      	b.n	8004f92 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f7e:	f7fd fca7 	bl	80028d0 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d902      	bls.n	8004f92 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	e004      	b.n	8004f9c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f92:	f7ff fe60 	bl	8004c56 <LL_RCC_PLLSAI1_IsReady>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f0      	bne.n	8004f7e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d137      	bne.n	8005012 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fd0:	f7ff fe23 	bl	8004c1a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd4:	f7fd fc7c 	bl	80028d0 <HAL_GetTick>
 8004fd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fda:	e009      	b.n	8004ff0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fdc:	f7fd fc78 	bl	80028d0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d902      	bls.n	8004ff0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	73fb      	strb	r3, [r7, #15]
        break;
 8004fee:	e004      	b.n	8004ffa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ff0:	f7ff fe31 	bl	8004c56 <LL_RCC_PLLSAI1_IsReady>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d1f0      	bne.n	8004fdc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d108      	bne.n	8005012 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005028:	f7ff fe06 	bl	8004c38 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800502c:	f7fd fc50 	bl	80028d0 <HAL_GetTick>
 8005030:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005032:	e009      	b.n	8005048 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005034:	f7fd fc4c 	bl	80028d0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d902      	bls.n	8005048 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	73fb      	strb	r3, [r7, #15]
      break;
 8005046:	e004      	b.n	8005052 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005048:	f7ff fe05 	bl	8004c56 <LL_RCC_PLLSAI1_IsReady>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d137      	bne.n	80050c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	021b      	lsls	r3, r3, #8
 8005068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506c:	4313      	orrs	r3, r2
 800506e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005086:	f7ff fdc8 	bl	8004c1a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508a:	f7fd fc21 	bl	80028d0 <HAL_GetTick>
 800508e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005090:	e009      	b.n	80050a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005092:	f7fd fc1d 	bl	80028d0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d902      	bls.n	80050a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	73fb      	strb	r3, [r7, #15]
        break;
 80050a4:	e004      	b.n	80050b0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050a6:	f7ff fdd6 	bl	8004c56 <LL_RCC_PLLSAI1_IsReady>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d1f0      	bne.n	8005092 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d108      	bne.n	80050c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c4:	4313      	orrs	r3, r2
 80050c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80050de:	f7ff fdab 	bl	8004c38 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050e2:	f7fd fbf5 	bl	80028d0 <HAL_GetTick>
 80050e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050e8:	e009      	b.n	80050fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ea:	f7fd fbf1 	bl	80028d0 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d902      	bls.n	80050fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	e004      	b.n	8005108 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050fe:	f7ff fdaa 	bl	8004c56 <LL_RCC_PLLSAI1_IsReady>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f0      	bne.n	80050ea <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d137      	bne.n	800517e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005122:	4313      	orrs	r3, r2
 8005124:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005138:	4313      	orrs	r3, r2
 800513a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800513c:	f7ff fd6d 	bl	8004c1a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005140:	f7fd fbc6 	bl	80028d0 <HAL_GetTick>
 8005144:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005146:	e009      	b.n	800515c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005148:	f7fd fbc2 	bl	80028d0 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d902      	bls.n	800515c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	73fb      	strb	r3, [r7, #15]
        break;
 800515a:	e004      	b.n	8005166 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800515c:	f7ff fd7b 	bl	8004c56 <LL_RCC_PLLSAI1_IsReady>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d1f0      	bne.n	8005148 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800517a:	4313      	orrs	r3, r2
 800517c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <LL_RCC_GetUSARTClockSource>:
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4013      	ands	r3, r2
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_RCC_GetLPUARTClockSource>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4013      	ands	r3, r2
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e042      	b.n	8005260 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc f8b3 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	; 0x24
 80051f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fc9e 	bl	8005b4c <UART_SetConfig>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e022      	b.n	8005260 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fe98 	bl	8005f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 ff1f 	bl	800609c <UART_CheckIdleState>
 800525e:	4603      	mov	r3, r0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005268:	b480      	push	{r7}
 800526a:	b091      	sub	sp, #68	; 0x44
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527c:	2b20      	cmp	r3, #32
 800527e:	f040 808c 	bne.w	800539a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_UART_Transmit_IT+0x26>
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e084      	b.n	800539c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_UART_Transmit_IT+0x38>
 800529c:	2302      	movs	r3, #2
 800529e:	e07d      	b.n	800539c <HAL_UART_Transmit_IT+0x134>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	88fa      	ldrh	r2, [r7, #6]
 80052ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2221      	movs	r2, #33	; 0x21
 80052d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052dc:	d12e      	bne.n	800533c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e6:	d107      	bne.n	80052f8 <HAL_UART_Transmit_IT+0x90>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <HAL_UART_Transmit_IT+0x140>)
 80052f4:	675a      	str	r2, [r3, #116]	; 0x74
 80052f6:	e002      	b.n	80052fe <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <HAL_UART_Transmit_IT+0x144>)
 80052fc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800531c:	63bb      	str	r3, [r7, #56]	; 0x38
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005326:	637a      	str	r2, [r7, #52]	; 0x34
 8005328:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <HAL_UART_Transmit_IT+0x9e>
 800533a:	e02c      	b.n	8005396 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005344:	d107      	bne.n	8005356 <HAL_UART_Transmit_IT+0xee>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_UART_Transmit_IT+0x148>)
 8005352:	675a      	str	r2, [r3, #116]	; 0x74
 8005354:	e002      	b.n	800535c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <HAL_UART_Transmit_IT+0x14c>)
 800535a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	613b      	str	r3, [r7, #16]
   return(result);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005382:	623b      	str	r3, [r7, #32]
 8005384:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	69f9      	ldr	r1, [r7, #28]
 8005388:	6a3a      	ldr	r2, [r7, #32]
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e6      	bne.n	8005364 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800539a:	2302      	movs	r3, #2
  }
}
 800539c:	4618      	mov	r0, r3
 800539e:	3744      	adds	r7, #68	; 0x44
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	080067cd 	.word	0x080067cd
 80053ac:	080066ed 	.word	0x080066ed
 80053b0:	0800662b 	.word	0x0800662b
 80053b4:	08006573 	.word	0x08006573

080053b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d17a      	bne.n	80054c6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_UART_Transmit_DMA+0x24>
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e073      	b.n	80054c8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_UART_Transmit_DMA+0x36>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e06c      	b.n	80054c8 <HAL_UART_Transmit_DMA+0x110>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2221      	movs	r2, #33	; 0x21
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005420:	2b00      	cmp	r3, #0
 8005422:	d02c      	beq.n	800547e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005428:	4a29      	ldr	r2, [pc, #164]	; (80054d0 <HAL_UART_Transmit_DMA+0x118>)
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005430:	4a28      	ldr	r2, [pc, #160]	; (80054d4 <HAL_UART_Transmit_DMA+0x11c>)
 8005432:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005438:	4a27      	ldr	r2, [pc, #156]	; (80054d8 <HAL_UART_Transmit_DMA+0x120>)
 800543a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005440:	2200      	movs	r2, #0
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	4619      	mov	r1, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3328      	adds	r3, #40	; 0x28
 8005454:	461a      	mov	r2, r3
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	f7fd fc2a 	bl	8002cb0 <HAL_DMA_Start_IT>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2210      	movs	r2, #16
 8005466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e024      	b.n	80054c8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	613b      	str	r3, [r7, #16]
   return(result);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	623a      	str	r2, [r7, #32]
 80054b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	69f9      	ldr	r1, [r7, #28]
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e000      	b.n	80054c8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
  }
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	08006411 	.word	0x08006411
 80054d4:	080064ab 	.word	0x080064ab
 80054d8:	080064c7 	.word	0x080064c7

080054dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b0ba      	sub	sp, #232	; 0xe8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005506:	f640 030f 	movw	r3, #2063	; 0x80f
 800550a:	4013      	ands	r3, r2
 800550c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d11b      	bne.n	8005550 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 82d6 	beq.w	8005af2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
      }
      return;
 800554e:	e2d0      	b.n	8005af2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 811f 	beq.w	8005798 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800555a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800555e:	4b8b      	ldr	r3, [pc, #556]	; (800578c <HAL_UART_IRQHandler+0x2b0>)
 8005560:	4013      	ands	r3, r2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800556a:	4b89      	ldr	r3, [pc, #548]	; (8005790 <HAL_UART_IRQHandler+0x2b4>)
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8112 	beq.w	8005798 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d011      	beq.n	80055a4 <HAL_UART_IRQHandler+0xc8>
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559a:	f043 0201 	orr.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <HAL_UART_IRQHandler+0xf8>
 80055b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2202      	movs	r2, #2
 80055c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_UART_IRQHandler+0x128>
 80055e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2204      	movs	r2, #4
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055fa:	f043 0202 	orr.w	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d017      	beq.n	8005640 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800561c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005620:	4b5a      	ldr	r3, [pc, #360]	; (800578c <HAL_UART_IRQHandler+0x2b0>)
 8005622:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2208      	movs	r2, #8
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005636:	f043 0208 	orr.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005648:	2b00      	cmp	r3, #0
 800564a:	d012      	beq.n	8005672 <HAL_UART_IRQHandler+0x196>
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005650:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 823c 	beq.w	8005af6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d013      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800568a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d105      	bne.n	80056a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d04f      	beq.n	8005776 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fe34 	bl	8006344 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e6:	2b40      	cmp	r3, #64	; 0x40
 80056e8:	d141      	bne.n	800576e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005716:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800571a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800572e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1d9      	bne.n	80056ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d013      	beq.n	8005766 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005742:	4a14      	ldr	r2, [pc, #80]	; (8005794 <HAL_UART_IRQHandler+0x2b8>)
 8005744:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574a:	4618      	mov	r0, r3
 800574c:	f7fd fb8a 	bl	8002e64 <HAL_DMA_Abort_IT>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d017      	beq.n	8005786 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	e00f      	b.n	8005786 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9da 	bl	8005b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	e00b      	b.n	8005786 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9d6 	bl	8005b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005774:	e007      	b.n	8005786 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9d2 	bl	8005b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005784:	e1b7      	b.n	8005af6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005786:	bf00      	nop
    return;
 8005788:	e1b5      	b.n	8005af6 <HAL_UART_IRQHandler+0x61a>
 800578a:	bf00      	nop
 800578c:	10000001 	.word	0x10000001
 8005790:	04000120 	.word	0x04000120
 8005794:	08006547 	.word	0x08006547

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579c:	2b01      	cmp	r3, #1
 800579e:	f040 814a 	bne.w	8005a36 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 8143 	beq.w	8005a36 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80057b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 813c 	beq.w	8005a36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2210      	movs	r2, #16
 80057c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	f040 80b5 	bne.w	8005940 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80057e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 8187 	beq.w	8005afa <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057f6:	429a      	cmp	r2, r3
 80057f8:	f080 817f 	bcs.w	8005afa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005802:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 8086 	bne.w	8005924 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800582c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005846:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800584e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800585a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1da      	bne.n	8005818 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005886:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800588a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800588e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e1      	bne.n	8005862 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3308      	adds	r3, #8
 80058a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e3      	bne.n	800589e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f4:	f023 0310 	bic.w	r3, r3, #16
 80058f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005906:	65bb      	str	r3, [r7, #88]	; 0x58
 8005908:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800590c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e4      	bne.n	80058e4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591e:	4618      	mov	r0, r3
 8005920:	f7fd fa41 	bl	8002da6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005930:	b29b      	uxth	r3, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	b29b      	uxth	r3, r3
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f8fb 	bl	8005b34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800593e:	e0dc      	b.n	8005afa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800594c:	b29b      	uxth	r3, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80ce 	beq.w	8005afe <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8005962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80c9 	beq.w	8005afe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800598e:	647b      	str	r3, [r7, #68]	; 0x44
 8005990:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800599c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e4      	bne.n	800596c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	623b      	str	r3, [r7, #32]
   return(result);
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059ca:	633a      	str	r2, [r7, #48]	; 0x30
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e1      	bne.n	80059a2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0310 	bic.w	r3, r3, #16
 8005a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	69b9      	ldr	r1, [r7, #24]
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	617b      	str	r3, [r7, #20]
   return(result);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e4      	bne.n	80059f2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f880 	bl	8005b34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a34:	e063      	b.n	8005afe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00e      	beq.n	8005a60 <HAL_UART_IRQHandler+0x584>
 8005a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 ff57 	bl	800690c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a5e:	e051      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d014      	beq.n	8005a96 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d03a      	beq.n	8005b02 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
    }
    return;
 8005a94:	e035      	b.n	8005b02 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x5da>
 8005aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 ff01 	bl	80068b6 <UART_EndTransmit_IT>
    return;
 8005ab4:	e026      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x5fa>
 8005ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 ff30 	bl	8006934 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ad4:	e016      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_UART_IRQHandler+0x628>
 8005ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da0c      	bge.n	8005b04 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 ff18 	bl	8006920 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005af0:	e008      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
      return;
 8005af2:	bf00      	nop
 8005af4:	e006      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
    return;
 8005af6:	bf00      	nop
 8005af8:	e004      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
      return;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
      return;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <HAL_UART_IRQHandler+0x628>
    return;
 8005b02:	bf00      	nop
  }
}
 8005b04:	37e8      	adds	r7, #232	; 0xe8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop

08005b0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b4c:	b5b0      	push	{r4, r5, r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4ba3      	ldr	r3, [pc, #652]	; (8005e04 <UART_SetConfig+0x2b8>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	69f9      	ldr	r1, [r7, #28]
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a98      	ldr	r2, [pc, #608]	; (8005e08 <UART_SetConfig+0x2bc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	69f9      	ldr	r1, [r7, #28]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	f023 010f 	bic.w	r1, r3, #15
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a89      	ldr	r2, [pc, #548]	; (8005e0c <UART_SetConfig+0x2c0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d120      	bne.n	8005c2e <UART_SetConfig+0xe2>
 8005bec:	2003      	movs	r0, #3
 8005bee:	f7ff facb 	bl	8005188 <LL_RCC_GetUSARTClockSource>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d817      	bhi.n	8005c28 <UART_SetConfig+0xdc>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0xb4>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c1d 	.word	0x08005c1d
 8005c08:	08005c17 	.word	0x08005c17
 8005c0c:	08005c23 	.word	0x08005c23
 8005c10:	2301      	movs	r3, #1
 8005c12:	76fb      	strb	r3, [r7, #27]
 8005c14:	e038      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c16:	2302      	movs	r3, #2
 8005c18:	76fb      	strb	r3, [r7, #27]
 8005c1a:	e035      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	76fb      	strb	r3, [r7, #27]
 8005c20:	e032      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c22:	2308      	movs	r3, #8
 8005c24:	76fb      	strb	r3, [r7, #27]
 8005c26:	e02f      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	76fb      	strb	r3, [r7, #27]
 8005c2c:	e02c      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a75      	ldr	r2, [pc, #468]	; (8005e08 <UART_SetConfig+0x2bc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d125      	bne.n	8005c84 <UART_SetConfig+0x138>
 8005c38:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005c3c:	f7ff fab4 	bl	80051a8 <LL_RCC_GetLPUARTClockSource>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c46:	d017      	beq.n	8005c78 <UART_SetConfig+0x12c>
 8005c48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c4c:	d817      	bhi.n	8005c7e <UART_SetConfig+0x132>
 8005c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c52:	d00b      	beq.n	8005c6c <UART_SetConfig+0x120>
 8005c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c58:	d811      	bhi.n	8005c7e <UART_SetConfig+0x132>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <UART_SetConfig+0x11a>
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c62:	d006      	beq.n	8005c72 <UART_SetConfig+0x126>
 8005c64:	e00b      	b.n	8005c7e <UART_SetConfig+0x132>
 8005c66:	2300      	movs	r3, #0
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e00d      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	e00a      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c72:	2304      	movs	r3, #4
 8005c74:	76fb      	strb	r3, [r7, #27]
 8005c76:	e007      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c78:	2308      	movs	r3, #8
 8005c7a:	76fb      	strb	r3, [r7, #27]
 8005c7c:	e004      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c7e:	2310      	movs	r3, #16
 8005c80:	76fb      	strb	r3, [r7, #27]
 8005c82:	e001      	b.n	8005c88 <UART_SetConfig+0x13c>
 8005c84:	2310      	movs	r3, #16
 8005c86:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a5e      	ldr	r2, [pc, #376]	; (8005e08 <UART_SetConfig+0x2bc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	f040 808b 	bne.w	8005daa <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c94:	7efb      	ldrb	r3, [r7, #27]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d823      	bhi.n	8005ce2 <UART_SetConfig+0x196>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x154>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ce3 	.word	0x08005ce3
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005ce3 	.word	0x08005ce3
 8005cb0:	08005cd3 	.word	0x08005cd3
 8005cb4:	08005ce3 	.word	0x08005ce3
 8005cb8:	08005ce3 	.word	0x08005ce3
 8005cbc:	08005ce3 	.word	0x08005ce3
 8005cc0:	08005cdb 	.word	0x08005cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fe fd58 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	6178      	str	r0, [r7, #20]
        break;
 8005cca:	e00f      	b.n	8005cec <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b50      	ldr	r3, [pc, #320]	; (8005e10 <UART_SetConfig+0x2c4>)
 8005cce:	617b      	str	r3, [r7, #20]
        break;
 8005cd0:	e00c      	b.n	8005cec <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd2:	f7fe fcd1 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8005cd6:	6178      	str	r0, [r7, #20]
        break;
 8005cd8:	e008      	b.n	8005cec <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cde:	617b      	str	r3, [r7, #20]
        break;
 8005ce0:	e004      	b.n	8005cec <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	76bb      	strb	r3, [r7, #26]
        break;
 8005cea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 811a 	beq.w	8005f28 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <UART_SetConfig+0x2c8>)
 8005cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d305      	bcc.n	8005d24 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d902      	bls.n	8005d2a <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	76bb      	strb	r3, [r7, #26]
 8005d28:	e0fe      	b.n	8005f28 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	4a37      	ldr	r2, [pc, #220]	; (8005e14 <UART_SetConfig+0x2c8>)
 8005d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	f7fa fa75 	bl	8000230 <__aeabi_uldivmod>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	020b      	lsls	r3, r1, #8
 8005d58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d5c:	0202      	lsls	r2, r0, #8
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	6849      	ldr	r1, [r1, #4]
 8005d62:	0849      	lsrs	r1, r1, #1
 8005d64:	4608      	mov	r0, r1
 8005d66:	f04f 0100 	mov.w	r1, #0
 8005d6a:	1814      	adds	r4, r2, r0
 8005d6c:	eb43 0501 	adc.w	r5, r3, r1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f04f 0300 	mov.w	r3, #0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa fa57 	bl	8000230 <__aeabi_uldivmod>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4613      	mov	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d90:	d308      	bcc.n	8005da4 <UART_SetConfig+0x258>
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d98:	d204      	bcs.n	8005da4 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	e0c1      	b.n	8005f28 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	76bb      	strb	r3, [r7, #26]
 8005da8:	e0be      	b.n	8005f28 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db2:	d16a      	bne.n	8005e8a <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005db4:	7efb      	ldrb	r3, [r7, #27]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	d82d      	bhi.n	8005e18 <UART_SetConfig+0x2cc>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <UART_SetConfig+0x278>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005de5 	.word	0x08005de5
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005df3 	.word	0x08005df3
 8005dd4:	08005e19 	.word	0x08005e19
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e19 	.word	0x08005e19
 8005de0:	08005dfb 	.word	0x08005dfb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fe fcde 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8005de8:	6178      	str	r0, [r7, #20]
        break;
 8005dea:	e01a      	b.n	8005e22 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <UART_SetConfig+0x2c4>)
 8005dee:	617b      	str	r3, [r7, #20]
        break;
 8005df0:	e017      	b.n	8005e22 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fe fc41 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8005df6:	6178      	str	r0, [r7, #20]
        break;
 8005df8:	e013      	b.n	8005e22 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfe:	617b      	str	r3, [r7, #20]
        break;
 8005e00:	e00f      	b.n	8005e22 <UART_SetConfig+0x2d6>
 8005e02:	bf00      	nop
 8005e04:	cfff69f3 	.word	0xcfff69f3
 8005e08:	40008000 	.word	0x40008000
 8005e0c:	40013800 	.word	0x40013800
 8005e10:	00f42400 	.word	0x00f42400
 8005e14:	0800a390 	.word	0x0800a390
      default:
        pclk = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	76bb      	strb	r3, [r7, #26]
        break;
 8005e20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d07f      	beq.n	8005f28 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	4a48      	ldr	r2, [pc, #288]	; (8005f50 <UART_SetConfig+0x404>)
 8005e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e32:	461a      	mov	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3a:	005a      	lsls	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	441a      	add	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d916      	bls.n	8005e84 <UART_SetConfig+0x338>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d212      	bcs.n	8005e84 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f023 030f 	bic.w	r3, r3, #15
 8005e66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	89fb      	ldrh	r3, [r7, #14]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	89fa      	ldrh	r2, [r7, #14]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e051      	b.n	8005f28 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	76bb      	strb	r3, [r7, #26]
 8005e88:	e04e      	b.n	8005f28 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e8a:	7efb      	ldrb	r3, [r7, #27]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	2b07      	cmp	r3, #7
 8005e90:	d821      	bhi.n	8005ed6 <UART_SetConfig+0x38a>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <UART_SetConfig+0x34c>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eb9 	.word	0x08005eb9
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005ed7 	.word	0x08005ed7
 8005ea4:	08005ec7 	.word	0x08005ec7
 8005ea8:	08005ed7 	.word	0x08005ed7
 8005eac:	08005ed7 	.word	0x08005ed7
 8005eb0:	08005ed7 	.word	0x08005ed7
 8005eb4:	08005ecf 	.word	0x08005ecf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eb8:	f7fe fc74 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8005ebc:	6178      	str	r0, [r7, #20]
        break;
 8005ebe:	e00f      	b.n	8005ee0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec0:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <UART_SetConfig+0x408>)
 8005ec2:	617b      	str	r3, [r7, #20]
        break;
 8005ec4:	e00c      	b.n	8005ee0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ec6:	f7fe fbd7 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8005eca:	6178      	str	r0, [r7, #20]
        break;
 8005ecc:	e008      	b.n	8005ee0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed2:	617b      	str	r3, [r7, #20]
        break;
 8005ed4:	e004      	b.n	8005ee0 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	76bb      	strb	r3, [r7, #26]
        break;
 8005ede:	bf00      	nop
    }

    if (pclk != 0U)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d020      	beq.n	8005f28 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <UART_SetConfig+0x404>)
 8005eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	441a      	add	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b0f      	cmp	r3, #15
 8005f10:	d908      	bls.n	8005f24 <UART_SetConfig+0x3d8>
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f18:	d204      	bcs.n	8005f24 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e001      	b.n	8005f28 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f44:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	0800a390 	.word	0x0800a390
 8005f54:	00f42400 	.word	0x00f42400

08005f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01a      	beq.n	800606e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006056:	d10a      	bne.n	800606e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060ac:	f7fc fc10 	bl	80028d0 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d10e      	bne.n	80060de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f82f 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e025      	b.n	800612a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d10e      	bne.n	800610a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f819 	bl	8006132 <UART_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e00f      	b.n	800612a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b09c      	sub	sp, #112	; 0x70
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	e0a9      	b.n	8006298 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	f000 80a5 	beq.w	8006298 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7fc fbbf 	bl	80028d0 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <UART_WaitOnFlagUntilTimeout+0x32>
 800615e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006160:	2b00      	cmp	r3, #0
 8006162:	d140      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006178:	667b      	str	r3, [r7, #100]	; 0x64
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006184:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e6      	bne.n	8006164 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3308      	adds	r3, #8
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	663b      	str	r3, [r7, #96]	; 0x60
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80061b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e069      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d051      	beq.n	8006298 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006202:	d149      	bne.n	8006298 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800620c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622c:	637b      	str	r3, [r7, #52]	; 0x34
 800622e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e6      	bne.n	800620e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3308      	adds	r3, #8
 8006246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	613b      	str	r3, [r7, #16]
   return(result);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	66bb      	str	r3, [r7, #104]	; 0x68
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3308      	adds	r3, #8
 800625e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006260:	623a      	str	r2, [r7, #32]
 8006262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	69f9      	ldr	r1, [r7, #28]
 8006266:	6a3a      	ldr	r2, [r7, #32]
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	61bb      	str	r3, [r7, #24]
   return(result);
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e5      	bne.n	8006240 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e010      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69da      	ldr	r2, [r3, #28]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	4013      	ands	r3, r2
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	bf0c      	ite	eq
 80062a8:	2301      	moveq	r3, #1
 80062aa:	2300      	movne	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	f43f af46 	beq.w	8006144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3770      	adds	r7, #112	; 0x70
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b08f      	sub	sp, #60	; 0x3c
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	60bb      	str	r3, [r7, #8]
   return(result);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631c:	61ba      	str	r2, [r7, #24]
 800631e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6979      	ldr	r1, [r7, #20]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	613b      	str	r3, [r7, #16]
   return(result);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e5      	bne.n	80062fc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006338:	bf00      	nop
 800633a:	373c      	adds	r7, #60	; 0x3c
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b095      	sub	sp, #84	; 0x54
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636a:	643b      	str	r3, [r7, #64]	; 0x40
 800636c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e6      	bne.n	800634c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	61fb      	str	r3, [r7, #28]
   return(result);
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	64bb      	str	r3, [r7, #72]	; 0x48
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3308      	adds	r3, #8
 80063a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e3      	bne.n	800637e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d118      	bne.n	80063f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f023 0310 	bic.w	r3, r3, #16
 80063d2:	647b      	str	r3, [r7, #68]	; 0x44
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6979      	ldr	r1, [r7, #20]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006404:	bf00      	nop
 8006406:	3754      	adds	r7, #84	; 0x54
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b090      	sub	sp, #64	; 0x40
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d137      	bne.n	800649c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642e:	2200      	movs	r2, #0
 8006430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	623b      	str	r3, [r7, #32]
   return(result);
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644a:	63bb      	str	r3, [r7, #56]	; 0x38
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006454:	633a      	str	r2, [r7, #48]	; 0x30
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800645a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	60fb      	str	r3, [r7, #12]
   return(result);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	69b9      	ldr	r1, [r7, #24]
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	617b      	str	r3, [r7, #20]
   return(result);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e6      	bne.n	8006468 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800649a:	e002      	b.n	80064a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800649c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800649e:	f7fa fc09 	bl	8000cb4 <HAL_UART_TxCpltCallback>
}
 80064a2:	bf00      	nop
 80064a4:	3740      	adds	r7, #64	; 0x40
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7ff fb27 	bl	8005b0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d109      	bne.n	8006506 <UART_DMAError+0x40>
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b21      	cmp	r3, #33	; 0x21
 80064f6:	d106      	bne.n	8006506 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006500:	6978      	ldr	r0, [r7, #20]
 8006502:	f7ff fede 	bl	80062c2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d109      	bne.n	8006528 <UART_DMAError+0x62>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b22      	cmp	r3, #34	; 0x22
 8006518:	d106      	bne.n	8006528 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2200      	movs	r2, #0
 800651e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006522:	6978      	ldr	r0, [r7, #20]
 8006524:	f7ff ff0e 	bl	8006344 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652e:	f043 0210 	orr.w	r2, r3, #16
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006538:	6978      	ldr	r0, [r7, #20]
 800653a:	f7ff faf1 	bl	8005b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fadb 	bl	8005b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006572:	b480      	push	{r7}
 8006574:	b08f      	sub	sp, #60	; 0x3c
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006580:	2b21      	cmp	r3, #33	; 0x21
 8006582:	d14c      	bne.n	800661e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d132      	bne.n	80065f6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	61fb      	str	r3, [r7, #28]
   return(result);
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e6      	bne.n	8006590 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6979      	ldr	r1, [r7, #20]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	613b      	str	r3, [r7, #16]
   return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e6      	bne.n	80065c2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80065f4:	e013      	b.n	800661e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800661e:	bf00      	nop
 8006620:	373c      	adds	r7, #60	; 0x3c
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800662a:	b480      	push	{r7}
 800662c:	b091      	sub	sp, #68	; 0x44
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006638:	2b21      	cmp	r3, #33	; 0x21
 800663a:	d151      	bne.n	80066e0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d132      	bne.n	80066ae <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	623b      	str	r3, [r7, #32]
   return(result);
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800665c:	63bb      	str	r3, [r7, #56]	; 0x38
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	633b      	str	r3, [r7, #48]	; 0x30
 8006668:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e6      	bne.n	8006648 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	60fb      	str	r3, [r7, #12]
   return(result);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	69b9      	ldr	r1, [r7, #24]
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	617b      	str	r3, [r7, #20]
   return(result);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80066ac:	e018      	b.n	80066e0 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80066b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c8:	1c9a      	adds	r2, r3, #2
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80066e0:	bf00      	nop
 80066e2:	3744      	adds	r7, #68	; 0x44
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b091      	sub	sp, #68	; 0x44
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fa:	2b21      	cmp	r3, #33	; 0x21
 80066fc:	d160      	bne.n	80067c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006704:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006706:	e057      	b.n	80067b8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d133      	bne.n	800677c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3308      	adds	r3, #8
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	623b      	str	r3, [r7, #32]
   return(result);
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800672a:	63bb      	str	r3, [r7, #56]	; 0x38
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006734:	633a      	str	r2, [r7, #48]	; 0x30
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800673a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	60fb      	str	r3, [r7, #12]
   return(result);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	617b      	str	r3, [r7, #20]
   return(result);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e6      	bne.n	8006748 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800677a:	e021      	b.n	80067c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006786:	2b00      	cmp	r3, #0
 8006788:	d013      	beq.n	80067b2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678e:	781a      	ldrb	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80067b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067b4:	3b01      	subs	r3, #1
 80067b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80067b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1a4      	bne.n	8006708 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80067be:	e7ff      	b.n	80067c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80067c0:	bf00      	nop
 80067c2:	3744      	adds	r7, #68	; 0x44
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b091      	sub	sp, #68	; 0x44
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067da:	2b21      	cmp	r3, #33	; 0x21
 80067dc:	d165      	bne.n	80068aa <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80067e6:	e05c      	b.n	80068a2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d133      	bne.n	800685c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3308      	adds	r3, #8
 80067fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	61fb      	str	r3, [r7, #28]
   return(result);
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3308      	adds	r3, #8
 8006812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006814:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800681a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e5      	bne.n	80067f4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	60bb      	str	r3, [r7, #8]
   return(result);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800683c:	633b      	str	r3, [r7, #48]	; 0x30
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6979      	ldr	r1, [r7, #20]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	613b      	str	r3, [r7, #16]
   return(result);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e6      	bne.n	8006828 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800685a:	e026      	b.n	80068aa <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d018      	beq.n	800689c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	1c9a      	adds	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800689c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800689e:	3b01      	subs	r3, #1
 80068a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80068a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d19f      	bne.n	80067e8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80068a8:	e7ff      	b.n	80068aa <UART_TxISR_16BIT_FIFOEN+0xde>
 80068aa:	bf00      	nop
 80068ac:	3744      	adds	r7, #68	; 0x44
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b088      	sub	sp, #32
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa f9d8 	bl	8000cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006904:	bf00      	nop
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_UARTEx_DisableFifoMode+0x16>
 800695a:	2302      	movs	r3, #2
 800695c:	e027      	b.n	80069ae <HAL_UARTEx_DisableFifoMode+0x66>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2224      	movs	r2, #36	; 0x24
 800696a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800698c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e02d      	b.n	8006a2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2224      	movs	r2, #36	; 0x24
 80069de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f850 	bl	8006ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e02d      	b.n	8006aaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2224      	movs	r2, #36	; 0x24
 8006a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f812 	bl	8006ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d108      	bne.n	8006ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ad4:	e031      	b.n	8006b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ada:	2308      	movs	r3, #8
 8006adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	0e5b      	lsrs	r3, r3, #25
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	0f5b      	lsrs	r3, r3, #29
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	7b3a      	ldrb	r2, [r7, #12]
 8006b02:	4911      	ldr	r1, [pc, #68]	; (8006b48 <UARTEx_SetNbDataToProcess+0x94>)
 8006b04:	5c8a      	ldrb	r2, [r1, r2]
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b0a:	7b3a      	ldrb	r2, [r7, #12]
 8006b0c:	490f      	ldr	r1, [pc, #60]	; (8006b4c <UARTEx_SetNbDataToProcess+0x98>)
 8006b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	7b7a      	ldrb	r2, [r7, #13]
 8006b20:	4909      	ldr	r1, [pc, #36]	; (8006b48 <UARTEx_SetNbDataToProcess+0x94>)
 8006b22:	5c8a      	ldrb	r2, [r1, r2]
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b28:	7b7a      	ldrb	r2, [r7, #13]
 8006b2a:	4908      	ldr	r1, [pc, #32]	; (8006b4c <UARTEx_SetNbDataToProcess+0x98>)
 8006b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	0800a3a8 	.word	0x0800a3a8
 8006b4c:	0800a3b0 	.word	0x0800a3b0

08006b50 <HAL_BLE_LLD_Init>:
 * @param[in] hsStartupTime Startup time (system time unit)
 * @param[in] lsOscInternal Use internal RO for the 32 kHz slow speed clock
 *                          (else external crystal)
 */
uint8_t HAL_BLE_LLD_Init(uint16_t hsStartupTime, bool lsOscInternal)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	460a      	mov	r2, r1
 8006b5a:	80fb      	strh	r3, [r7, #6]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	717b      	strb	r3, [r7, #5]
  BLE_LLD_Init(hsStartupTime, lsOscInternal, ENABLE);
 8006b60:	7979      	ldrb	r1, [r7, #5]
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	2201      	movs	r2, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f8b2 	bl	8006cd0 <BLE_LLD_Init>
  return SUCCESS_0;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_BLE_LLD_Configure>:
uint8_t HAL_BLE_LLD_Configure(txPower_t txPower,
                              uint8_t channel,
                              bool phy2mbps,
                              uint32_t b2bTimeUs,
                              uint32_t networkId)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
 8006b82:	460b      	mov	r3, r1
 8006b84:	71bb      	strb	r3, [r7, #6]
 8006b86:	4613      	mov	r3, r2
 8006b88:	717b      	strb	r3, [r7, #5]
  BLE_LLD_SetTxPower(txPower);
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f901 	bl	8006d94 <BLE_LLD_SetTxPower>
  BLE_LLD_SetChannel(STATE_MACHINE_0, channel);
 8006b92:	79bb      	ldrb	r3, [r7, #6]
 8006b94:	4619      	mov	r1, r3
 8006b96:	2000      	movs	r0, #0
 8006b98:	f000 f8b8 	bl	8006d0c <BLE_LLD_SetChannel>
  BLE_LLD_SetTx_Rx_Phy(STATE_MACHINE_0,
 8006b9c:	797b      	ldrb	r3, [r7, #5]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	797b      	ldrb	r3, [r7, #5]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_BLE_LLD_Configure+0x34>
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	e000      	b.n	8006bac <HAL_BLE_LLD_Configure+0x36>
 8006baa:	2300      	movs	r3, #0
 8006bac:	461a      	mov	r2, r3
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f000 f902 	bl	8006db8 <BLE_LLD_SetTx_Rx_Phy>
                       phy2mbps ? TX_PHY_2MBPS : TX_PHY_1MBPS,
                       phy2mbps ? RX_PHY_2MBPS : RX_PHY_1MBPS);
  BLE_LLD_SetBackToBackTime(b2bTimeUs);
 8006bb4:	6838      	ldr	r0, [r7, #0]
 8006bb6:	f000 f8db 	bl	8006d70 <BLE_LLD_SetBackToBackTime>
  BLE_LLD_SetTxAttributes(STATE_MACHINE_0, networkId);
 8006bba:	6939      	ldr	r1, [r7, #16]
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f000 f8bf 	bl	8006d40 <BLE_LLD_SetTxAttributes>
  return SUCCESS_0;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_BLE_LLD_SendPacket>:
 * @retval RADIO_BUSY_C4 if radio is busy
 */
uint8_t HAL_BLE_LLD_SendPacket(void *data,
                           uint8_t size,
                           lldCallback_t *callback)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	72fb      	strb	r3, [r7, #11]
  ActionPacket *ap;

  // Packet to send
  ap = &actPack[APACKET_0];
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_BLE_LLD_SendPacket+0x60>)
 8006bdc:	617b      	str	r3, [r7, #20]
  ap->actionPacketNb = APACKET_0;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2200      	movs	r2, #0
 8006be2:	779a      	strb	r2, [r3, #30]
  ap->StateMachineNo = STATE_MACHINE_0;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
  ap->ActionTag = TXRX | TIMER_WAKEUP;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2206      	movs	r2, #6
 8006bee:	705a      	strb	r2, [r3, #1]
  ap->WakeupTime = WAKEUP_TIME_US;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bf6:	605a      	str	r2, [r3, #4]
  ap->data = data;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	60da      	str	r2, [r3, #12]
  ap->dataSize = size;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	7afa      	ldrb	r2, [r7, #11]
 8006c02:	741a      	strb	r2, [r3, #16]
  ap->nextTrue = APACKET_STOP;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	22ff      	movs	r2, #255	; 0xff
 8006c08:	771a      	strb	r2, [r3, #28]
  ap->nextFalse = APACKET_STOP;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	22ff      	movs	r2, #255	; 0xff
 8006c0e:	775a      	strb	r2, [r3, #29]
  ap->callback = callback;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	621a      	str	r2, [r3, #32]
  BLE_LLD_SetReservedArea(ap);
 8006c16:	6978      	ldr	r0, [r7, #20]
 8006c18:	f000 f8ec 	bl	8006df4 <BLE_LLD_SetReservedArea>

  BLE_LLD_MakeActionPacketPending(ap);
 8006c1c:	6978      	ldr	r0, [r7, #20]
 8006c1e:	f000 f953 	bl	8006ec8 <BLE_LLD_MakeActionPacketPending>
  return SUCCESS_0;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000218 	.word	0x20000218

08006c30 <HAL_BLE_LLD_ReceivePacket>:
 * @retval INVALID_PARAMETER_C0 if invalid parameters
 * @retval RADIO_BUSY_C4 if radio is busy
 */
uint8_t HAL_BLE_LLD_ReceivePacket(uint32_t receiveTimeout,
                              lldCallback_t *callback)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  ActionPacket *ap;

  // Packet to receive
  ap = &actPack[APACKET_2];
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <HAL_BLE_LLD_ReceivePacket+0x58>)
 8006c3c:	60fb      	str	r3, [r7, #12]
  ap->actionPacketNb = APACKET_2;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	779a      	strb	r2, [r3, #30]
  ap->StateMachineNo = STATE_MACHINE_0;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
  ap->ActionTag = TIMER_WAKEUP;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	705a      	strb	r2, [r3, #1]
  ap->WakeupTime = WAKEUP_TIME_US;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c56:	605a      	str	r2, [r3, #4]
  ap->ReceiveWindowLength = receiveTimeout;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	609a      	str	r2, [r3, #8]
  ap->nextTrue = APACKET_STOP;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	771a      	strb	r2, [r3, #28]
  ap->nextFalse = APACKET_STOP;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	22ff      	movs	r2, #255	; 0xff
 8006c68:	775a      	strb	r2, [r3, #29]
  ap->callback = callback;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	621a      	str	r2, [r3, #32]
  BLE_LLD_SetReservedArea(ap);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f8bf 	bl	8006df4 <BLE_LLD_SetReservedArea>

  BLE_LLD_MakeActionPacketPending(ap);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f926 	bl	8006ec8 <BLE_LLD_MakeActionPacketPending>
  return SUCCESS_0;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000260 	.word	0x20000260

08006c8c <BLE_LLD_PRX_Init>:
 */
void BLE_LLD_PRX_Init(param_BLE_LLD_t *parameters,
                      ipBLE_lld_txrxdata_Type *transmitBuffer,
                      ipBLE_lld_txrxdata_Type *receiveBuffer,
                      uint8_t (*callbackSend)(BLE_LLD_Code_t bleCmd))
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  params = parameters;
 8006c9a:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <BLE_LLD_PRX_Init+0x34>)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6013      	str	r3, [r2, #0]
  txBuffer = transmitBuffer;
 8006ca0:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <BLE_LLD_PRX_Init+0x38>)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6013      	str	r3, [r2, #0]
  rxBuffer = receiveBuffer;
 8006ca6:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <BLE_LLD_PRX_Init+0x3c>)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6013      	str	r3, [r2, #0]
  CB_sendCommand = callbackSend;
 8006cac:	4a07      	ldr	r2, [pc, #28]	; (8006ccc <BLE_LLD_PRX_Init+0x40>)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6013      	str	r3, [r2, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20000368 	.word	0x20000368
 8006cc4:	2000036c 	.word	0x2000036c
 8006cc8:	20000370 	.word	0x20000370
 8006ccc:	20000374 	.word	0x20000374

08006cd0 <BLE_LLD_Init>:
 *                            1: internal RO
 *                            0: external crystal
 * @param[in] whitening ENABLE or DISABLE whitening for transmission and reception
 */
void BLE_LLD_Init(uint16_t hsStartupTime, uint8_t lowSpeedOsc, FunctionalState whitening)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	80fb      	strh	r3, [r7, #6]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	717b      	strb	r3, [r7, #5]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	713b      	strb	r3, [r7, #4]
  params->init.startupTime = (uint32_t)(hsStartupTime);
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <BLE_LLD_Init+0x38>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	601a      	str	r2, [r3, #0]
  params->init.lowSpeedOsc = lowSpeedOsc;
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <BLE_LLD_Init+0x38>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	797a      	ldrb	r2, [r7, #5]
 8006cf0:	711a      	strb	r2, [r3, #4]
  params->init.whitening = (uint8_t)whitening;
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <BLE_LLD_Init+0x38>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	793a      	ldrb	r2, [r7, #4]
 8006cf8:	715a      	strb	r2, [r3, #5]
  sendCommand(BLE_LLD_INIT_CMDCODE);
 8006cfa:	2010      	movs	r0, #16
 8006cfc:	f000 f96c 	bl	8006fd8 <sendCommand>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000368 	.word	0x20000368

08006d0c <BLE_LLD_SetChannel>:
 *
 * @param[in] StateMachineNo State machine (0 - 7)
 * @param[in] channel Radio channel (0 - 39)
 */
void BLE_LLD_SetChannel(uint8_t StateMachineNo, uint8_t channel)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	460a      	mov	r2, r1
 8006d16:	71fb      	strb	r3, [r7, #7]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	71bb      	strb	r3, [r7, #6]
  params->chan.stateMachineNo = StateMachineNo;
 8006d1c:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <BLE_LLD_SetChannel+0x30>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	79fa      	ldrb	r2, [r7, #7]
 8006d22:	705a      	strb	r2, [r3, #1]
  params->chan.channel = channel;
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <BLE_LLD_SetChannel+0x30>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	79ba      	ldrb	r2, [r7, #6]
 8006d2a:	701a      	strb	r2, [r3, #0]
  sendCommand(BLE_LLD_SETCHANNEL_CMDCODE);
 8006d2c:	2002      	movs	r0, #2
 8006d2e:	f000 f953 	bl	8006fd8 <sendCommand>
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000368 	.word	0x20000368

08006d40 <BLE_LLD_SetTxAttributes>:
 *
 * @param[in] StateMachineNo State machine (0 - 7)
 * @param[in] NetworkID Network ID
 */
void BLE_LLD_SetTxAttributes(uint8_t StateMachineNo, uint32_t NetworkID)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
  params->txAttr.stateMachineNo = StateMachineNo;
 8006d4c:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <BLE_LLD_SetTxAttributes+0x2c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	79fa      	ldrb	r2, [r7, #7]
 8006d52:	711a      	strb	r2, [r3, #4]
  params->txAttr.networkId = NetworkID;
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <BLE_LLD_SetTxAttributes+0x2c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	601a      	str	r2, [r3, #0]
  sendCommand(BLE_LLD_SETTXATTRIBUTES_CMDCODE);
 8006d5c:	2003      	movs	r0, #3
 8006d5e:	f000 f93b 	bl	8006fd8 <sendCommand>
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000368 	.word	0x20000368

08006d70 <BLE_LLD_SetBackToBackTime>:
 * Back-to-back time must be at least 50us.
 *
 * @param[in] backToBackTime Time between two packets in back-to-back mode (us)
 */
void BLE_LLD_SetBackToBackTime(uint32_t backToBackTime)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  params->b2b.backToBackTime = backToBackTime;
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <BLE_LLD_SetBackToBackTime+0x20>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]
  sendCommand(BLE_LLD_SETBACKTOBACKTIME_CMDCODE);
 8006d80:	2004      	movs	r0, #4
 8006d82:	f000 f929 	bl	8006fd8 <sendCommand>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000368 	.word	0x20000368

08006d94 <BLE_LLD_SetTxPower>:
 * See txPower_t for actual power output.
 *
 * @param[in] powerLevel Transmit power level (0 - 31)
 */
void BLE_LLD_SetTxPower(txPower_t powerLevel)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	71fb      	strb	r3, [r7, #7]
  params->power.power = powerLevel;
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <BLE_LLD_SetTxPower+0x20>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	79fa      	ldrb	r2, [r7, #7]
 8006da4:	701a      	strb	r2, [r3, #0]
  sendCommand(BLE_LLD_SETTXPOWER_CMDCODE);
 8006da6:	2005      	movs	r0, #5
 8006da8:	f000 f916 	bl	8006fd8 <sendCommand>
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000368 	.word	0x20000368

08006db8 <BLE_LLD_SetTx_Rx_Phy>:
 * @param[in] StateMachineNo State machine (0 - 7)
 * @param[in] txPhy Speed for transmission: TX_PHY_1MBPS / TX_PHY_2MBPS
 * @param[in] rxPhy Speed for reception: RX_PHY_1MBPS / RX_PHY_2MBPS
 */
void BLE_LLD_SetTx_Rx_Phy(uint8_t StateMachineNo, uint8_t txPhy, uint8_t rxPhy)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	71fb      	strb	r3, [r7, #7]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	71bb      	strb	r3, [r7, #6]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	717b      	strb	r3, [r7, #5]
  params->phy.stateMachineNo =  StateMachineNo;
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <BLE_LLD_SetTx_Rx_Phy+0x38>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	79fa      	ldrb	r2, [r7, #7]
 8006dd0:	709a      	strb	r2, [r3, #2]
  params->phy.txPhy = txPhy;
 8006dd2:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <BLE_LLD_SetTx_Rx_Phy+0x38>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	79ba      	ldrb	r2, [r7, #6]
 8006dd8:	701a      	strb	r2, [r3, #0]
  params->phy.rxPhy = rxPhy;
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <BLE_LLD_SetTx_Rx_Phy+0x38>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	797a      	ldrb	r2, [r7, #5]
 8006de0:	705a      	strb	r2, [r3, #1]
  sendCommand(BLE_LLD_SETTX_RX_PHY_CMDCODE);
 8006de2:	2006      	movs	r0, #6
 8006de4:	f000 f8f8 	bl	8006fd8 <sendCommand>
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000368 	.word	0x20000368

08006df4 <BLE_LLD_SetReservedArea>:
 * This function must be called after the relevant ActionPacket fields are set.
 *
 * @param[in] p Action packet to prepare, memory lifetime must extend until response processing
 */
void BLE_LLD_SetReservedArea(ActionPacket *p)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  actionPackets[p->actionPacketNb] = p;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7f9b      	ldrb	r3, [r3, #30]
 8006e00:	4619      	mov	r1, r3
 8006e02:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <BLE_LLD_SetReservedArea+0xc0>)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  actionPackets[p->actionPacketNb]->callback = p->callback;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7f9b      	ldrb	r3, [r3, #30]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <BLE_LLD_SetReservedArea+0xc0>)
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6a12      	ldr	r2, [r2, #32]
 8006e1a:	621a      	str	r2, [r3, #32]

  params->reserved.stateMachineNo = p->StateMachineNo;
 8006e1c:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7812      	ldrb	r2, [r2, #0]
 8006e24:	729a      	strb	r2, [r3, #10]
  params->reserved.nextTrue = p->nextTrue;
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	7f12      	ldrb	r2, [r2, #28]
 8006e2e:	721a      	strb	r2, [r3, #8]
  params->reserved.nextFalse = p->nextFalse;
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	7f52      	ldrb	r2, [r2, #29]
 8006e38:	725a      	strb	r2, [r3, #9]
  params->reserved.wakeupTime = p->WakeupTime;
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6852      	ldr	r2, [r2, #4]
 8006e42:	601a      	str	r2, [r3, #0]
  params->reserved.receiveWindowLength = p->ReceiveWindowLength;
 8006e44:	4b1c      	ldr	r3, [pc, #112]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6892      	ldr	r2, [r2, #8]
 8006e4c:	605a      	str	r2, [r3, #4]
  params->reserved.actionPacketNb = p->actionPacketNb;
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	7f92      	ldrb	r2, [r2, #30]
 8006e56:	731a      	strb	r2, [r3, #12]
  params->reserved.actionTag = p->ActionTag;
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	7852      	ldrb	r2, [r2, #1]
 8006e60:	72da      	strb	r2, [r3, #11]
  if(params->reserved.actionTag & TXRX) {
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	7adb      	ldrb	r3, [r3, #11]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d013      	beq.n	8006e98 <BLE_LLD_SetReservedArea+0xa4>
    params->reserved.buffer = txBuffer;
 8006e70:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a11      	ldr	r2, [pc, #68]	; (8006ebc <BLE_LLD_SetReservedArea+0xc8>)
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	f8c3 200d 	str.w	r2, [r3, #13]
    BLE_LLD_packetPrepareCopy(txBuffer, p->data, p->dataSize, encryptStatus[p->StateMachineNo]);
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <BLE_LLD_SetReservedArea+0xc8>)
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68d9      	ldr	r1, [r3, #12]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7c1a      	ldrb	r2, [r3, #16]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	461c      	mov	r4, r3
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <BLE_LLD_SetReservedArea+0xcc>)
 8006e90:	5d1b      	ldrb	r3, [r3, r4]
 8006e92:	f000 f911 	bl	80070b8 <BLE_LLD_packetPrepareCopy>
 8006e96:	e005      	b.n	8006ea4 <BLE_LLD_SetReservedArea+0xb0>
  }else{
    params->reserved.buffer = rxBuffer;
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <BLE_LLD_SetReservedArea+0xc4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <BLE_LLD_SetReservedArea+0xd0>)
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	f8c3 200d 	str.w	r2, [r3, #13]
  }
  sendCommand(BLE_LLD_SETRESERVEDAREA_CMDCODE);
 8006ea4:	200e      	movs	r0, #14
 8006ea6:	f000 f897 	bl	8006fd8 <sendCommand>
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd90      	pop	{r4, r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000338 	.word	0x20000338
 8006eb8:	20000368 	.word	0x20000368
 8006ebc:	2000036c 	.word	0x2000036c
 8006ec0:	20000358 	.word	0x20000358
 8006ec4:	20000370 	.word	0x20000370

08006ec8 <BLE_LLD_MakeActionPacketPending>:
 *
 * @retval SUCCESS_0 if success
 * @retval RADIO_BUSY_C4 if radio is busy
 */
uint8_t BLE_LLD_MakeActionPacketPending(const ActionPacket *p)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  params->pending.actionPacketNb = p->actionPacketNb;
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <BLE_LLD_MakeActionPacketPending+0x24>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	7f92      	ldrb	r2, [r2, #30]
 8006ed8:	701a      	strb	r2, [r3, #0]
  return(sendCommand(BLE_LLD_MAKEACTIONPACKETPENDING_CMDCODE));
 8006eda:	200f      	movs	r0, #15
 8006edc:	f000 f87c 	bl	8006fd8 <sendCommand>
 8006ee0:	4603      	mov	r3, r0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000368 	.word	0x20000368

08006ef0 <BLE_LLD_StopActivity>:
 * This function returns when radio is ready to be initialized.
 *
 * @retval true
 */
uint8_t BLE_LLD_StopActivity(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  return(sendCommand(BLE_LLD_STOPACTIVITY_CMDCODE));
 8006ef4:	2007      	movs	r0, #7
 8006ef6:	f000 f86f 	bl	8006fd8 <sendCommand>
 8006efa:	4603      	mov	r3, r0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <BLE_LLD_PRX_EventProcessInter>:
 *
 * @param[in] event Radio core event type
 *
 */
void BLE_LLD_PRX_EventProcessInter(radioEventType event)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
  // Action packet for which the event is coming back
  ActionPacket *ap = actionPackets[params->reply.actionPacketNb];
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <BLE_LLD_PRX_EventProcessInter+0x54>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	7b1b      	ldrb	r3, [r3, #12]
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <BLE_LLD_PRX_EventProcessInter+0x58>)
 8006f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f18:	60fb      	str	r3, [r7, #12]
  radioEvent = event;
 8006f1a:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <BLE_LLD_PRX_EventProcessInter+0x5c>)
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	7013      	strb	r3, [r2, #0]
  radioEventAp = ap;
 8006f20:	4a0f      	ldr	r2, [pc, #60]	; (8006f60 <BLE_LLD_PRX_EventProcessInter+0x60>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6013      	str	r3, [r2, #0]
  ap->status = params->reply.status;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <BLE_LLD_PRX_EventProcessInter+0x54>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	615a      	str	r2, [r3, #20]
  if (RADIO_IS_RX_OK(event)){
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d002      	beq.n	8006f3c <BLE_LLD_PRX_EventProcessInter+0x3c>
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	2b06      	cmp	r3, #6
 8006f3a:	d105      	bne.n	8006f48 <BLE_LLD_PRX_EventProcessInter+0x48>
    ap->rssi = params->reply.rssi;
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <BLE_LLD_PRX_EventProcessInter+0x54>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	619a      	str	r2, [r3, #24]
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	20000368 	.word	0x20000368
 8006f58:	20000338 	.word	0x20000338
 8006f5c:	20000360 	.word	0x20000360
 8006f60:	20000364 	.word	0x20000364

08006f64 <BLE_LLD_PRX_EventProcessTask>:
 * received from radio core, i.e. in a task.
 * Runs the callback registered for the received event.
 *
 */
void BLE_LLD_PRX_EventProcessTask(void)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
  void *data = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	603b      	str	r3, [r7, #0]
  uint8_t size = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	71fb      	strb	r3, [r7, #7]
  const bool encrypt = encryptStatus[radioEventAp->StateMachineNo];
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <BLE_LLD_PRX_EventProcessTask+0x64>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <BLE_LLD_PRX_EventProcessTask+0x68>)
 8006f7c:	5c9b      	ldrb	r3, [r3, r2]
 8006f7e:	71bb      	strb	r3, [r7, #6]
  if (radioEventAp->callback != NULL){
 8006f80:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <BLE_LLD_PRX_EventProcessTask+0x64>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01a      	beq.n	8006fc0 <BLE_LLD_PRX_EventProcessTask+0x5c>
    if (RADIO_IS_RX_OK(radioEvent)){
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <BLE_LLD_PRX_EventProcessTask+0x6c>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d003      	beq.n	8006f9a <BLE_LLD_PRX_EventProcessTask+0x36>
 8006f92:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <BLE_LLD_PRX_EventProcessTask+0x6c>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b06      	cmp	r3, #6
 8006f98:	d108      	bne.n	8006fac <BLE_LLD_PRX_EventProcessTask+0x48>
      size = BLE_LLD_packetExtractInPlace(rxBuffer, &data, encrypt);
 8006f9a:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <BLE_LLD_PRX_EventProcessTask+0x70>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	79ba      	ldrb	r2, [r7, #6]
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f8af 	bl	8007106 <BLE_LLD_packetExtractInPlace>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	71fb      	strb	r3, [r7, #7]
    }
    radioEventAp->callback(radioEvent, radioEventAp, data, size);
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <BLE_LLD_PRX_EventProcessTask+0x64>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6a1c      	ldr	r4, [r3, #32]
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <BLE_LLD_PRX_EventProcessTask+0x6c>)
 8006fb4:	7818      	ldrb	r0, [r3, #0]
 8006fb6:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <BLE_LLD_PRX_EventProcessTask+0x64>)
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	47a0      	blx	r4
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd90      	pop	{r4, r7, pc}
 8006fc8:	20000364 	.word	0x20000364
 8006fcc:	20000358 	.word	0x20000358
 8006fd0:	20000360 	.word	0x20000360
 8006fd4:	20000370 	.word	0x20000370

08006fd8 <sendCommand>:

// Utility functions

static uint8_t sendCommand(BLE_LLD_Code_t bleCmd){
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	71fb      	strb	r3, [r7, #7]
  return CB_sendCommand(bleCmd);
 8006fe2:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <sendCommand+0x20>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	79fa      	ldrb	r2, [r7, #7]
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	4603      	mov	r3, r0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000374 	.word	0x20000374

08006ffc <eventToString>:

const char *eventToString(radioEventType evt){
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]
  switch(evt){
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	3b01      	subs	r3, #1
 800700a:	2b0b      	cmp	r3, #11
 800700c:	d832      	bhi.n	8007074 <eventToString+0x78>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <eventToString+0x18>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007045 	.word	0x08007045
 8007018:	08007049 	.word	0x08007049
 800701c:	0800704d 	.word	0x0800704d
 8007020:	08007051 	.word	0x08007051
 8007024:	08007055 	.word	0x08007055
 8007028:	08007059 	.word	0x08007059
 800702c:	0800705d 	.word	0x0800705d
 8007030:	08007061 	.word	0x08007061
 8007034:	08007065 	.word	0x08007065
 8007038:	08007069 	.word	0x08007069
 800703c:	0800706d 	.word	0x0800706d
 8007040:	08007071 	.word	0x08007071
    case TX_OK_BUSY:        return "TX_OK_BUSY";
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <eventToString+0x88>)
 8007046:	e016      	b.n	8007076 <eventToString+0x7a>
    case TX_OK_READY:       return "TX_OK_READY";
 8007048:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <eventToString+0x8c>)
 800704a:	e014      	b.n	8007076 <eventToString+0x7a>
    case TX_FAIL_BUSY:      return "TX_FAIL_BUSY";
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <eventToString+0x90>)
 800704e:	e012      	b.n	8007076 <eventToString+0x7a>
    case TX_FAIL_READY:     return "TX_FAIL_READY";
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <eventToString+0x94>)
 8007052:	e010      	b.n	8007076 <eventToString+0x7a>
    case RX_OK_BUSY:        return "RX_OK_BUSY";
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <eventToString+0x98>)
 8007056:	e00e      	b.n	8007076 <eventToString+0x7a>
    case RX_OK_READY:       return "RX_OK_READY";
 8007058:	4b0f      	ldr	r3, [pc, #60]	; (8007098 <eventToString+0x9c>)
 800705a:	e00c      	b.n	8007076 <eventToString+0x7a>
    case RX_TIMEOUT_BUSY:   return "RX_TIMEOUT_BUSY";
 800705c:	4b0f      	ldr	r3, [pc, #60]	; (800709c <eventToString+0xa0>)
 800705e:	e00a      	b.n	8007076 <eventToString+0x7a>
    case RX_TIMEOUT_READY:  return "RX_TIMEOUT_READY";
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <eventToString+0xa4>)
 8007062:	e008      	b.n	8007076 <eventToString+0x7a>
    case RX_CRC_KO_BUSY:    return "RX_CRC_KO_BUSY";
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <eventToString+0xa8>)
 8007066:	e006      	b.n	8007076 <eventToString+0x7a>
    case RX_CRC_KO_READY:   return "RX_CRC_KO_READY";
 8007068:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <eventToString+0xac>)
 800706a:	e004      	b.n	8007076 <eventToString+0x7a>
    case RX_FAIL_BUSY:      return "RX_FAIL_BUSY";
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <eventToString+0xb0>)
 800706e:	e002      	b.n	8007076 <eventToString+0x7a>
    case RX_FAIL_READY:     return "RX_FAIL_READY";
 8007070:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <eventToString+0xb4>)
 8007072:	e000      	b.n	8007076 <eventToString+0x7a>
    default:                return "ERROR: invalid event";
 8007074:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <eventToString+0xb8>)
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	0800a1f0 	.word	0x0800a1f0
 8007088:	0800a1fc 	.word	0x0800a1fc
 800708c:	0800a208 	.word	0x0800a208
 8007090:	0800a218 	.word	0x0800a218
 8007094:	0800a228 	.word	0x0800a228
 8007098:	0800a234 	.word	0x0800a234
 800709c:	0800a240 	.word	0x0800a240
 80070a0:	0800a250 	.word	0x0800a250
 80070a4:	0800a264 	.word	0x0800a264
 80070a8:	0800a274 	.word	0x0800a274
 80070ac:	0800a284 	.word	0x0800a284
 80070b0:	0800a294 	.word	0x0800a294
 80070b4:	0800a2a4 	.word	0x0800a2a4

080070b8 <BLE_LLD_packetPrepareCopy>:

uint8_t BLE_LLD_packetPrepareCopy(ipBLE_lld_txrxdata_Type *packet,
                                  const void *data,
                                  uint8_t size,
                                  bool encrypt)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4611      	mov	r1, r2
 80070c4:	461a      	mov	r2, r3
 80070c6:	460b      	mov	r3, r1
 80070c8:	71fb      	strb	r3, [r7, #7]
 80070ca:	4613      	mov	r3, r2
 80070cc:	71bb      	strb	r3, [r7, #6]
  uint32_t actual_size = size;
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	617b      	str	r3, [r7, #20]
  if (encrypt){
 80070d2:	79bb      	ldrb	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <BLE_LLD_packetPrepareCopy+0x26>
    actual_size += MIC_SIZE;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	3304      	adds	r3, #4
 80070dc:	617b      	str	r3, [r7, #20]
  }
  assert_param(actual_size <= sizeof(packet->payload));

  packet->header = LLD_HEADER;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2255      	movs	r2, #85	; 0x55
 80070e2:	701a      	strb	r2, [r3, #0]
  packet->length = actual_size;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	705a      	strb	r2, [r3, #1]
  memcpy(packet->payload, data, actual_size);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3302      	adds	r3, #2
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fca9 	bl	8008a4c <memcpy>
  return (uint8_t)actual_size; // Max value has been checked
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	b2db      	uxtb	r3, r3
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <BLE_LLD_packetExtractInPlace>:
}

uint8_t BLE_LLD_packetExtractInPlace(ipBLE_lld_txrxdata_Type *packet,
                                     void **data,
                                     bool encrypt)
{
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	4613      	mov	r3, r2
 8007112:	71fb      	strb	r3, [r7, #7]
  uint8_t actual_size = packet->length;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	785b      	ldrb	r3, [r3, #1]
 8007118:	75fb      	strb	r3, [r7, #23]
  if (encrypt){
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <BLE_LLD_packetExtractInPlace+0x20>
    actual_size -= MIC_SIZE;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	3b04      	subs	r3, #4
 8007124:	75fb      	strb	r3, [r7, #23]
  }

  *data = packet->payload;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1c9a      	adds	r2, r3, #2
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	601a      	str	r2, [r3, #0]
  return actual_size;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007130:	4618      	mov	r0, r3
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007142:	f3ef 8310 	mrs	r3, PRIMASK
 8007146:	60fb      	str	r3, [r7, #12]
  return(result);
 8007148:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800714a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800714c:	b672      	cpsid	i
}
 800714e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8007150:	1cbb      	adds	r3, r7, #2
 8007152:	4619      	mov	r1, r3
 8007154:	4812      	ldr	r0, [pc, #72]	; (80071a0 <DbgTrace_TxCpltCallback+0x64>)
 8007156:	f000 fde0 	bl	8007d1a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800715a:	1cbb      	adds	r3, r7, #2
 800715c:	4619      	mov	r1, r3
 800715e:	4810      	ldr	r0, [pc, #64]	; (80071a0 <DbgTrace_TxCpltCallback+0x64>)
 8007160:	f000 fecc 	bl	8007efc <CircularQueue_Sense>
 8007164:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00c      	beq.n	8007186 <DbgTrace_TxCpltCallback+0x4a>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8007178:	887b      	ldrh	r3, [r7, #2]
 800717a:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <DbgTrace_TxCpltCallback+0x68>)
 800717c:	4619      	mov	r1, r3
 800717e:	6938      	ldr	r0, [r7, #16]
 8007180:	f7f9 fba4 	bl	80008cc <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8007184:	e008      	b.n	8007198 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8007186:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <DbgTrace_TxCpltCallback+0x6c>)
 8007188:	2201      	movs	r2, #1
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f383 8810 	msr	PRIMASK, r3
}
 8007196:	bf00      	nop
}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000378 	.word	0x20000378
 80071a4:	0800713d 	.word	0x0800713d
 80071a8:	20000029 	.word	0x20000029

080071ac <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80071b2:	f7f9 fb84 	bl	80008be <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80071b6:	2302      	movs	r3, #2
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071c0:	4903      	ldr	r1, [pc, #12]	; (80071d0 <DbgTraceInit+0x24>)
 80071c2:	4804      	ldr	r0, [pc, #16]	; (80071d4 <DbgTraceInit+0x28>)
 80071c4:	f000 fb50 	bl	8007868 <CircularQueue_Init>
#endif 
#endif
  return;
 80071c8:	bf00      	nop
}
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000398 	.word	0x20000398
 80071d4:	20000378 	.word	0x20000378

080071d8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f805 	bl	80071f8 <DbgTraceWrite>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007208:	f3ef 8310 	mrs	r3, PRIMASK
 800720c:	61bb      	str	r3, [r7, #24]
  return(result);
 800720e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8007210:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d102      	bne.n	8007220 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800721a:	2300      	movs	r3, #0
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
 800721e:	e037      	b.n	8007290 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d006      	beq.n	8007234 <DbgTraceWrite+0x3c>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d003      	beq.n	8007234 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800722c:	f04f 33ff 	mov.w	r3, #4294967295
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
 8007232:	e02d      	b.n	8007290 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d02a      	beq.n	8007290 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800723e:	b672      	cpsid	i
}
 8007240:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	b29a      	uxth	r2, r3
 8007246:	2301      	movs	r3, #1
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	4814      	ldr	r0, [pc, #80]	; (800729c <DbgTraceWrite+0xa4>)
 800724c:	f000 fb3e 	bl	80078cc <CircularQueue_Add>
 8007250:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d015      	beq.n	8007284 <DbgTraceWrite+0x8c>
 8007258:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <DbgTraceWrite+0xa8>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8007262:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <DbgTraceWrite+0xa8>)
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f383 8810 	msr	PRIMASK, r3
}
 8007272:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	b29b      	uxth	r3, r3
 8007278:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <DbgTraceWrite+0xac>)
 800727a:	4619      	mov	r1, r3
 800727c:	69f8      	ldr	r0, [r7, #28]
 800727e:	f7f9 fb25 	bl	80008cc <DbgOutputTraces>
 8007282:	e005      	b.n	8007290 <DbgTraceWrite+0x98>
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f383 8810 	msr	PRIMASK, r3
}
 800728e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007292:	4618      	mov	r0, r3
 8007294:	3728      	adds	r7, #40	; 0x28
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000378 	.word	0x20000378
 80072a0:	20000029 	.word	0x20000029
 80072a4:	0800713d 	.word	0x0800713d

080072a8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80072b2:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <OTP_Read+0x48>)
 80072b4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80072b6:	e002      	b.n	80072be <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3b08      	subs	r3, #8
 80072bc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3307      	adds	r3, #7
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	79fa      	ldrb	r2, [r7, #7]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d003      	beq.n	80072d2 <OTP_Read+0x2a>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <OTP_Read+0x4c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d1f2      	bne.n	80072b8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3307      	adds	r3, #7
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	79fa      	ldrb	r2, [r7, #7]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d001      	beq.n	80072e2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80072e2:	68fb      	ldr	r3, [r7, #12]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	1fff73f8 	.word	0x1fff73f8
 80072f4:	1fff7000 	.word	0x1fff7000

080072f8 <SHCI_C2_BLE_LLD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_LLD_Init( uint8_t param_size, uint8_t * p_param )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007304:	f107 030c 	add.w	r3, r7, #12
 8007308:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_BLE_LLD_INIT,
 800730a:	79f9      	ldrb	r1, [r7, #7]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	f64f 4074 	movw	r0, #64628	; 0xfc74
 8007314:	f000 f920 	bl	8007558 <shci_send>
             param_size,
             p_param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	330b      	adds	r3, #11
 800731c:	78db      	ldrb	r3, [r3, #3]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007328:	b480      	push	{r7}
 800732a:	b08b      	sub	sp, #44	; 0x2c
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007350:	4b4a      	ldr	r3, [pc, #296]	; (800747c <SHCI_GetWirelessFwInfo+0x154>)
 8007352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007354:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007358:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007362:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a44      	ldr	r2, [pc, #272]	; (8007480 <SHCI_GetWirelessFwInfo+0x158>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d10f      	bne.n	8007394 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e01a      	b.n	80073ca <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800739c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80073a0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	0e1b      	lsrs	r3, r3, #24
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	0c1b      	lsrs	r3, r3, #16
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	0a1b      	lsrs	r3, r3, #8
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	091b      	lsrs	r3, r3, #4
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	b2da      	uxtb	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	0e1b      	lsrs	r3, r3, #24
 800740a:	b2da      	uxtb	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	0c1b      	lsrs	r3, r3, #16
 8007414:	b2da      	uxtb	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	b2da      	uxtb	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	0e1b      	lsrs	r3, r3, #24
 8007438:	b2da      	uxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	b2da      	uxtb	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	b2da      	uxtb	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	0e1b      	lsrs	r3, r3, #24
 8007456:	b2da      	uxtb	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	0c1b      	lsrs	r3, r3, #16
 8007460:	b2da      	uxtb	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	372c      	adds	r7, #44	; 0x2c
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	58004000 	.word	0x58004000
 8007480:	a94656b9 	.word	0xa94656b9

08007484 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4a08      	ldr	r2, [pc, #32]	; (80074b4 <shci_init+0x30>)
 8007494:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007496:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <shci_init+0x34>)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800749c:	4806      	ldr	r0, [pc, #24]	; (80074b8 <shci_init+0x34>)
 800749e:	f000 f911 	bl	80076c4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f894 	bl	80075d4 <TlInit>

  return;
 80074ac:	bf00      	nop
}
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	200013b8 	.word	0x200013b8
 80074b8:	20001398 	.word	0x20001398

080074bc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80074c2:	4822      	ldr	r0, [pc, #136]	; (800754c <shci_user_evt_proc+0x90>)
 80074c4:	f000 f922 	bl	800770c <LST_is_empty>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d12b      	bne.n	8007526 <shci_user_evt_proc+0x6a>
 80074ce:	4b20      	ldr	r3, [pc, #128]	; (8007550 <shci_user_evt_proc+0x94>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d027      	beq.n	8007526 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80074d6:	f107 030c 	add.w	r3, r7, #12
 80074da:	4619      	mov	r1, r3
 80074dc:	481b      	ldr	r0, [pc, #108]	; (800754c <shci_user_evt_proc+0x90>)
 80074de:	f000 f9a4 	bl	800782a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <shci_user_evt_proc+0x98>)
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80074ee:	2301      	movs	r3, #1
 80074f0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80074f2:	4b18      	ldr	r3, [pc, #96]	; (8007554 <shci_user_evt_proc+0x98>)
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	1d3a      	adds	r2, r7, #4
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80074fc:	793a      	ldrb	r2, [r7, #4]
 80074fe:	4b14      	ldr	r3, [pc, #80]	; (8007550 <shci_user_evt_proc+0x94>)
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e002      	b.n	800750a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007504:	4b12      	ldr	r3, [pc, #72]	; (8007550 <shci_user_evt_proc+0x94>)
 8007506:	2201      	movs	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <shci_user_evt_proc+0x94>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4618      	mov	r0, r3
 8007516:	f000 ff27 	bl	8008368 <TL_MM_EvtDone>
 800751a:	e004      	b.n	8007526 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4619      	mov	r1, r3
 8007520:	480a      	ldr	r0, [pc, #40]	; (800754c <shci_user_evt_proc+0x90>)
 8007522:	f000 f915 	bl	8007750 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007526:	4809      	ldr	r0, [pc, #36]	; (800754c <shci_user_evt_proc+0x90>)
 8007528:	f000 f8f0 	bl	800770c <LST_is_empty>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d107      	bne.n	8007542 <shci_user_evt_proc+0x86>
 8007532:	4b07      	ldr	r3, [pc, #28]	; (8007550 <shci_user_evt_proc+0x94>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800753a:	4804      	ldr	r0, [pc, #16]	; (800754c <shci_user_evt_proc+0x90>)
 800753c:	f7f9 f988 	bl	8000850 <shci_notify_asynch_evt>
  }


  return;
 8007540:	bf00      	nop
 8007542:	bf00      	nop
}
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000098 	.word	0x20000098
 8007550:	200000a8 	.word	0x200000a8
 8007554:	20001398 	.word	0x20001398

08007558 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60ba      	str	r2, [r7, #8]
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	4603      	mov	r3, r0
 8007564:	81fb      	strh	r3, [r7, #14]
 8007566:	460b      	mov	r3, r1
 8007568:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800756a:	2000      	movs	r0, #0
 800756c:	f000 f864 	bl	8007638 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007570:	4b16      	ldr	r3, [pc, #88]	; (80075cc <shci_send+0x74>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	89fa      	ldrh	r2, [r7, #14]
 8007576:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800757a:	4b14      	ldr	r3, [pc, #80]	; (80075cc <shci_send+0x74>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	7b7a      	ldrb	r2, [r7, #13]
 8007580:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <shci_send+0x74>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	7b7a      	ldrb	r2, [r7, #13]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	4618      	mov	r0, r3
 800758e:	f001 fa5d 	bl	8008a4c <memcpy>

  shciContext.io.Send(0,0);
 8007592:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <shci_send+0x78>)
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2100      	movs	r1, #0
 8007598:	2000      	movs	r0, #0
 800759a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800759c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80075a0:	f7f9 f96d 	bl	800087e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f103 0008 	add.w	r0, r3, #8
 80075aa:	4b08      	ldr	r3, [pc, #32]	; (80075cc <shci_send+0x74>)
 80075ac:	6819      	ldr	r1, [r3, #0]
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <shci_send+0x74>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	789b      	ldrb	r3, [r3, #2]
 80075b4:	3303      	adds	r3, #3
 80075b6:	461a      	mov	r2, r3
 80075b8:	f001 fa48 	bl	8008a4c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80075bc:	2001      	movs	r0, #1
 80075be:	f000 f83b 	bl	8007638 <Cmd_SetStatus>

  return;
 80075c2:	bf00      	nop
}
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	200000a4 	.word	0x200000a4
 80075d0:	20001398 	.word	0x20001398

080075d4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80075dc:	4a10      	ldr	r2, [pc, #64]	; (8007620 <TlInit+0x4c>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80075e2:	4810      	ldr	r0, [pc, #64]	; (8007624 <TlInit+0x50>)
 80075e4:	f000 f882 	bl	80076ec <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80075e8:	2001      	movs	r0, #1
 80075ea:	f000 f825 	bl	8007638 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80075ee:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <TlInit+0x54>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80075f4:	4b0d      	ldr	r3, [pc, #52]	; (800762c <TlInit+0x58>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00c      	beq.n	8007616 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <TlInit+0x5c>)
 8007602:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <TlInit+0x60>)
 8007606:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007608:	4b08      	ldr	r3, [pc, #32]	; (800762c <TlInit+0x58>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f107 020c 	add.w	r2, r7, #12
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
  }

  return;
 8007614:	bf00      	nop
 8007616:	bf00      	nop
}
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200000a4 	.word	0x200000a4
 8007624:	20000098 	.word	0x20000098
 8007628:	200000a8 	.word	0x200000a8
 800762c:	20001398 	.word	0x20001398
 8007630:	08007689 	.word	0x08007689
 8007634:	080076a1 	.word	0x080076a1

08007638 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007648:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <Cmd_SetStatus+0x48>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <Cmd_SetStatus+0x48>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2000      	movs	r0, #0
 8007656:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <Cmd_SetStatus+0x4c>)
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800765e:	e00b      	b.n	8007678 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <Cmd_SetStatus+0x4c>)
 8007662:	2201      	movs	r2, #1
 8007664:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <Cmd_SetStatus+0x48>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800766e:	4b04      	ldr	r3, [pc, #16]	; (8007680 <Cmd_SetStatus+0x48>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2001      	movs	r0, #1
 8007674:	4798      	blx	r3
  return;
 8007676:	bf00      	nop
 8007678:	bf00      	nop
}
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200013b8 	.word	0x200013b8
 8007684:	200000a0 	.word	0x200000a0

08007688 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007690:	2000      	movs	r0, #0
 8007692:	f7f9 f8e9 	bl	8000868 <shci_cmd_resp_release>

  return;
 8007696:	bf00      	nop
}
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4805      	ldr	r0, [pc, #20]	; (80076c0 <TlUserEvtReceived+0x20>)
 80076ac:	f000 f876 	bl	800779c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80076b0:	4803      	ldr	r0, [pc, #12]	; (80076c0 <TlUserEvtReceived+0x20>)
 80076b2:	f7f9 f8cd 	bl	8000850 <shci_notify_asynch_evt>

  return;
 80076b6:	bf00      	nop
}
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000098 	.word	0x20000098

080076c4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <shci_register_io_bus+0x20>)
 80076d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a04      	ldr	r2, [pc, #16]	; (80076e8 <shci_register_io_bus+0x24>)
 80076d6:	611a      	str	r2, [r3, #16]

  return;
 80076d8:	bf00      	nop
}
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	08008161 	.word	0x08008161
 80076e8:	080081b5 	.word	0x080081b5

080076ec <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	605a      	str	r2, [r3, #4]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007714:	f3ef 8310 	mrs	r3, PRIMASK
 8007718:	60fb      	str	r3, [r7, #12]
  return(result);
 800771a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800771c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800771e:	b672      	cpsid	i
}
 8007720:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	d102      	bne.n	8007732 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
 8007730:	e001      	b.n	8007736 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f383 8810 	msr	PRIMASK, r3
}
 8007740:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
}
 8007744:	4618      	mov	r0, r3
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775a:	f3ef 8310 	mrs	r3, PRIMASK
 800775e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007760:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007764:	b672      	cpsid	i
}
 8007766:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	605a      	str	r2, [r3, #4]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f383 8810 	msr	PRIMASK, r3
}
 800778e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a6:	f3ef 8310 	mrs	r3, PRIMASK
 80077aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80077ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80077ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80077b0:	b672      	cpsid	i
}
 80077b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f383 8810 	msr	PRIMASK, r3
}
 80077da:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80077dc:	bf00      	nop
 80077de:	371c      	adds	r7, #28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f0:	f3ef 8310 	mrs	r3, PRIMASK
 80077f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80077f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80077f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80077fa:	b672      	cpsid	i
}
 80077fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6852      	ldr	r2, [r2, #4]
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f383 8810 	msr	PRIMASK, r3
}
 800781c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b086      	sub	sp, #24
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007834:	f3ef 8310 	mrs	r3, PRIMASK
 8007838:	60fb      	str	r3, [r7, #12]
  return(result);
 800783a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800783c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800783e:	b672      	cpsid	i
}
 8007840:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff ffca 	bl	80077e8 <LST_remove_node>
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f383 8810 	msr	PRIMASK, r3
}
 800785e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007860:	bf00      	nop
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	887a      	ldrh	r2, [r7, #2]
 800789e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	7e3a      	ldrb	r2, [r7, #24]
 80078a4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80078a6:	7e3b      	ldrb	r3, [r7, #24]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d006      	beq.n	80078be <CircularQueue_Init+0x56>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	891b      	ldrh	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80078b8:	f04f 33ff 	mov.w	r3, #4294967295
 80078bc:	e000      	b.n	80078c0 <CircularQueue_Init+0x58>
  }
  return 0;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08e      	sub	sp, #56	; 0x38
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	4613      	mov	r3, r2
 80078da:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80078dc:	2300      	movs	r3, #0
 80078de:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80078e0:	2300      	movs	r3, #0
 80078e2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 80078e4:	2300      	movs	r3, #0
 80078e6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80078e8:	2300      	movs	r3, #0
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ec:	2300      	movs	r3, #0
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80078f0:	2300      	movs	r3, #0
 80078f2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80078f4:	2300      	movs	r3, #0
 80078f6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	891b      	ldrh	r3, [r3, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <CircularQueue_Add+0x38>
 8007900:	2302      	movs	r3, #2
 8007902:	e000      	b.n	8007906 <CircularQueue_Add+0x3a>
 8007904:	2300      	movs	r3, #0
 8007906:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d02a      	beq.n	8007966 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	891b      	ldrh	r3, [r3, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d123      	bne.n	8007960 <CircularQueue_Add+0x94>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	4413      	add	r3, r2
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	1c58      	adds	r0, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	4298      	cmp	r0, r3
 8007936:	d306      	bcc.n	8007946 <CircularQueue_Add+0x7a>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6918      	ldr	r0, [r3, #16]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	1ac3      	subs	r3, r0, r3
 8007942:	3301      	adds	r3, #1
 8007944:	e002      	b.n	800794c <CircularQueue_Add+0x80>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	3301      	adds	r3, #1
 800794c:	440b      	add	r3, r1
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	b29b      	uxth	r3, r3
 8007956:	4413      	add	r3, r2
 8007958:	b29b      	uxth	r3, r3
 800795a:	3302      	adds	r3, #2
 800795c:	b29b      	uxth	r3, r3
 800795e:	e001      	b.n	8007964 <CircularQueue_Add+0x98>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	891b      	ldrh	r3, [r3, #8]
 8007964:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	891b      	ldrh	r3, [r3, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	891b      	ldrh	r3, [r3, #8]
 8007972:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	429a      	cmp	r2, r3
 800797e:	d307      	bcc.n	8007990 <CircularQueue_Add+0xc4>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6919      	ldr	r1, [r3, #16]
 8007988:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800798a:	440b      	add	r3, r1
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	e000      	b.n	8007992 <CircularQueue_Add+0xc6>
 8007990:	2300      	movs	r3, #0
 8007992:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	7ffb      	ldrb	r3, [r7, #31]
 8007998:	4413      	add	r3, r2
 800799a:	461a      	mov	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	fb03 f302 	mul.w	r3, r3, r2
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d80b      	bhi.n	80079c0 <CircularQueue_Add+0xf4>
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	7ffb      	ldrb	r3, [r7, #31]
 80079ac:	4413      	add	r3, r2
 80079ae:	461a      	mov	r2, r3
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80079b6:	fb02 f201 	mul.w	r2, r2, r1
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	e000      	b.n	80079c2 <CircularQueue_Add+0xf6>
 80079c0:	2300      	movs	r3, #0
 80079c2:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80079c4:	7dfa      	ldrb	r2, [r7, #23]
 80079c6:	7ffb      	ldrb	r3, [r7, #31]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	bf8c      	ite	hi
 80079cc:	2301      	movhi	r3, #1
 80079ce:	2300      	movls	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80079d4:	7fbb      	ldrb	r3, [r7, #30]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <CircularQueue_Add+0x120>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	7f1b      	ldrb	r3, [r3, #28]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <CircularQueue_Add+0x120>
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	e000      	b.n	80079ee <CircularQueue_Add+0x122>
 80079ec:	8bbb      	ldrh	r3, [r7, #28]
 80079ee:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80079f0:	7fbb      	ldrb	r3, [r7, #30]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <CircularQueue_Add+0x13c>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	7f1b      	ldrb	r3, [r3, #28]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <CircularQueue_Add+0x13c>
 8007a02:	7ffb      	ldrb	r3, [r7, #31]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	e000      	b.n	8007a0a <CircularQueue_Add+0x13e>
 8007a08:	8bbb      	ldrh	r3, [r7, #28]
 8007a0a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 817e 	beq.w	8007d10 <CircularQueue_Add+0x444>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	695a      	ldr	r2, [r3, #20]
 8007a18:	88f9      	ldrh	r1, [r7, #6]
 8007a1a:	7ffb      	ldrb	r3, [r7, #31]
 8007a1c:	440b      	add	r3, r1
 8007a1e:	4619      	mov	r1, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	fb03 f301 	mul.w	r3, r3, r1
 8007a26:	441a      	add	r2, r3
 8007a28:	8bbb      	ldrh	r3, [r7, #28]
 8007a2a:	441a      	add	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	f200 816d 	bhi.w	8007d10 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8007a36:	2300      	movs	r3, #0
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a3a:	e14a      	b.n	8007cd2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a42:	441a      	add	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d307      	bcc.n	8007a5c <CircularQueue_Add+0x190>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	e003      	b.n	8007a64 <CircularQueue_Add+0x198>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a62:	4413      	add	r3, r2
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	891b      	ldrh	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d130      	bne.n	8007ad8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	1c59      	adds	r1, r3, #1
 8007a7e:	6339      	str	r1, [r7, #48]	; 0x30
 8007a80:	4413      	add	r3, r2
 8007a82:	88fa      	ldrh	r2, [r7, #6]
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d304      	bcc.n	8007a9c <CircularQueue_Add+0x1d0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	e000      	b.n	8007a9e <CircularQueue_Add+0x1d2>
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	b298      	uxth	r0, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	1c59      	adds	r1, r3, #1
 8007aae:	6339      	str	r1, [r7, #48]	; 0x30
 8007ab0:	4413      	add	r3, r2
 8007ab2:	b2c2      	uxtb	r2, r0
 8007ab4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d304      	bcc.n	8007aca <CircularQueue_Add+0x1fe>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	e000      	b.n	8007acc <CircularQueue_Add+0x200>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8007ad8:	88fa      	ldrh	r2, [r7, #6]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6859      	ldr	r1, [r3, #4]
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	1acb      	subs	r3, r1, r3
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	bf28      	it	cs
 8007ae6:	4613      	movcs	r3, r2
 8007ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d007      	beq.n	8007b02 <CircularQueue_Add+0x236>
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d225      	bcs.n	8007b46 <CircularQueue_Add+0x27a>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	7f1b      	ldrb	r3, [r3, #28]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d121      	bne.n	8007b46 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	18d0      	adds	r0, r2, r3
 8007b0a:	88fb      	ldrh	r3, [r7, #6]
 8007b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	4413      	add	r3, r2
 8007b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b18:	4619      	mov	r1, r3
 8007b1a:	f000 ff97 	bl	8008a4c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	441a      	add	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8007b32:	88fa      	ldrh	r2, [r7, #6]
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8007b3a:	7ffb      	ldrb	r3, [r7, #31]
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	4413      	add	r3, r2
 8007b42:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007b44:	e0a4      	b.n	8007c90 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80a1 	beq.w	8007c90 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7f1b      	ldrb	r3, [r3, #28]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d03a      	beq.n	8007bd0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	891b      	ldrh	r3, [r3, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10d      	bne.n	8007b7e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	3b02      	subs	r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	22ff      	movs	r2, #255	; 0xff
 8007b6e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	3b01      	subs	r3, #1
 8007b78:	4413      	add	r3, r2
 8007b7a:	22ff      	movs	r2, #255	; 0xff
 8007b7c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	441a      	add	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8007b92:	2300      	movs	r3, #0
 8007b94:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	891b      	ldrh	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d16f      	bne.n	8007c7e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	1c59      	adds	r1, r3, #1
 8007ba6:	6339      	str	r1, [r7, #48]	; 0x30
 8007ba8:	4413      	add	r3, r2
 8007baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	0a18      	lsrs	r0, r3, #8
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	1c59      	adds	r1, r3, #1
 8007bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8007bbe:	4413      	add	r3, r2
 8007bc0:	b2c2      	uxtb	r2, r0
 8007bc2:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	1c9a      	adds	r2, r3, #2
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	615a      	str	r2, [r3, #20]
 8007bce:	e056      	b.n	8007c7e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	7f1b      	ldrb	r3, [r3, #28]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d050      	beq.n	8007c7e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	891b      	ldrh	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d14a      	bne.n	8007c7a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	3b02      	subs	r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	0a19      	lsrs	r1, r3, #8
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	4413      	add	r3, r2
 8007c02:	b2ca      	uxtb	r2, r1
 8007c04:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	18d0      	adds	r0, r2, r3
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f000 ff15 	bl	8008a4c <memcpy>
             q->byteCount += NbBytesToCopy; 
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	695a      	ldr	r2, [r3, #20]
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8007c44:	2300      	movs	r3, #0
 8007c46:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	1c59      	adds	r1, r3, #1
 8007c50:	6339      	str	r1, [r7, #48]	; 0x30
 8007c52:	4413      	add	r3, r2
 8007c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	0a18      	lsrs	r0, r3, #8
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	1c59      	adds	r1, r3, #1
 8007c66:	6339      	str	r1, [r7, #48]	; 0x30
 8007c68:	4413      	add	r3, r2
 8007c6a:	b2c2      	uxtb	r2, r0
 8007c6c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	1c9a      	adds	r2, r3, #2
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	615a      	str	r2, [r3, #20]
 8007c78:	e001      	b.n	8007c7e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e049      	b.n	8007d12 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8007c7e:	7ffb      	ldrb	r3, [r7, #31]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4413      	add	r3, r2
 8007c88:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d015      	beq.n	8007cc2 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	18d0      	adds	r0, r2, r3
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ca2:	fb02 f203 	mul.w	r2, r2, r3
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	4413      	add	r3, r2
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	4413      	add	r3, r2
 8007cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f000 fecb 	bl	8008a4c <memcpy>
        q->byteCount += NbBytesToCopy;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	695a      	ldr	r2, [r3, #20]
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	3301      	adds	r3, #1
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	f4ff aeb0 	bcc.w	8007a3c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6919      	ldr	r1, [r3, #16]
 8007ce4:	7ffb      	ldrb	r3, [r7, #31]
 8007ce6:	4419      	add	r1, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	4299      	cmp	r1, r3
 8007cee:	d307      	bcc.n	8007d00 <CircularQueue_Add+0x434>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6919      	ldr	r1, [r3, #16]
 8007cf4:	7ffb      	ldrb	r3, [r7, #31]
 8007cf6:	4419      	add	r1, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	1acb      	subs	r3, r1, r3
 8007cfe:	e003      	b.n	8007d08 <CircularQueue_Add+0x43c>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6919      	ldr	r1, [r3, #16]
 8007d04:	7ffb      	ldrb	r3, [r7, #31]
 8007d06:	440b      	add	r3, r1
 8007d08:	4413      	add	r3, r2
 8007d0a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	e000      	b.n	8007d12 <CircularQueue_Add+0x446>
    return NULL;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3738      	adds	r7, #56	; 0x38
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	891b      	ldrh	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <CircularQueue_Remove+0x1e>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e000      	b.n	8007d3a <CircularQueue_Remove+0x20>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80cc 	beq.w	8007ee2 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	891b      	ldrh	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d121      	bne.n	8007d96 <CircularQueue_Remove+0x7c>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	1c58      	adds	r0, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	4298      	cmp	r0, r3
 8007d70:	d306      	bcc.n	8007d80 <CircularQueue_Remove+0x66>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68d8      	ldr	r0, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	1ac3      	subs	r3, r0, r3
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	e002      	b.n	8007d86 <CircularQueue_Remove+0x6c>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	3301      	adds	r3, #1
 8007d86:	440b      	add	r3, r1
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4413      	add	r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	e001      	b.n	8007d9a <CircularQueue_Remove+0x80>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	891b      	ldrh	r3, [r3, #8]
 8007d9a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7f1b      	ldrb	r3, [r3, #28]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d057      	beq.n	8007e58 <CircularQueue_Remove+0x13e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	7f1b      	ldrb	r3, [r3, #28]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d151      	bne.n	8007e58 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007db4:	897b      	ldrh	r3, [r7, #10]
 8007db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d103      	bne.n	8007dc6 <CircularQueue_Remove+0xac>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d012      	beq.n	8007dec <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d942      	bls.n	8007e58 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	891b      	ldrh	r3, [r3, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d03e      	beq.n	8007e58 <CircularQueue_Remove+0x13e>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	8912      	ldrh	r2, [r2, #8]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d235      	bcs.n	8007e58 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	695a      	ldr	r2, [r3, #20]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68d9      	ldr	r1, [r3, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	1acb      	subs	r3, r1, r3
 8007dfa:	441a      	add	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	891b      	ldrh	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d121      	bne.n	8007e52 <CircularQueue_Remove+0x138>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	1c58      	adds	r0, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	4298      	cmp	r0, r3
 8007e2c:	d306      	bcc.n	8007e3c <CircularQueue_Remove+0x122>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68d8      	ldr	r0, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	1ac3      	subs	r3, r0, r3
 8007e38:	3301      	adds	r3, #1
 8007e3a:	e002      	b.n	8007e42 <CircularQueue_Remove+0x128>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	440b      	add	r3, r1
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	4413      	add	r3, r2
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	e001      	b.n	8007e56 <CircularQueue_Remove+0x13c>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	891b      	ldrh	r3, [r3, #8]
 8007e56:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68d9      	ldr	r1, [r3, #12]
 8007e60:	7a7b      	ldrb	r3, [r7, #9]
 8007e62:	4419      	add	r1, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4299      	cmp	r1, r3
 8007e6a:	d307      	bcc.n	8007e7c <CircularQueue_Remove+0x162>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68d9      	ldr	r1, [r3, #12]
 8007e70:	7a7b      	ldrb	r3, [r7, #9]
 8007e72:	4419      	add	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	1acb      	subs	r3, r1, r3
 8007e7a:	e003      	b.n	8007e84 <CircularQueue_Remove+0x16a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68d9      	ldr	r1, [r3, #12]
 8007e80:	7a7b      	ldrb	r3, [r7, #9]
 8007e82:	440b      	add	r3, r1
 8007e84:	4413      	add	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	8979      	ldrh	r1, [r7, #10]
 8007e8e:	7a7a      	ldrb	r2, [r7, #9]
 8007e90:	440a      	add	r2, r1
 8007e92:	1a9a      	subs	r2, r3, r2
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01b      	beq.n	8007ed8 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	897b      	ldrh	r3, [r7, #10]
 8007ea6:	441a      	add	r2, r3
 8007ea8:	7a7b      	ldrb	r3, [r7, #9]
 8007eaa:	441a      	add	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d309      	bcc.n	8007ec8 <CircularQueue_Remove+0x1ae>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	897b      	ldrh	r3, [r7, #10]
 8007eba:	441a      	add	r2, r3
 8007ebc:	7a7b      	ldrb	r3, [r7, #9]
 8007ebe:	441a      	add	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	e005      	b.n	8007ed4 <CircularQueue_Remove+0x1ba>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	897b      	ldrh	r3, [r7, #10]
 8007ece:	441a      	add	r2, r3
 8007ed0:	7a7b      	ldrb	r3, [r7, #9]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	1e5a      	subs	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	897a      	ldrh	r2, [r7, #10]
 8007eec:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	891b      	ldrh	r3, [r3, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <CircularQueue_Sense+0x1e>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e000      	b.n	8007f1c <CircularQueue_Sense+0x20>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8090 	beq.w	8008050 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	891b      	ldrh	r3, [r3, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d121      	bne.n	8007f82 <CircularQueue_Sense+0x86>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	4413      	add	r3, r2
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6819      	ldr	r1, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	1c58      	adds	r0, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	4298      	cmp	r0, r3
 8007f5c:	d306      	bcc.n	8007f6c <CircularQueue_Sense+0x70>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68d8      	ldr	r0, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	1ac3      	subs	r3, r0, r3
 8007f68:	3301      	adds	r3, #1
 8007f6a:	e002      	b.n	8007f72 <CircularQueue_Sense+0x76>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	3301      	adds	r3, #1
 8007f72:	440b      	add	r3, r1
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	e001      	b.n	8007f86 <CircularQueue_Sense+0x8a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	891b      	ldrh	r3, [r3, #8]
 8007f86:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7f1b      	ldrb	r3, [r3, #28]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d048      	beq.n	8008026 <CircularQueue_Sense+0x12a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7f1b      	ldrb	r3, [r3, #28]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d142      	bne.n	8008026 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007fa0:	8a7b      	ldrh	r3, [r7, #18]
 8007fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d103      	bne.n	8007fb2 <CircularQueue_Sense+0xb6>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	891b      	ldrh	r3, [r3, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d933      	bls.n	8008026 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	891b      	ldrh	r3, [r3, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d02f      	beq.n	8008026 <CircularQueue_Sense+0x12a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	8912      	ldrh	r2, [r2, #8]
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d226      	bcs.n	8008026 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	891b      	ldrh	r3, [r3, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d11d      	bne.n	8008020 <CircularQueue_Sense+0x124>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	1c58      	adds	r0, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4298      	cmp	r0, r3
 8007ffe:	d305      	bcc.n	800800c <CircularQueue_Sense+0x110>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	1ac3      	subs	r3, r0, r3
 8008008:	3301      	adds	r3, #1
 800800a:	e001      	b.n	8008010 <CircularQueue_Sense+0x114>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3301      	adds	r3, #1
 8008010:	440b      	add	r3, r1
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	b29b      	uxth	r3, r3
 800801a:	4413      	add	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	e001      	b.n	8008024 <CircularQueue_Sense+0x128>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	891b      	ldrh	r3, [r3, #8]
 8008024:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	7af9      	ldrb	r1, [r7, #11]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4419      	add	r1, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4299      	cmp	r1, r3
 8008036:	d306      	bcc.n	8008046 <CircularQueue_Sense+0x14a>
 8008038:	7af9      	ldrb	r1, [r7, #11]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4419      	add	r1, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	1acb      	subs	r3, r1, r3
 8008044:	e002      	b.n	800804c <CircularQueue_Sense+0x150>
 8008046:	7af9      	ldrb	r1, [r7, #11]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	440b      	add	r3, r1
 800804c:	4413      	add	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	8a7a      	ldrh	r2, [r7, #18]
 800805a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800805c:	697b      	ldr	r3, [r7, #20]
}
 800805e:	4618      	mov	r0, r3
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800806a:	b580      	push	{r7, lr}
 800806c:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800806e:	f7fa f94f 	bl	8002310 <HW_IPCC_Enable>

  return;
 8008072:	bf00      	nop
}
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <TL_Init>:


void TL_Init( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <TL_Init+0x48>)
 800807e:	4a11      	ldr	r2, [pc, #68]	; (80080c4 <TL_Init+0x4c>)
 8008080:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008082:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <TL_Init+0x48>)
 8008084:	4a10      	ldr	r2, [pc, #64]	; (80080c8 <TL_Init+0x50>)
 8008086:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008088:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <TL_Init+0x48>)
 800808a:	4a10      	ldr	r2, [pc, #64]	; (80080cc <TL_Init+0x54>)
 800808c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <TL_Init+0x48>)
 8008090:	4a0f      	ldr	r2, [pc, #60]	; (80080d0 <TL_Init+0x58>)
 8008092:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <TL_Init+0x48>)
 8008096:	4a0f      	ldr	r2, [pc, #60]	; (80080d4 <TL_Init+0x5c>)
 8008098:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <TL_Init+0x48>)
 800809c:	4a0e      	ldr	r2, [pc, #56]	; (80080d8 <TL_Init+0x60>)
 800809e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <TL_Init+0x48>)
 80080a2:	4a0e      	ldr	r2, [pc, #56]	; (80080dc <TL_Init+0x64>)
 80080a4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <TL_Init+0x48>)
 80080a8:	4a0d      	ldr	r2, [pc, #52]	; (80080e0 <TL_Init+0x68>)
 80080aa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <TL_Init+0x48>)
 80080ae:	4a0d      	ldr	r2, [pc, #52]	; (80080e4 <TL_Init+0x6c>)
 80080b0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80080b2:	4b03      	ldr	r3, [pc, #12]	; (80080c0 <TL_Init+0x48>)
 80080b4:	4a0c      	ldr	r2, [pc, #48]	; (80080e8 <TL_Init+0x70>)
 80080b6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80080b8:	f7fa f93e 	bl	8002338 <HW_IPCC_Init>

  return;
 80080bc:	bf00      	nop
}
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20030000 	.word	0x20030000
 80080c4:	20030030 	.word	0x20030030
 80080c8:	20030050 	.word	0x20030050
 80080cc:	20030060 	.word	0x20030060
 80080d0:	2003006c 	.word	0x2003006c
 80080d4:	20030074 	.word	0x20030074
 80080d8:	2003007c 	.word	0x2003007c
 80080dc:	20030084 	.word	0x20030084
 80080e0:	200300a0 	.word	0x200300a0
 80080e4:	200300a4 	.word	0x200300a4
 80080e8:	200300b0 	.word	0x200300b0

080080ec <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80080f2:	e01c      	b.n	800812e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80080f4:	1d3b      	adds	r3, r7, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4812      	ldr	r0, [pc, #72]	; (8008144 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80080fa:	f7ff fb96 	bl	800782a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7a5b      	ldrb	r3, [r3, #9]
 8008102:	2b0f      	cmp	r3, #15
 8008104:	d003      	beq.n	800810e <HW_IPCC_BLE_RxEvtNot+0x22>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7a5b      	ldrb	r3, [r3, #9]
 800810a:	2b0e      	cmp	r3, #14
 800810c:	d105      	bne.n	800811a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4619      	mov	r1, r3
 8008112:	2002      	movs	r0, #2
 8008114:	f000 f98c 	bl	8008430 <OutputDbgTrace>
 8008118:	e004      	b.n	8008124 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4619      	mov	r1, r3
 800811e:	2003      	movs	r0, #3
 8008120:	f000 f986 	bl	8008430 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800812e:	4805      	ldr	r0, [pc, #20]	; (8008144 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008130:	f7ff faec 	bl	800770c <LST_is_empty>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0dc      	beq.n	80080f4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800813a:	bf00      	nop
}
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	200300cc 	.word	0x200300cc
 8008148:	200013c4 	.word	0x200013c4

0800814c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4798      	blx	r3

  return;
 8008156:	bf00      	nop
}
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	200013c8 	.word	0x200013c8

08008160 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800816c:	480d      	ldr	r0, [pc, #52]	; (80081a4 <TL_SYS_Init+0x44>)
 800816e:	f7ff fabd 	bl	80076ec <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008172:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <TL_SYS_Init+0x48>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4a08      	ldr	r2, [pc, #32]	; (80081a4 <TL_SYS_Init+0x44>)
 8008184:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008186:	f7fa f905 	bl	8002394 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a07      	ldr	r2, [pc, #28]	; (80081ac <TL_SYS_Init+0x4c>)
 8008190:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	4a06      	ldr	r2, [pc, #24]	; (80081b0 <TL_SYS_Init+0x50>)
 8008198:	6013      	str	r3, [r2, #0]

  return 0;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	200300d4 	.word	0x200300d4
 80081a8:	20030000 	.word	0x20030000
 80081ac:	200013cc 	.word	0x200013cc
 80081b0:	200013d0 	.word	0x200013d0

080081b4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <TL_SYS_SendCmd+0x34>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2210      	movs	r2, #16
 80081c8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80081ca:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <TL_SYS_SendCmd+0x34>)
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4619      	mov	r1, r3
 80081d2:	2004      	movs	r0, #4
 80081d4:	f000 f92c 	bl	8008430 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80081d8:	f7fa f8e6 	bl	80023a8 <HW_IPCC_SYS_SendCmd>

  return 0;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20030000 	.word	0x20030000

080081ec <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	2005      	movs	r0, #5
 80081fa:	f000 f919 	bl	8008430 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80081fe:	4b05      	ldr	r3, [pc, #20]	; (8008214 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a03      	ldr	r2, [pc, #12]	; (8008210 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008204:	68d2      	ldr	r2, [r2, #12]
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3

  return;
 800820c:	bf00      	nop
}
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20030000 	.word	0x20030000
 8008214:	200013cc 	.word	0x200013cc

08008218 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800821e:	e00e      	b.n	800823e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008220:	1d3b      	adds	r3, r7, #4
 8008222:	4619      	mov	r1, r3
 8008224:	480b      	ldr	r0, [pc, #44]	; (8008254 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008226:	f7ff fb00 	bl	800782a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4619      	mov	r1, r3
 800822e:	2006      	movs	r0, #6
 8008230:	f000 f8fe 	bl	8008430 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008234:	4b08      	ldr	r3, [pc, #32]	; (8008258 <HW_IPCC_SYS_EvtNot+0x40>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	4610      	mov	r0, r2
 800823c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008240:	f7ff fa64 	bl	800770c <LST_is_empty>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0ea      	beq.n	8008220 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800824a:	bf00      	nop
}
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200300d4 	.word	0x200300d4
 8008258:	200013d0 	.word	0x200013d0

0800825c <TL_BLE_LLD_Init>:
/******************************************************************************
 * BLE LLD
 ******************************************************************************/
#ifdef BLE_LLD_WB
void TL_BLE_LLD_Init( TL_BLE_LLD_Config_t *p_Config )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  MB_BleLldTable_t  * p_ble_lld_table;

  p_ble_lld_table = TL_RefTable.p_ble_lld_table;
 8008264:	4b08      	ldr	r3, [pc, #32]	; (8008288 <TL_BLE_LLD_Init+0x2c>)
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	60fb      	str	r3, [r7, #12]
  p_ble_lld_table->cmdrsp_buffer = p_Config->p_BleLldCmdRspBuffer;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	601a      	str	r2, [r3, #0]
  p_ble_lld_table->m0cmd_buffer = p_Config->p_BleLldM0CmdBuffer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_LLD_Init();
 800827a:	f7fa f8bb 	bl	80023f4 <HW_IPCC_BLE_LLD_Init>
  return;
 800827e:	bf00      	nop
}
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20030000 	.word	0x20030000

0800828c <HW_IPCC_BLE_LLD_ReceiveM0Cmd>:
  HW_IPCC_BLE_LLD_SendCliRspAck();
  return;
}

void HW_IPCC_BLE_LLD_ReceiveM0Cmd( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  TL_BLE_LLD_ReceiveM0Cmd( (TL_CmdPacket_t*)(TL_RefTable.p_ble_lld_table->m0cmd_buffer) );
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <HW_IPCC_BLE_LLD_ReceiveM0Cmd+0x14>)
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4618      	mov	r0, r3
 8008298:	f7f9 fd08 	bl	8001cac <TL_BLE_LLD_ReceiveM0Cmd>
  return;
 800829c:	bf00      	nop
}
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20030000 	.word	0x20030000

080082a4 <TL_BLE_LLD_SendM0CmdAck>:


void TL_BLE_LLD_SendM0CmdAck( void )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_LLD_SendM0CmdAck();
 80082a8:	f7fa f8b8 	bl	800241c <HW_IPCC_BLE_LLD_SendM0CmdAck>
  return;
 80082ac:	bf00      	nop
}
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <TL_BLE_LLD_SendCmd>:
__WEAK void TL_BLE_LLD_ReceiveCliRsp( TL_CmdPacket_t * Notbuffer ){};
__WEAK void TL_BLE_LLD_ReceiveM0Cmd( TL_CmdPacket_t * Notbuffer ){};

/* Transparent Mode */
void TL_BLE_LLD_SendCmd( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_ble_lld_table->cmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80082b4:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <TL_BLE_LLD_SendCmd+0x18>)
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	220a      	movs	r2, #10
 80082bc:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_LLD_SendCmd();
 80082be:	f7fa f8b7 	bl	8002430 <HW_IPCC_BLE_LLD_SendCmd>
  return;
 80082c2:	bf00      	nop
}
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20030000 	.word	0x20030000

080082cc <HW_IPCC_BLE_LLD_ReceiveRsp>:

void HW_IPCC_BLE_LLD_ReceiveRsp( void )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  TL_BLE_LLD_ReceiveRsp( (TL_CmdPacket_t*)(TL_RefTable.p_ble_lld_table->cmdrsp_buffer) );
 80082d0:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <HW_IPCC_BLE_LLD_ReceiveRsp+0x14>)
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7f9 fd22 	bl	8001d20 <TL_BLE_LLD_ReceiveRsp>
  return;
 80082dc:	bf00      	nop
}
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20030000 	.word	0x20030000

080082e4 <TL_BLE_LLD_SendRspAck>:

void TL_BLE_LLD_SendRspAck( void )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_LLD_SendRspAck();
 80082e8:	f7fa f8b8 	bl	800245c <HW_IPCC_BLE_LLD_SendRspAck>
  return;
 80082ec:	bf00      	nop
}
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80082f8:	4817      	ldr	r0, [pc, #92]	; (8008358 <TL_MM_Init+0x68>)
 80082fa:	f7ff f9f7 	bl	80076ec <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80082fe:	4817      	ldr	r0, [pc, #92]	; (800835c <TL_MM_Init+0x6c>)
 8008300:	f7ff f9f4 	bl	80076ec <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008304:	4b16      	ldr	r3, [pc, #88]	; (8008360 <TL_MM_Init+0x70>)
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	4a16      	ldr	r2, [pc, #88]	; (8008364 <TL_MM_Init+0x74>)
 800830a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800830c:	4b15      	ldr	r3, [pc, #84]	; (8008364 <TL_MM_Init+0x74>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	6892      	ldr	r2, [r2, #8]
 8008314:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <TL_MM_Init+0x74>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	68d2      	ldr	r2, [r2, #12]
 800831e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008320:	4b10      	ldr	r3, [pc, #64]	; (8008364 <TL_MM_Init+0x74>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a0c      	ldr	r2, [pc, #48]	; (8008358 <TL_MM_Init+0x68>)
 8008326:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008328:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <TL_MM_Init+0x74>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008332:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <TL_MM_Init+0x74>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6852      	ldr	r2, [r2, #4]
 800833a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800833c:	4b09      	ldr	r3, [pc, #36]	; (8008364 <TL_MM_Init+0x74>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6912      	ldr	r2, [r2, #16]
 8008344:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <TL_MM_Init+0x74>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6952      	ldr	r2, [r2, #20]
 800834e:	619a      	str	r2, [r3, #24]

  return;
 8008350:	bf00      	nop
}
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200300bc 	.word	0x200300bc
 800835c:	200013bc 	.word	0x200013bc
 8008360:	20030000 	.word	0x20030000
 8008364:	200013d4 	.word	0x200013d4

08008368 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4807      	ldr	r0, [pc, #28]	; (8008390 <TL_MM_EvtDone+0x28>)
 8008374:	f7ff fa12 	bl	800779c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	2000      	movs	r0, #0
 800837c:	f000 f858 	bl	8008430 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008380:	4804      	ldr	r0, [pc, #16]	; (8008394 <TL_MM_EvtDone+0x2c>)
 8008382:	f7fa f879 	bl	8002478 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008386:	bf00      	nop
}
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	200013bc 	.word	0x200013bc
 8008394:	08008399 	.word	0x08008399

08008398 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800839e:	e00c      	b.n	80083ba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80083a0:	1d3b      	adds	r3, r7, #4
 80083a2:	4619      	mov	r1, r3
 80083a4:	480a      	ldr	r0, [pc, #40]	; (80083d0 <SendFreeBuf+0x38>)
 80083a6:	f7ff fa40 	bl	800782a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <SendFreeBuf+0x3c>)
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff f9f1 	bl	800779c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80083ba:	4805      	ldr	r0, [pc, #20]	; (80083d0 <SendFreeBuf+0x38>)
 80083bc:	f7ff f9a6 	bl	800770c <LST_is_empty>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0ec      	beq.n	80083a0 <SendFreeBuf+0x8>
  }

  return;
 80083c6:	bf00      	nop
}
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200013bc 	.word	0x200013bc
 80083d4:	20030000 	.word	0x20030000

080083d8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80083dc:	4805      	ldr	r0, [pc, #20]	; (80083f4 <TL_TRACES_Init+0x1c>)
 80083de:	f7ff f985 	bl	80076ec <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <TL_TRACES_Init+0x20>)
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	4a03      	ldr	r2, [pc, #12]	; (80083f4 <TL_TRACES_Init+0x1c>)
 80083e8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80083ea:	f7fa f87b 	bl	80024e4 <HW_IPCC_TRACES_Init>

  return;
 80083ee:	bf00      	nop
}
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200300c4 	.word	0x200300c4
 80083f8:	20030000 	.word	0x20030000

080083fc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008402:	e008      	b.n	8008416 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008404:	1d3b      	adds	r3, r7, #4
 8008406:	4619      	mov	r1, r3
 8008408:	4808      	ldr	r0, [pc, #32]	; (800842c <HW_IPCC_TRACES_EvtNot+0x30>)
 800840a:	f7ff fa0e 	bl	800782a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4618      	mov	r0, r3
 8008412:	f7f8 fa3f 	bl	8000894 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008416:	4805      	ldr	r0, [pc, #20]	; (800842c <HW_IPCC_TRACES_EvtNot+0x30>)
 8008418:	f7ff f978 	bl	800770c <LST_is_empty>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f0      	beq.n	8008404 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008422:	bf00      	nop
}
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200300c4 	.word	0x200300c4

08008430 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b06      	cmp	r3, #6
 8008440:	d845      	bhi.n	80084ce <OutputDbgTrace+0x9e>
 8008442:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <OutputDbgTrace+0x18>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	08008465 	.word	0x08008465
 800844c:	08008489 	.word	0x08008489
 8008450:	0800848f 	.word	0x0800848f
 8008454:	080084a3 	.word	0x080084a3
 8008458:	080084af 	.word	0x080084af
 800845c:	080084b5 	.word	0x080084b5
 8008460:	080084c3 	.word	0x080084c3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	7a5b      	ldrb	r3, [r3, #9]
 800846c:	2bff      	cmp	r3, #255	; 0xff
 800846e:	d005      	beq.n	800847c <OutputDbgTrace+0x4c>
 8008470:	2bff      	cmp	r3, #255	; 0xff
 8008472:	dc05      	bgt.n	8008480 <OutputDbgTrace+0x50>
 8008474:	2b0e      	cmp	r3, #14
 8008476:	d005      	beq.n	8008484 <OutputDbgTrace+0x54>
 8008478:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800847a:	e001      	b.n	8008480 <OutputDbgTrace+0x50>
          break;
 800847c:	bf00      	nop
 800847e:	e027      	b.n	80084d0 <OutputDbgTrace+0xa0>
          break;
 8008480:	bf00      	nop
 8008482:	e025      	b.n	80084d0 <OutputDbgTrace+0xa0>
          break;
 8008484:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008486:	e023      	b.n	80084d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800848c:	e020      	b.n	80084d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	7a5b      	ldrb	r3, [r3, #9]
 8008496:	2b0e      	cmp	r3, #14
 8008498:	d001      	beq.n	800849e <OutputDbgTrace+0x6e>
 800849a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800849c:	e000      	b.n	80084a0 <OutputDbgTrace+0x70>
          break;
 800849e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084a0:	e016      	b.n	80084d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	7a5b      	ldrb	r3, [r3, #9]
 80084aa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084ac:	e010      	b.n	80084d0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80084b2:	e00d      	b.n	80084d0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	7a5b      	ldrb	r3, [r3, #9]
 80084bc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80084be:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084c0:	e006      	b.n	80084d0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	7a5b      	ldrb	r3, [r3, #9]
 80084ca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084cc:	e000      	b.n	80084d0 <OutputDbgTrace+0xa0>

    default:
      break;
 80084ce:	bf00      	nop
  }

  return;
 80084d0:	bf00      	nop
}
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <UTIL_LPM_Init+0x1c>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <UTIL_LPM_Init+0x20>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80084ec:	bf00      	nop
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	200013d8 	.word	0x200013d8
 80084fc:	200013dc 	.word	0x200013dc

08008500 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800850c:	f3ef 8310 	mrs	r3, PRIMASK
 8008510:	613b      	str	r3, [r7, #16]
  return(result);
 8008512:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008514:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008516:	b672      	cpsid	i
}
 8008518:	bf00      	nop
  
  switch( state )
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d008      	beq.n	8008532 <UTIL_LPM_SetStopMode+0x32>
 8008520:	2b01      	cmp	r3, #1
 8008522:	d10e      	bne.n	8008542 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8008524:	4b0d      	ldr	r3, [pc, #52]	; (800855c <UTIL_LPM_SetStopMode+0x5c>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4313      	orrs	r3, r2
 800852c:	4a0b      	ldr	r2, [pc, #44]	; (800855c <UTIL_LPM_SetStopMode+0x5c>)
 800852e:	6013      	str	r3, [r2, #0]
      break;
 8008530:	e008      	b.n	8008544 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	43da      	mvns	r2, r3
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <UTIL_LPM_SetStopMode+0x5c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4013      	ands	r3, r2
 800853c:	4a07      	ldr	r2, [pc, #28]	; (800855c <UTIL_LPM_SetStopMode+0x5c>)
 800853e:	6013      	str	r3, [r2, #0]
      break;
 8008540:	e000      	b.n	8008544 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8008542:	bf00      	nop
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f383 8810 	msr	PRIMASK, r3
}
 800854e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008550:	bf00      	nop
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	200013d8 	.word	0x200013d8

08008560 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800856c:	f3ef 8310 	mrs	r3, PRIMASK
 8008570:	613b      	str	r3, [r7, #16]
  return(result);
 8008572:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008576:	b672      	cpsid	i
}
 8008578:	bf00      	nop
  
  switch(state)
 800857a:	78fb      	ldrb	r3, [r7, #3]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d008      	beq.n	8008592 <UTIL_LPM_SetOffMode+0x32>
 8008580:	2b01      	cmp	r3, #1
 8008582:	d10e      	bne.n	80085a2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008584:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <UTIL_LPM_SetOffMode+0x5c>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4313      	orrs	r3, r2
 800858c:	4a0b      	ldr	r2, [pc, #44]	; (80085bc <UTIL_LPM_SetOffMode+0x5c>)
 800858e:	6013      	str	r3, [r2, #0]
      break;
 8008590:	e008      	b.n	80085a4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	43da      	mvns	r2, r3
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <UTIL_LPM_SetOffMode+0x5c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4013      	ands	r3, r2
 800859c:	4a07      	ldr	r2, [pc, #28]	; (80085bc <UTIL_LPM_SetOffMode+0x5c>)
 800859e:	6013      	str	r3, [r2, #0]
      break;
 80085a0:	e000      	b.n	80085a4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80085a2:	bf00      	nop
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f383 8810 	msr	PRIMASK, r3
}
 80085ae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	200013dc 	.word	0x200013dc

080085c0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08c      	sub	sp, #48	; 0x30
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80085c8:	4b6a      	ldr	r3, [pc, #424]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 80085ce:	4b69      	ldr	r3, [pc, #420]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4013      	ands	r3, r2
 80085d6:	4a67      	ldr	r2, [pc, #412]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 80085d8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80085da:	4b67      	ldr	r3, [pc, #412]	; (8008778 <UTIL_SEQ_Run+0x1b8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80085e0:	e086      	b.n	80086f0 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80085e6:	e002      	b.n	80085ee <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	3301      	adds	r3, #1
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80085ee:	4a63      	ldr	r2, [pc, #396]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80085f6:	4b62      	ldr	r3, [pc, #392]	; (8008780 <UTIL_SEQ_Run+0x1c0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	401a      	ands	r2, r3
 80085fc:	4b5d      	ldr	r3, [pc, #372]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4013      	ands	r3, r2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008606:	4a5d      	ldr	r2, [pc, #372]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800860e:	4b5c      	ldr	r3, [pc, #368]	; (8008780 <UTIL_SEQ_Run+0x1c0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	401a      	ands	r2, r3
 8008614:	4b57      	ldr	r3, [pc, #348]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4013      	ands	r3, r2
 800861a:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800861c:	4a57      	ldr	r2, [pc, #348]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4413      	add	r3, r2
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	4013      	ands	r3, r2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d106      	bne.n	800863c <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800862e:	4a53      	ldr	r2, [pc, #332]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	4413      	add	r3, r2
 8008636:	f04f 32ff 	mov.w	r2, #4294967295
 800863a:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800863c:	4a4f      	ldr	r2, [pc, #316]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	4413      	add	r3, r2
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	4013      	ands	r3, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f99a 	bl	8008984 <SEQ_BitPosition>
 8008650:	4603      	mov	r3, r0
 8008652:	461a      	mov	r2, r3
 8008654:	4b4b      	ldr	r3, [pc, #300]	; (8008784 <UTIL_SEQ_Run+0x1c4>)
 8008656:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008658:	4a48      	ldr	r2, [pc, #288]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4413      	add	r3, r2
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	4b48      	ldr	r3, [pc, #288]	; (8008784 <UTIL_SEQ_Run+0x1c4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2101      	movs	r1, #1
 8008668:	fa01 f303 	lsl.w	r3, r1, r3
 800866c:	43db      	mvns	r3, r3
 800866e:	401a      	ands	r2, r3
 8008670:	4942      	ldr	r1, [pc, #264]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	440b      	add	r3, r1
 8008678:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800867a:	f3ef 8310 	mrs	r3, PRIMASK
 800867e:	617b      	str	r3, [r7, #20]
  return(result);
 8008680:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008682:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008684:	b672      	cpsid	i
}
 8008686:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008688:	4b3e      	ldr	r3, [pc, #248]	; (8008784 <UTIL_SEQ_Run+0x1c4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2201      	movs	r2, #1
 800868e:	fa02 f303 	lsl.w	r3, r2, r3
 8008692:	43da      	mvns	r2, r3
 8008694:	4b38      	ldr	r3, [pc, #224]	; (8008778 <UTIL_SEQ_Run+0x1b8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4013      	ands	r3, r2
 800869a:	4a37      	ldr	r2, [pc, #220]	; (8008778 <UTIL_SEQ_Run+0x1b8>)
 800869c:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800869e:	2302      	movs	r3, #2
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086a2:	e013      	b.n	80086cc <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	3b01      	subs	r3, #1
 80086a8:	4a34      	ldr	r2, [pc, #208]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 80086aa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80086ae:	4b35      	ldr	r3, [pc, #212]	; (8008784 <UTIL_SEQ_Run+0x1c4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2201      	movs	r2, #1
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	43da      	mvns	r2, r3
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	3b01      	subs	r3, #1
 80086be:	400a      	ands	r2, r1
 80086c0:	492e      	ldr	r1, [pc, #184]	; (800877c <UTIL_SEQ_Run+0x1bc>)
 80086c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	3b01      	subs	r3, #1
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e8      	bne.n	80086a4 <UTIL_SEQ_Run+0xe4>
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f383 8810 	msr	PRIMASK, r3
}
 80086dc:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80086de:	4b29      	ldr	r3, [pc, #164]	; (8008784 <UTIL_SEQ_Run+0x1c4>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a29      	ldr	r2, [pc, #164]	; (8008788 <UTIL_SEQ_Run+0x1c8>)
 80086e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e8:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80086ea:	4b23      	ldr	r3, [pc, #140]	; (8008778 <UTIL_SEQ_Run+0x1b8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80086f0:	4b23      	ldr	r3, [pc, #140]	; (8008780 <UTIL_SEQ_Run+0x1c0>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	401a      	ands	r2, r3
 80086f8:	4b1e      	ldr	r3, [pc, #120]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4013      	ands	r3, r2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <UTIL_SEQ_Run+0x152>
 8008702:	4b22      	ldr	r3, [pc, #136]	; (800878c <UTIL_SEQ_Run+0x1cc>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	4b22      	ldr	r3, [pc, #136]	; (8008790 <UTIL_SEQ_Run+0x1d0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	f43f af68 	beq.w	80085e2 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008712:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <UTIL_SEQ_Run+0x1c4>)
 8008714:	f04f 32ff 	mov.w	r2, #4294967295
 8008718:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800871a:	f000 f925 	bl	8008968 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800871e:	f3ef 8310 	mrs	r3, PRIMASK
 8008722:	60fb      	str	r3, [r7, #12]
  return(result);
 8008724:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008726:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8008728:	b672      	cpsid	i
}
 800872a:	bf00      	nop
  local_taskset = TaskSet;
 800872c:	4b12      	ldr	r3, [pc, #72]	; (8008778 <UTIL_SEQ_Run+0x1b8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008732:	4b13      	ldr	r3, [pc, #76]	; (8008780 <UTIL_SEQ_Run+0x1c0>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	401a      	ands	r2, r3
 800873a:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4013      	ands	r3, r2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d108      	bne.n	8008756 <UTIL_SEQ_Run+0x196>
 8008744:	4b11      	ldr	r3, [pc, #68]	; (800878c <UTIL_SEQ_Run+0x1cc>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b11      	ldr	r3, [pc, #68]	; (8008790 <UTIL_SEQ_Run+0x1d0>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4013      	ands	r3, r2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 8008752:	f7f8 f876 	bl	8000842 <UTIL_SEQ_Idle>
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f383 8810 	msr	PRIMASK, r3
}
 8008760:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8008762:	f000 f908 	bl	8008976 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008766:	4a03      	ldr	r2, [pc, #12]	; (8008774 <UTIL_SEQ_Run+0x1b4>)
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	6013      	str	r3, [r2, #0]

  return;
 800876c:	bf00      	nop
}
 800876e:	3730      	adds	r7, #48	; 0x30
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000030 	.word	0x20000030
 8008778:	200013e0 	.word	0x200013e0
 800877c:	20001470 	.word	0x20001470
 8008780:	2000002c 	.word	0x2000002c
 8008784:	200013ec 	.word	0x200013ec
 8008788:	200013f0 	.word	0x200013f0
 800878c:	200013e4 	.word	0x200013e4
 8008790:	200013e8 	.word	0x200013e8

08008794 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a0:	f3ef 8310 	mrs	r3, PRIMASK
 80087a4:	617b      	str	r3, [r7, #20]
  return(result);
 80087a6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80087a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80087aa:	b672      	cpsid	i
}
 80087ac:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f8e8 	bl	8008984 <SEQ_BitPosition>
 80087b4:	4603      	mov	r3, r0
 80087b6:	4619      	mov	r1, r3
 80087b8:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <UTIL_SEQ_RegTask+0x40>)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f383 8810 	msr	PRIMASK, r3
}
 80087ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80087cc:	bf00      	nop
}
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200013f0 	.word	0x200013f0

080087d8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087e2:	f3ef 8310 	mrs	r3, PRIMASK
 80087e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80087e8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80087ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087ec:	b672      	cpsid	i
}
 80087ee:	bf00      	nop

  TaskSet |= TaskId_bm;
 80087f0:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <UTIL_SEQ_SetTask+0x50>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	4a0b      	ldr	r2, [pc, #44]	; (8008828 <UTIL_SEQ_SetTask+0x50>)
 80087fa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80087fc:	4a0b      	ldr	r2, [pc, #44]	; (800882c <UTIL_SEQ_SetTask+0x54>)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	431a      	orrs	r2, r3
 8008808:	4908      	ldr	r1, [pc, #32]	; (800882c <UTIL_SEQ_SetTask+0x54>)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f383 8810 	msr	PRIMASK, r3
}
 800881a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800881c:	bf00      	nop
}
 800881e:	371c      	adds	r7, #28
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	200013e0 	.word	0x200013e0
 800882c:	20001470 	.word	0x20001470

08008830 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008838:	f3ef 8310 	mrs	r3, PRIMASK
 800883c:	60fb      	str	r3, [r7, #12]
  return(result);
 800883e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008842:	b672      	cpsid	i
}
 8008844:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <UTIL_SEQ_SetEvt+0x3c>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4313      	orrs	r3, r2
 800884e:	4a07      	ldr	r2, [pc, #28]	; (800886c <UTIL_SEQ_SetEvt+0x3c>)
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f383 8810 	msr	PRIMASK, r3
}
 800885c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800885e:	bf00      	nop
}
 8008860:	371c      	adds	r7, #28
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	200013e4 	.word	0x200013e4

08008870 <UTIL_SEQ_ClrEvt>:

void UTIL_SEQ_ClrEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008878:	f3ef 8310 	mrs	r3, PRIMASK
 800887c:	60fb      	str	r3, [r7, #12]
  return(result);
 800887e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008882:	b672      	cpsid	i
}
 8008884:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	43da      	mvns	r2, r3
 800888a:	4b08      	ldr	r3, [pc, #32]	; (80088ac <UTIL_SEQ_ClrEvt+0x3c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4013      	ands	r3, r2
 8008890:	4a06      	ldr	r2, [pc, #24]	; (80088ac <UTIL_SEQ_ClrEvt+0x3c>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f383 8810 	msr	PRIMASK, r3
}
 800889e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80088a0:	bf00      	nop
}
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	200013e4 	.word	0x200013e4

080088b0 <UTIL_SEQ_WaitEvt>:

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80088b8:	4b21      	ldr	r3, [pc, #132]	; (8008940 <UTIL_SEQ_WaitEvt+0x90>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80088be:	4b20      	ldr	r3, [pc, #128]	; (8008940 <UTIL_SEQ_WaitEvt+0x90>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d102      	bne.n	80088ce <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
 80088cc:	e005      	b.n	80088da <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80088ce:	4b1c      	ldr	r3, [pc, #112]	; (8008940 <UTIL_SEQ_WaitEvt+0x90>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2201      	movs	r2, #1
 80088d4:	fa02 f303 	lsl.w	r3, r2, r3
 80088d8:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80088da:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <UTIL_SEQ_WaitEvt+0x94>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80088e0:	4a18      	ldr	r2, [pc, #96]	; (8008944 <UTIL_SEQ_WaitEvt+0x94>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80088e6:	e005      	b.n	80088f4 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80088e8:	4b16      	ldr	r3, [pc, #88]	; (8008944 <UTIL_SEQ_WaitEvt+0x94>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4619      	mov	r1, r3
 80088ee:	69f8      	ldr	r0, [r7, #28]
 80088f0:	f000 f82c 	bl	800894c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80088f4:	4b14      	ldr	r3, [pc, #80]	; (8008948 <UTIL_SEQ_WaitEvt+0x98>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <UTIL_SEQ_WaitEvt+0x94>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4013      	ands	r3, r2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f2      	beq.n	80088e8 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008902:	4a0f      	ldr	r2, [pc, #60]	; (8008940 <UTIL_SEQ_WaitEvt+0x90>)
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008908:	f3ef 8310 	mrs	r3, PRIMASK
 800890c:	60bb      	str	r3, [r7, #8]
  return(result);
 800890e:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008912:	b672      	cpsid	i
}
 8008914:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8008916:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <UTIL_SEQ_WaitEvt+0x94>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	43da      	mvns	r2, r3
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <UTIL_SEQ_WaitEvt+0x98>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4013      	ands	r3, r2
 8008922:	4a09      	ldr	r2, [pc, #36]	; (8008948 <UTIL_SEQ_WaitEvt+0x98>)
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f383 8810 	msr	PRIMASK, r3
}
 8008930:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008932:	4a04      	ldr	r2, [pc, #16]	; (8008944 <UTIL_SEQ_WaitEvt+0x94>)
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	6013      	str	r3, [r2, #0]

  return;
 8008938:	bf00      	nop
}
 800893a:	3720      	adds	r7, #32
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	200013ec 	.word	0x200013ec
 8008944:	200013e8 	.word	0x200013e8
 8008948:	200013e4 	.word	0x200013e4

0800894c <UTIL_SEQ_EvtIdle>:
{
  return (EvtSet & EvtWaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(~TaskId_bm);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	43db      	mvns	r3, r3
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff fe30 	bl	80085c0 <UTIL_SEQ_Run>
  return;
 8008960:	bf00      	nop
}
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800896c:	bf00      	nop
}
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008976:	b480      	push	{r7}
 8008978:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800897a:	bf00      	nop
}
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	0c1b      	lsrs	r3, r3, #16
 8008994:	041b      	lsls	r3, r3, #16
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <SEQ_BitPosition+0x20>
 800899a:	2310      	movs	r3, #16
 800899c:	73fb      	strb	r3, [r7, #15]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	041b      	lsls	r3, r3, #16
 80089a2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d105      	bne.n	80089ba <SEQ_BitPosition+0x36>
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	3308      	adds	r3, #8
 80089b2:	73fb      	strb	r3, [r7, #15]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d105      	bne.n	80089d0 <SEQ_BitPosition+0x4c>
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	3304      	adds	r3, #4
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	0f1b      	lsrs	r3, r3, #28
 80089d4:	4a07      	ldr	r2, [pc, #28]	; (80089f4 <SEQ_BitPosition+0x70>)
 80089d6:	5cd2      	ldrb	r2, [r2, r3]
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4413      	add	r3, r2
 80089dc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	f1c3 031f 	rsb	r3, r3, #31
 80089e4:	b2db      	uxtb	r3, r3
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	0800a3b8 	.word	0x0800a3b8

080089f8 <__errno>:
 80089f8:	4b01      	ldr	r3, [pc, #4]	; (8008a00 <__errno+0x8>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	20000034 	.word	0x20000034

08008a04 <__libc_init_array>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	4d0d      	ldr	r5, [pc, #52]	; (8008a3c <__libc_init_array+0x38>)
 8008a08:	4c0d      	ldr	r4, [pc, #52]	; (8008a40 <__libc_init_array+0x3c>)
 8008a0a:	1b64      	subs	r4, r4, r5
 8008a0c:	10a4      	asrs	r4, r4, #2
 8008a0e:	2600      	movs	r6, #0
 8008a10:	42a6      	cmp	r6, r4
 8008a12:	d109      	bne.n	8008a28 <__libc_init_array+0x24>
 8008a14:	4d0b      	ldr	r5, [pc, #44]	; (8008a44 <__libc_init_array+0x40>)
 8008a16:	4c0c      	ldr	r4, [pc, #48]	; (8008a48 <__libc_init_array+0x44>)
 8008a18:	f001 f996 	bl	8009d48 <_init>
 8008a1c:	1b64      	subs	r4, r4, r5
 8008a1e:	10a4      	asrs	r4, r4, #2
 8008a20:	2600      	movs	r6, #0
 8008a22:	42a6      	cmp	r6, r4
 8008a24:	d105      	bne.n	8008a32 <__libc_init_array+0x2e>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2c:	4798      	blx	r3
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7ee      	b.n	8008a10 <__libc_init_array+0xc>
 8008a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a36:	4798      	blx	r3
 8008a38:	3601      	adds	r6, #1
 8008a3a:	e7f2      	b.n	8008a22 <__libc_init_array+0x1e>
 8008a3c:	0800a468 	.word	0x0800a468
 8008a40:	0800a468 	.word	0x0800a468
 8008a44:	0800a468 	.word	0x0800a468
 8008a48:	0800a46c 	.word	0x0800a46c

08008a4c <memcpy>:
 8008a4c:	440a      	add	r2, r1
 8008a4e:	4291      	cmp	r1, r2
 8008a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a54:	d100      	bne.n	8008a58 <memcpy+0xc>
 8008a56:	4770      	bx	lr
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a62:	4291      	cmp	r1, r2
 8008a64:	d1f9      	bne.n	8008a5a <memcpy+0xe>
 8008a66:	bd10      	pop	{r4, pc}

08008a68 <memset>:
 8008a68:	4402      	add	r2, r0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d100      	bne.n	8008a72 <memset+0xa>
 8008a70:	4770      	bx	lr
 8008a72:	f803 1b01 	strb.w	r1, [r3], #1
 8008a76:	e7f9      	b.n	8008a6c <memset+0x4>

08008a78 <iprintf>:
 8008a78:	b40f      	push	{r0, r1, r2, r3}
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <iprintf+0x2c>)
 8008a7c:	b513      	push	{r0, r1, r4, lr}
 8008a7e:	681c      	ldr	r4, [r3, #0]
 8008a80:	b124      	cbz	r4, 8008a8c <iprintf+0x14>
 8008a82:	69a3      	ldr	r3, [r4, #24]
 8008a84:	b913      	cbnz	r3, 8008a8c <iprintf+0x14>
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 f8d4 	bl	8008c34 <__sinit>
 8008a8c:	ab05      	add	r3, sp, #20
 8008a8e:	9a04      	ldr	r2, [sp, #16]
 8008a90:	68a1      	ldr	r1, [r4, #8]
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fb4d 	bl	8009134 <_vfiprintf_r>
 8008a9a:	b002      	add	sp, #8
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	b004      	add	sp, #16
 8008aa2:	4770      	bx	lr
 8008aa4:	20000034 	.word	0x20000034

08008aa8 <sniprintf>:
 8008aa8:	b40c      	push	{r2, r3}
 8008aaa:	b530      	push	{r4, r5, lr}
 8008aac:	4b17      	ldr	r3, [pc, #92]	; (8008b0c <sniprintf+0x64>)
 8008aae:	1e0c      	subs	r4, r1, #0
 8008ab0:	681d      	ldr	r5, [r3, #0]
 8008ab2:	b09d      	sub	sp, #116	; 0x74
 8008ab4:	da08      	bge.n	8008ac8 <sniprintf+0x20>
 8008ab6:	238b      	movs	r3, #139	; 0x8b
 8008ab8:	602b      	str	r3, [r5, #0]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	b01d      	add	sp, #116	; 0x74
 8008ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac4:	b002      	add	sp, #8
 8008ac6:	4770      	bx	lr
 8008ac8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008acc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ad0:	bf14      	ite	ne
 8008ad2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ad6:	4623      	moveq	r3, r4
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	9307      	str	r3, [sp, #28]
 8008adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ae0:	9002      	str	r0, [sp, #8]
 8008ae2:	9006      	str	r0, [sp, #24]
 8008ae4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ae8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008aea:	ab21      	add	r3, sp, #132	; 0x84
 8008aec:	a902      	add	r1, sp, #8
 8008aee:	4628      	mov	r0, r5
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	f000 f9f5 	bl	8008ee0 <_svfiprintf_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	bfbc      	itt	lt
 8008afa:	238b      	movlt	r3, #139	; 0x8b
 8008afc:	602b      	strlt	r3, [r5, #0]
 8008afe:	2c00      	cmp	r4, #0
 8008b00:	d0dd      	beq.n	8008abe <sniprintf+0x16>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	e7d9      	b.n	8008abe <sniprintf+0x16>
 8008b0a:	bf00      	nop
 8008b0c:	20000034 	.word	0x20000034

08008b10 <_vsniprintf_r>:
 8008b10:	b530      	push	{r4, r5, lr}
 8008b12:	1e14      	subs	r4, r2, #0
 8008b14:	4605      	mov	r5, r0
 8008b16:	b09b      	sub	sp, #108	; 0x6c
 8008b18:	4618      	mov	r0, r3
 8008b1a:	da05      	bge.n	8008b28 <_vsniprintf_r+0x18>
 8008b1c:	238b      	movs	r3, #139	; 0x8b
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	b01b      	add	sp, #108	; 0x6c
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b30:	bf14      	ite	ne
 8008b32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b36:	4623      	moveq	r3, r4
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	9305      	str	r3, [sp, #20]
 8008b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b40:	9100      	str	r1, [sp, #0]
 8008b42:	9104      	str	r1, [sp, #16]
 8008b44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008b48:	4602      	mov	r2, r0
 8008b4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b4c:	4669      	mov	r1, sp
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f000 f9c6 	bl	8008ee0 <_svfiprintf_r>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	bfbc      	itt	lt
 8008b58:	238b      	movlt	r3, #139	; 0x8b
 8008b5a:	602b      	strlt	r3, [r5, #0]
 8008b5c:	2c00      	cmp	r4, #0
 8008b5e:	d0e1      	beq.n	8008b24 <_vsniprintf_r+0x14>
 8008b60:	9b00      	ldr	r3, [sp, #0]
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e7dd      	b.n	8008b24 <_vsniprintf_r+0x14>

08008b68 <vsniprintf>:
 8008b68:	b507      	push	{r0, r1, r2, lr}
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	460a      	mov	r2, r1
 8008b70:	4601      	mov	r1, r0
 8008b72:	4803      	ldr	r0, [pc, #12]	; (8008b80 <vsniprintf+0x18>)
 8008b74:	6800      	ldr	r0, [r0, #0]
 8008b76:	f7ff ffcb 	bl	8008b10 <_vsniprintf_r>
 8008b7a:	b003      	add	sp, #12
 8008b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b80:	20000034 	.word	0x20000034

08008b84 <std>:
 8008b84:	2300      	movs	r3, #0
 8008b86:	b510      	push	{r4, lr}
 8008b88:	4604      	mov	r4, r0
 8008b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b92:	6083      	str	r3, [r0, #8]
 8008b94:	8181      	strh	r1, [r0, #12]
 8008b96:	6643      	str	r3, [r0, #100]	; 0x64
 8008b98:	81c2      	strh	r2, [r0, #14]
 8008b9a:	6183      	str	r3, [r0, #24]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	305c      	adds	r0, #92	; 0x5c
 8008ba2:	f7ff ff61 	bl	8008a68 <memset>
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <std+0x38>)
 8008ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <std+0x3c>)
 8008bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bae:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <std+0x40>)
 8008bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bb2:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <std+0x44>)
 8008bb4:	6224      	str	r4, [r4, #32]
 8008bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8008bb8:	bd10      	pop	{r4, pc}
 8008bba:	bf00      	nop
 8008bbc:	080096dd 	.word	0x080096dd
 8008bc0:	080096ff 	.word	0x080096ff
 8008bc4:	08009737 	.word	0x08009737
 8008bc8:	0800975b 	.word	0x0800975b

08008bcc <_cleanup_r>:
 8008bcc:	4901      	ldr	r1, [pc, #4]	; (8008bd4 <_cleanup_r+0x8>)
 8008bce:	f000 b8af 	b.w	8008d30 <_fwalk_reent>
 8008bd2:	bf00      	nop
 8008bd4:	08009a35 	.word	0x08009a35

08008bd8 <__sfmoreglue>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	1e4a      	subs	r2, r1, #1
 8008bdc:	2568      	movs	r5, #104	; 0x68
 8008bde:	4355      	muls	r5, r2
 8008be0:	460e      	mov	r6, r1
 8008be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008be6:	f000 f8c5 	bl	8008d74 <_malloc_r>
 8008bea:	4604      	mov	r4, r0
 8008bec:	b140      	cbz	r0, 8008c00 <__sfmoreglue+0x28>
 8008bee:	2100      	movs	r1, #0
 8008bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8008bf4:	300c      	adds	r0, #12
 8008bf6:	60a0      	str	r0, [r4, #8]
 8008bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bfc:	f7ff ff34 	bl	8008a68 <memset>
 8008c00:	4620      	mov	r0, r4
 8008c02:	bd70      	pop	{r4, r5, r6, pc}

08008c04 <__sfp_lock_acquire>:
 8008c04:	4801      	ldr	r0, [pc, #4]	; (8008c0c <__sfp_lock_acquire+0x8>)
 8008c06:	f000 b8b3 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008c0a:	bf00      	nop
 8008c0c:	20001684 	.word	0x20001684

08008c10 <__sfp_lock_release>:
 8008c10:	4801      	ldr	r0, [pc, #4]	; (8008c18 <__sfp_lock_release+0x8>)
 8008c12:	f000 b8ae 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008c16:	bf00      	nop
 8008c18:	20001684 	.word	0x20001684

08008c1c <__sinit_lock_acquire>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__sinit_lock_acquire+0x8>)
 8008c1e:	f000 b8a7 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	2000167f 	.word	0x2000167f

08008c28 <__sinit_lock_release>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__sinit_lock_release+0x8>)
 8008c2a:	f000 b8a2 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	2000167f 	.word	0x2000167f

08008c34 <__sinit>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	4604      	mov	r4, r0
 8008c38:	f7ff fff0 	bl	8008c1c <__sinit_lock_acquire>
 8008c3c:	69a3      	ldr	r3, [r4, #24]
 8008c3e:	b11b      	cbz	r3, 8008c48 <__sinit+0x14>
 8008c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c44:	f7ff bff0 	b.w	8008c28 <__sinit_lock_release>
 8008c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <__sinit+0x68>)
 8008c50:	4a13      	ldr	r2, [pc, #76]	; (8008ca0 <__sinit+0x6c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	bf04      	itt	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	61a3      	streq	r3, [r4, #24]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 f820 	bl	8008ca4 <__sfp>
 8008c64:	6060      	str	r0, [r4, #4]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 f81c 	bl	8008ca4 <__sfp>
 8008c6c:	60a0      	str	r0, [r4, #8]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 f818 	bl	8008ca4 <__sfp>
 8008c74:	2200      	movs	r2, #0
 8008c76:	60e0      	str	r0, [r4, #12]
 8008c78:	2104      	movs	r1, #4
 8008c7a:	6860      	ldr	r0, [r4, #4]
 8008c7c:	f7ff ff82 	bl	8008b84 <std>
 8008c80:	68a0      	ldr	r0, [r4, #8]
 8008c82:	2201      	movs	r2, #1
 8008c84:	2109      	movs	r1, #9
 8008c86:	f7ff ff7d 	bl	8008b84 <std>
 8008c8a:	68e0      	ldr	r0, [r4, #12]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	2112      	movs	r1, #18
 8008c90:	f7ff ff78 	bl	8008b84 <std>
 8008c94:	2301      	movs	r3, #1
 8008c96:	61a3      	str	r3, [r4, #24]
 8008c98:	e7d2      	b.n	8008c40 <__sinit+0xc>
 8008c9a:	bf00      	nop
 8008c9c:	0800a3c8 	.word	0x0800a3c8
 8008ca0:	08008bcd 	.word	0x08008bcd

08008ca4 <__sfp>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	f7ff ffac 	bl	8008c04 <__sfp_lock_acquire>
 8008cac:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <__sfp+0x84>)
 8008cae:	681e      	ldr	r6, [r3, #0]
 8008cb0:	69b3      	ldr	r3, [r6, #24]
 8008cb2:	b913      	cbnz	r3, 8008cba <__sfp+0x16>
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7ff ffbd 	bl	8008c34 <__sinit>
 8008cba:	3648      	adds	r6, #72	; 0x48
 8008cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	d503      	bpl.n	8008ccc <__sfp+0x28>
 8008cc4:	6833      	ldr	r3, [r6, #0]
 8008cc6:	b30b      	cbz	r3, 8008d0c <__sfp+0x68>
 8008cc8:	6836      	ldr	r6, [r6, #0]
 8008cca:	e7f7      	b.n	8008cbc <__sfp+0x18>
 8008ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd0:	b9d5      	cbnz	r5, 8008d08 <__sfp+0x64>
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <__sfp+0x88>)
 8008cd4:	60e3      	str	r3, [r4, #12]
 8008cd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cda:	6665      	str	r5, [r4, #100]	; 0x64
 8008cdc:	f000 f847 	bl	8008d6e <__retarget_lock_init_recursive>
 8008ce0:	f7ff ff96 	bl	8008c10 <__sfp_lock_release>
 8008ce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cec:	6025      	str	r5, [r4, #0]
 8008cee:	61a5      	str	r5, [r4, #24]
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cf8:	f7ff feb6 	bl	8008a68 <memset>
 8008cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d04:	4620      	mov	r0, r4
 8008d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d08:	3468      	adds	r4, #104	; 0x68
 8008d0a:	e7d9      	b.n	8008cc0 <__sfp+0x1c>
 8008d0c:	2104      	movs	r1, #4
 8008d0e:	4638      	mov	r0, r7
 8008d10:	f7ff ff62 	bl	8008bd8 <__sfmoreglue>
 8008d14:	4604      	mov	r4, r0
 8008d16:	6030      	str	r0, [r6, #0]
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1d5      	bne.n	8008cc8 <__sfp+0x24>
 8008d1c:	f7ff ff78 	bl	8008c10 <__sfp_lock_release>
 8008d20:	230c      	movs	r3, #12
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	e7ee      	b.n	8008d04 <__sfp+0x60>
 8008d26:	bf00      	nop
 8008d28:	0800a3c8 	.word	0x0800a3c8
 8008d2c:	ffff0001 	.word	0xffff0001

08008d30 <_fwalk_reent>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4606      	mov	r6, r0
 8008d36:	4688      	mov	r8, r1
 8008d38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d3c:	2700      	movs	r7, #0
 8008d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d42:	f1b9 0901 	subs.w	r9, r9, #1
 8008d46:	d505      	bpl.n	8008d54 <_fwalk_reent+0x24>
 8008d48:	6824      	ldr	r4, [r4, #0]
 8008d4a:	2c00      	cmp	r4, #0
 8008d4c:	d1f7      	bne.n	8008d3e <_fwalk_reent+0xe>
 8008d4e:	4638      	mov	r0, r7
 8008d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d54:	89ab      	ldrh	r3, [r5, #12]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d907      	bls.n	8008d6a <_fwalk_reent+0x3a>
 8008d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	d003      	beq.n	8008d6a <_fwalk_reent+0x3a>
 8008d62:	4629      	mov	r1, r5
 8008d64:	4630      	mov	r0, r6
 8008d66:	47c0      	blx	r8
 8008d68:	4307      	orrs	r7, r0
 8008d6a:	3568      	adds	r5, #104	; 0x68
 8008d6c:	e7e9      	b.n	8008d42 <_fwalk_reent+0x12>

08008d6e <__retarget_lock_init_recursive>:
 8008d6e:	4770      	bx	lr

08008d70 <__retarget_lock_acquire_recursive>:
 8008d70:	4770      	bx	lr

08008d72 <__retarget_lock_release_recursive>:
 8008d72:	4770      	bx	lr

08008d74 <_malloc_r>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	1ccd      	adds	r5, r1, #3
 8008d78:	f025 0503 	bic.w	r5, r5, #3
 8008d7c:	3508      	adds	r5, #8
 8008d7e:	2d0c      	cmp	r5, #12
 8008d80:	bf38      	it	cc
 8008d82:	250c      	movcc	r5, #12
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	4606      	mov	r6, r0
 8008d88:	db01      	blt.n	8008d8e <_malloc_r+0x1a>
 8008d8a:	42a9      	cmp	r1, r5
 8008d8c:	d903      	bls.n	8008d96 <_malloc_r+0x22>
 8008d8e:	230c      	movs	r3, #12
 8008d90:	6033      	str	r3, [r6, #0]
 8008d92:	2000      	movs	r0, #0
 8008d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d96:	f000 ff19 	bl	8009bcc <__malloc_lock>
 8008d9a:	4921      	ldr	r1, [pc, #132]	; (8008e20 <_malloc_r+0xac>)
 8008d9c:	680a      	ldr	r2, [r1, #0]
 8008d9e:	4614      	mov	r4, r2
 8008da0:	b99c      	cbnz	r4, 8008dca <_malloc_r+0x56>
 8008da2:	4f20      	ldr	r7, [pc, #128]	; (8008e24 <_malloc_r+0xb0>)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	b923      	cbnz	r3, 8008db2 <_malloc_r+0x3e>
 8008da8:	4621      	mov	r1, r4
 8008daa:	4630      	mov	r0, r6
 8008dac:	f000 fc86 	bl	80096bc <_sbrk_r>
 8008db0:	6038      	str	r0, [r7, #0]
 8008db2:	4629      	mov	r1, r5
 8008db4:	4630      	mov	r0, r6
 8008db6:	f000 fc81 	bl	80096bc <_sbrk_r>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d123      	bne.n	8008e06 <_malloc_r+0x92>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	6033      	str	r3, [r6, #0]
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 ff08 	bl	8009bd8 <__malloc_unlock>
 8008dc8:	e7e3      	b.n	8008d92 <_malloc_r+0x1e>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	1b5b      	subs	r3, r3, r5
 8008dce:	d417      	bmi.n	8008e00 <_malloc_r+0x8c>
 8008dd0:	2b0b      	cmp	r3, #11
 8008dd2:	d903      	bls.n	8008ddc <_malloc_r+0x68>
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	441c      	add	r4, r3
 8008dd8:	6025      	str	r5, [r4, #0]
 8008dda:	e004      	b.n	8008de6 <_malloc_r+0x72>
 8008ddc:	6863      	ldr	r3, [r4, #4]
 8008dde:	42a2      	cmp	r2, r4
 8008de0:	bf0c      	ite	eq
 8008de2:	600b      	streq	r3, [r1, #0]
 8008de4:	6053      	strne	r3, [r2, #4]
 8008de6:	4630      	mov	r0, r6
 8008de8:	f000 fef6 	bl	8009bd8 <__malloc_unlock>
 8008dec:	f104 000b 	add.w	r0, r4, #11
 8008df0:	1d23      	adds	r3, r4, #4
 8008df2:	f020 0007 	bic.w	r0, r0, #7
 8008df6:	1ac2      	subs	r2, r0, r3
 8008df8:	d0cc      	beq.n	8008d94 <_malloc_r+0x20>
 8008dfa:	1a1b      	subs	r3, r3, r0
 8008dfc:	50a3      	str	r3, [r4, r2]
 8008dfe:	e7c9      	b.n	8008d94 <_malloc_r+0x20>
 8008e00:	4622      	mov	r2, r4
 8008e02:	6864      	ldr	r4, [r4, #4]
 8008e04:	e7cc      	b.n	8008da0 <_malloc_r+0x2c>
 8008e06:	1cc4      	adds	r4, r0, #3
 8008e08:	f024 0403 	bic.w	r4, r4, #3
 8008e0c:	42a0      	cmp	r0, r4
 8008e0e:	d0e3      	beq.n	8008dd8 <_malloc_r+0x64>
 8008e10:	1a21      	subs	r1, r4, r0
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 fc52 	bl	80096bc <_sbrk_r>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d1dd      	bne.n	8008dd8 <_malloc_r+0x64>
 8008e1c:	e7cf      	b.n	8008dbe <_malloc_r+0x4a>
 8008e1e:	bf00      	nop
 8008e20:	20001480 	.word	0x20001480
 8008e24:	20001484 	.word	0x20001484

08008e28 <__ssputs_r>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	688e      	ldr	r6, [r1, #8]
 8008e2e:	429e      	cmp	r6, r3
 8008e30:	4682      	mov	sl, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	4690      	mov	r8, r2
 8008e36:	461f      	mov	r7, r3
 8008e38:	d838      	bhi.n	8008eac <__ssputs_r+0x84>
 8008e3a:	898a      	ldrh	r2, [r1, #12]
 8008e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e40:	d032      	beq.n	8008ea8 <__ssputs_r+0x80>
 8008e42:	6825      	ldr	r5, [r4, #0]
 8008e44:	6909      	ldr	r1, [r1, #16]
 8008e46:	eba5 0901 	sub.w	r9, r5, r1
 8008e4a:	6965      	ldr	r5, [r4, #20]
 8008e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e54:	3301      	adds	r3, #1
 8008e56:	444b      	add	r3, r9
 8008e58:	106d      	asrs	r5, r5, #1
 8008e5a:	429d      	cmp	r5, r3
 8008e5c:	bf38      	it	cc
 8008e5e:	461d      	movcc	r5, r3
 8008e60:	0553      	lsls	r3, r2, #21
 8008e62:	d531      	bpl.n	8008ec8 <__ssputs_r+0xa0>
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7ff ff85 	bl	8008d74 <_malloc_r>
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	b950      	cbnz	r0, 8008e84 <__ssputs_r+0x5c>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	f8ca 3000 	str.w	r3, [sl]
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e84:	6921      	ldr	r1, [r4, #16]
 8008e86:	464a      	mov	r2, r9
 8008e88:	f7ff fde0 	bl	8008a4c <memcpy>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	6126      	str	r6, [r4, #16]
 8008e9a:	6165      	str	r5, [r4, #20]
 8008e9c:	444e      	add	r6, r9
 8008e9e:	eba5 0509 	sub.w	r5, r5, r9
 8008ea2:	6026      	str	r6, [r4, #0]
 8008ea4:	60a5      	str	r5, [r4, #8]
 8008ea6:	463e      	mov	r6, r7
 8008ea8:	42be      	cmp	r6, r7
 8008eaa:	d900      	bls.n	8008eae <__ssputs_r+0x86>
 8008eac:	463e      	mov	r6, r7
 8008eae:	4632      	mov	r2, r6
 8008eb0:	6820      	ldr	r0, [r4, #0]
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	f000 fe70 	bl	8009b98 <memmove>
 8008eb8:	68a3      	ldr	r3, [r4, #8]
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	1b9b      	subs	r3, r3, r6
 8008ebe:	4432      	add	r2, r6
 8008ec0:	60a3      	str	r3, [r4, #8]
 8008ec2:	6022      	str	r2, [r4, #0]
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e7db      	b.n	8008e80 <__ssputs_r+0x58>
 8008ec8:	462a      	mov	r2, r5
 8008eca:	f000 fedb 	bl	8009c84 <_realloc_r>
 8008ece:	4606      	mov	r6, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d1e1      	bne.n	8008e98 <__ssputs_r+0x70>
 8008ed4:	6921      	ldr	r1, [r4, #16]
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	f000 fe84 	bl	8009be4 <_free_r>
 8008edc:	e7c7      	b.n	8008e6e <__ssputs_r+0x46>
	...

08008ee0 <_svfiprintf_r>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	4698      	mov	r8, r3
 8008ee6:	898b      	ldrh	r3, [r1, #12]
 8008ee8:	061b      	lsls	r3, r3, #24
 8008eea:	b09d      	sub	sp, #116	; 0x74
 8008eec:	4607      	mov	r7, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	d50e      	bpl.n	8008f12 <_svfiprintf_r+0x32>
 8008ef4:	690b      	ldr	r3, [r1, #16]
 8008ef6:	b963      	cbnz	r3, 8008f12 <_svfiprintf_r+0x32>
 8008ef8:	2140      	movs	r1, #64	; 0x40
 8008efa:	f7ff ff3b 	bl	8008d74 <_malloc_r>
 8008efe:	6028      	str	r0, [r5, #0]
 8008f00:	6128      	str	r0, [r5, #16]
 8008f02:	b920      	cbnz	r0, 8008f0e <_svfiprintf_r+0x2e>
 8008f04:	230c      	movs	r3, #12
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	e0d1      	b.n	80090b2 <_svfiprintf_r+0x1d2>
 8008f0e:	2340      	movs	r3, #64	; 0x40
 8008f10:	616b      	str	r3, [r5, #20]
 8008f12:	2300      	movs	r3, #0
 8008f14:	9309      	str	r3, [sp, #36]	; 0x24
 8008f16:	2320      	movs	r3, #32
 8008f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f20:	2330      	movs	r3, #48	; 0x30
 8008f22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090cc <_svfiprintf_r+0x1ec>
 8008f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f2a:	f04f 0901 	mov.w	r9, #1
 8008f2e:	4623      	mov	r3, r4
 8008f30:	469a      	mov	sl, r3
 8008f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f36:	b10a      	cbz	r2, 8008f3c <_svfiprintf_r+0x5c>
 8008f38:	2a25      	cmp	r2, #37	; 0x25
 8008f3a:	d1f9      	bne.n	8008f30 <_svfiprintf_r+0x50>
 8008f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f40:	d00b      	beq.n	8008f5a <_svfiprintf_r+0x7a>
 8008f42:	465b      	mov	r3, fp
 8008f44:	4622      	mov	r2, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff ff6d 	bl	8008e28 <__ssputs_r>
 8008f4e:	3001      	adds	r0, #1
 8008f50:	f000 80aa 	beq.w	80090a8 <_svfiprintf_r+0x1c8>
 8008f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f56:	445a      	add	r2, fp
 8008f58:	9209      	str	r2, [sp, #36]	; 0x24
 8008f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 80a2 	beq.w	80090a8 <_svfiprintf_r+0x1c8>
 8008f64:	2300      	movs	r3, #0
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f6e:	f10a 0a01 	add.w	sl, sl, #1
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9307      	str	r3, [sp, #28]
 8008f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f7c:	4654      	mov	r4, sl
 8008f7e:	2205      	movs	r2, #5
 8008f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f84:	4851      	ldr	r0, [pc, #324]	; (80090cc <_svfiprintf_r+0x1ec>)
 8008f86:	f7f7 f903 	bl	8000190 <memchr>
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	b9d8      	cbnz	r0, 8008fc6 <_svfiprintf_r+0xe6>
 8008f8e:	06d0      	lsls	r0, r2, #27
 8008f90:	bf44      	itt	mi
 8008f92:	2320      	movmi	r3, #32
 8008f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f98:	0711      	lsls	r1, r2, #28
 8008f9a:	bf44      	itt	mi
 8008f9c:	232b      	movmi	r3, #43	; 0x2b
 8008f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa8:	d015      	beq.n	8008fd6 <_svfiprintf_r+0xf6>
 8008faa:	9a07      	ldr	r2, [sp, #28]
 8008fac:	4654      	mov	r4, sl
 8008fae:	2000      	movs	r0, #0
 8008fb0:	f04f 0c0a 	mov.w	ip, #10
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fba:	3b30      	subs	r3, #48	; 0x30
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	d94e      	bls.n	800905e <_svfiprintf_r+0x17e>
 8008fc0:	b1b0      	cbz	r0, 8008ff0 <_svfiprintf_r+0x110>
 8008fc2:	9207      	str	r2, [sp, #28]
 8008fc4:	e014      	b.n	8008ff0 <_svfiprintf_r+0x110>
 8008fc6:	eba0 0308 	sub.w	r3, r0, r8
 8008fca:	fa09 f303 	lsl.w	r3, r9, r3
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	9304      	str	r3, [sp, #16]
 8008fd2:	46a2      	mov	sl, r4
 8008fd4:	e7d2      	b.n	8008f7c <_svfiprintf_r+0x9c>
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	1d19      	adds	r1, r3, #4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	9103      	str	r1, [sp, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bfbb      	ittet	lt
 8008fe2:	425b      	neglt	r3, r3
 8008fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe8:	9307      	strge	r3, [sp, #28]
 8008fea:	9307      	strlt	r3, [sp, #28]
 8008fec:	bfb8      	it	lt
 8008fee:	9204      	strlt	r2, [sp, #16]
 8008ff0:	7823      	ldrb	r3, [r4, #0]
 8008ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff4:	d10c      	bne.n	8009010 <_svfiprintf_r+0x130>
 8008ff6:	7863      	ldrb	r3, [r4, #1]
 8008ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8008ffa:	d135      	bne.n	8009068 <_svfiprintf_r+0x188>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	9203      	str	r2, [sp, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	bfb8      	it	lt
 8009008:	f04f 33ff 	movlt.w	r3, #4294967295
 800900c:	3402      	adds	r4, #2
 800900e:	9305      	str	r3, [sp, #20]
 8009010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090dc <_svfiprintf_r+0x1fc>
 8009014:	7821      	ldrb	r1, [r4, #0]
 8009016:	2203      	movs	r2, #3
 8009018:	4650      	mov	r0, sl
 800901a:	f7f7 f8b9 	bl	8000190 <memchr>
 800901e:	b140      	cbz	r0, 8009032 <_svfiprintf_r+0x152>
 8009020:	2340      	movs	r3, #64	; 0x40
 8009022:	eba0 000a 	sub.w	r0, r0, sl
 8009026:	fa03 f000 	lsl.w	r0, r3, r0
 800902a:	9b04      	ldr	r3, [sp, #16]
 800902c:	4303      	orrs	r3, r0
 800902e:	3401      	adds	r4, #1
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009036:	4826      	ldr	r0, [pc, #152]	; (80090d0 <_svfiprintf_r+0x1f0>)
 8009038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800903c:	2206      	movs	r2, #6
 800903e:	f7f7 f8a7 	bl	8000190 <memchr>
 8009042:	2800      	cmp	r0, #0
 8009044:	d038      	beq.n	80090b8 <_svfiprintf_r+0x1d8>
 8009046:	4b23      	ldr	r3, [pc, #140]	; (80090d4 <_svfiprintf_r+0x1f4>)
 8009048:	bb1b      	cbnz	r3, 8009092 <_svfiprintf_r+0x1b2>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	3307      	adds	r3, #7
 800904e:	f023 0307 	bic.w	r3, r3, #7
 8009052:	3308      	adds	r3, #8
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009058:	4433      	add	r3, r6
 800905a:	9309      	str	r3, [sp, #36]	; 0x24
 800905c:	e767      	b.n	8008f2e <_svfiprintf_r+0x4e>
 800905e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009062:	460c      	mov	r4, r1
 8009064:	2001      	movs	r0, #1
 8009066:	e7a5      	b.n	8008fb4 <_svfiprintf_r+0xd4>
 8009068:	2300      	movs	r3, #0
 800906a:	3401      	adds	r4, #1
 800906c:	9305      	str	r3, [sp, #20]
 800906e:	4619      	mov	r1, r3
 8009070:	f04f 0c0a 	mov.w	ip, #10
 8009074:	4620      	mov	r0, r4
 8009076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800907a:	3a30      	subs	r2, #48	; 0x30
 800907c:	2a09      	cmp	r2, #9
 800907e:	d903      	bls.n	8009088 <_svfiprintf_r+0x1a8>
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0c5      	beq.n	8009010 <_svfiprintf_r+0x130>
 8009084:	9105      	str	r1, [sp, #20]
 8009086:	e7c3      	b.n	8009010 <_svfiprintf_r+0x130>
 8009088:	fb0c 2101 	mla	r1, ip, r1, r2
 800908c:	4604      	mov	r4, r0
 800908e:	2301      	movs	r3, #1
 8009090:	e7f0      	b.n	8009074 <_svfiprintf_r+0x194>
 8009092:	ab03      	add	r3, sp, #12
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	462a      	mov	r2, r5
 8009098:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <_svfiprintf_r+0x1f8>)
 800909a:	a904      	add	r1, sp, #16
 800909c:	4638      	mov	r0, r7
 800909e:	f3af 8000 	nop.w
 80090a2:	1c42      	adds	r2, r0, #1
 80090a4:	4606      	mov	r6, r0
 80090a6:	d1d6      	bne.n	8009056 <_svfiprintf_r+0x176>
 80090a8:	89ab      	ldrh	r3, [r5, #12]
 80090aa:	065b      	lsls	r3, r3, #25
 80090ac:	f53f af2c 	bmi.w	8008f08 <_svfiprintf_r+0x28>
 80090b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090b2:	b01d      	add	sp, #116	; 0x74
 80090b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b8:	ab03      	add	r3, sp, #12
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	462a      	mov	r2, r5
 80090be:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <_svfiprintf_r+0x1f8>)
 80090c0:	a904      	add	r1, sp, #16
 80090c2:	4638      	mov	r0, r7
 80090c4:	f000 f9d4 	bl	8009470 <_printf_i>
 80090c8:	e7eb      	b.n	80090a2 <_svfiprintf_r+0x1c2>
 80090ca:	bf00      	nop
 80090cc:	0800a42c 	.word	0x0800a42c
 80090d0:	0800a436 	.word	0x0800a436
 80090d4:	00000000 	.word	0x00000000
 80090d8:	08008e29 	.word	0x08008e29
 80090dc:	0800a432 	.word	0x0800a432

080090e0 <__sfputc_r>:
 80090e0:	6893      	ldr	r3, [r2, #8]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	b410      	push	{r4}
 80090e8:	6093      	str	r3, [r2, #8]
 80090ea:	da08      	bge.n	80090fe <__sfputc_r+0x1e>
 80090ec:	6994      	ldr	r4, [r2, #24]
 80090ee:	42a3      	cmp	r3, r4
 80090f0:	db01      	blt.n	80090f6 <__sfputc_r+0x16>
 80090f2:	290a      	cmp	r1, #10
 80090f4:	d103      	bne.n	80090fe <__sfputc_r+0x1e>
 80090f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090fa:	f000 bb33 	b.w	8009764 <__swbuf_r>
 80090fe:	6813      	ldr	r3, [r2, #0]
 8009100:	1c58      	adds	r0, r3, #1
 8009102:	6010      	str	r0, [r2, #0]
 8009104:	7019      	strb	r1, [r3, #0]
 8009106:	4608      	mov	r0, r1
 8009108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800910c:	4770      	bx	lr

0800910e <__sfputs_r>:
 800910e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009110:	4606      	mov	r6, r0
 8009112:	460f      	mov	r7, r1
 8009114:	4614      	mov	r4, r2
 8009116:	18d5      	adds	r5, r2, r3
 8009118:	42ac      	cmp	r4, r5
 800911a:	d101      	bne.n	8009120 <__sfputs_r+0x12>
 800911c:	2000      	movs	r0, #0
 800911e:	e007      	b.n	8009130 <__sfputs_r+0x22>
 8009120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009124:	463a      	mov	r2, r7
 8009126:	4630      	mov	r0, r6
 8009128:	f7ff ffda 	bl	80090e0 <__sfputc_r>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d1f3      	bne.n	8009118 <__sfputs_r+0xa>
 8009130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009134 <_vfiprintf_r>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	460d      	mov	r5, r1
 800913a:	b09d      	sub	sp, #116	; 0x74
 800913c:	4614      	mov	r4, r2
 800913e:	4698      	mov	r8, r3
 8009140:	4606      	mov	r6, r0
 8009142:	b118      	cbz	r0, 800914c <_vfiprintf_r+0x18>
 8009144:	6983      	ldr	r3, [r0, #24]
 8009146:	b90b      	cbnz	r3, 800914c <_vfiprintf_r+0x18>
 8009148:	f7ff fd74 	bl	8008c34 <__sinit>
 800914c:	4b89      	ldr	r3, [pc, #548]	; (8009374 <_vfiprintf_r+0x240>)
 800914e:	429d      	cmp	r5, r3
 8009150:	d11b      	bne.n	800918a <_vfiprintf_r+0x56>
 8009152:	6875      	ldr	r5, [r6, #4]
 8009154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009156:	07d9      	lsls	r1, r3, #31
 8009158:	d405      	bmi.n	8009166 <_vfiprintf_r+0x32>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d402      	bmi.n	8009166 <_vfiprintf_r+0x32>
 8009160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009162:	f7ff fe05 	bl	8008d70 <__retarget_lock_acquire_recursive>
 8009166:	89ab      	ldrh	r3, [r5, #12]
 8009168:	071b      	lsls	r3, r3, #28
 800916a:	d501      	bpl.n	8009170 <_vfiprintf_r+0x3c>
 800916c:	692b      	ldr	r3, [r5, #16]
 800916e:	b9eb      	cbnz	r3, 80091ac <_vfiprintf_r+0x78>
 8009170:	4629      	mov	r1, r5
 8009172:	4630      	mov	r0, r6
 8009174:	f000 fb5a 	bl	800982c <__swsetup_r>
 8009178:	b1c0      	cbz	r0, 80091ac <_vfiprintf_r+0x78>
 800917a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800917c:	07dc      	lsls	r4, r3, #31
 800917e:	d50e      	bpl.n	800919e <_vfiprintf_r+0x6a>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	b01d      	add	sp, #116	; 0x74
 8009186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918a:	4b7b      	ldr	r3, [pc, #492]	; (8009378 <_vfiprintf_r+0x244>)
 800918c:	429d      	cmp	r5, r3
 800918e:	d101      	bne.n	8009194 <_vfiprintf_r+0x60>
 8009190:	68b5      	ldr	r5, [r6, #8]
 8009192:	e7df      	b.n	8009154 <_vfiprintf_r+0x20>
 8009194:	4b79      	ldr	r3, [pc, #484]	; (800937c <_vfiprintf_r+0x248>)
 8009196:	429d      	cmp	r5, r3
 8009198:	bf08      	it	eq
 800919a:	68f5      	ldreq	r5, [r6, #12]
 800919c:	e7da      	b.n	8009154 <_vfiprintf_r+0x20>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	0598      	lsls	r0, r3, #22
 80091a2:	d4ed      	bmi.n	8009180 <_vfiprintf_r+0x4c>
 80091a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a6:	f7ff fde4 	bl	8008d72 <__retarget_lock_release_recursive>
 80091aa:	e7e9      	b.n	8009180 <_vfiprintf_r+0x4c>
 80091ac:	2300      	movs	r3, #0
 80091ae:	9309      	str	r3, [sp, #36]	; 0x24
 80091b0:	2320      	movs	r3, #32
 80091b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ba:	2330      	movs	r3, #48	; 0x30
 80091bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009380 <_vfiprintf_r+0x24c>
 80091c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c4:	f04f 0901 	mov.w	r9, #1
 80091c8:	4623      	mov	r3, r4
 80091ca:	469a      	mov	sl, r3
 80091cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d0:	b10a      	cbz	r2, 80091d6 <_vfiprintf_r+0xa2>
 80091d2:	2a25      	cmp	r2, #37	; 0x25
 80091d4:	d1f9      	bne.n	80091ca <_vfiprintf_r+0x96>
 80091d6:	ebba 0b04 	subs.w	fp, sl, r4
 80091da:	d00b      	beq.n	80091f4 <_vfiprintf_r+0xc0>
 80091dc:	465b      	mov	r3, fp
 80091de:	4622      	mov	r2, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff ff93 	bl	800910e <__sfputs_r>
 80091e8:	3001      	adds	r0, #1
 80091ea:	f000 80aa 	beq.w	8009342 <_vfiprintf_r+0x20e>
 80091ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091f0:	445a      	add	r2, fp
 80091f2:	9209      	str	r2, [sp, #36]	; 0x24
 80091f4:	f89a 3000 	ldrb.w	r3, [sl]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 80a2 	beq.w	8009342 <_vfiprintf_r+0x20e>
 80091fe:	2300      	movs	r3, #0
 8009200:	f04f 32ff 	mov.w	r2, #4294967295
 8009204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009208:	f10a 0a01 	add.w	sl, sl, #1
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	9307      	str	r3, [sp, #28]
 8009210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009214:	931a      	str	r3, [sp, #104]	; 0x68
 8009216:	4654      	mov	r4, sl
 8009218:	2205      	movs	r2, #5
 800921a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921e:	4858      	ldr	r0, [pc, #352]	; (8009380 <_vfiprintf_r+0x24c>)
 8009220:	f7f6 ffb6 	bl	8000190 <memchr>
 8009224:	9a04      	ldr	r2, [sp, #16]
 8009226:	b9d8      	cbnz	r0, 8009260 <_vfiprintf_r+0x12c>
 8009228:	06d1      	lsls	r1, r2, #27
 800922a:	bf44      	itt	mi
 800922c:	2320      	movmi	r3, #32
 800922e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009232:	0713      	lsls	r3, r2, #28
 8009234:	bf44      	itt	mi
 8009236:	232b      	movmi	r3, #43	; 0x2b
 8009238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800923c:	f89a 3000 	ldrb.w	r3, [sl]
 8009240:	2b2a      	cmp	r3, #42	; 0x2a
 8009242:	d015      	beq.n	8009270 <_vfiprintf_r+0x13c>
 8009244:	9a07      	ldr	r2, [sp, #28]
 8009246:	4654      	mov	r4, sl
 8009248:	2000      	movs	r0, #0
 800924a:	f04f 0c0a 	mov.w	ip, #10
 800924e:	4621      	mov	r1, r4
 8009250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009254:	3b30      	subs	r3, #48	; 0x30
 8009256:	2b09      	cmp	r3, #9
 8009258:	d94e      	bls.n	80092f8 <_vfiprintf_r+0x1c4>
 800925a:	b1b0      	cbz	r0, 800928a <_vfiprintf_r+0x156>
 800925c:	9207      	str	r2, [sp, #28]
 800925e:	e014      	b.n	800928a <_vfiprintf_r+0x156>
 8009260:	eba0 0308 	sub.w	r3, r0, r8
 8009264:	fa09 f303 	lsl.w	r3, r9, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	46a2      	mov	sl, r4
 800926e:	e7d2      	b.n	8009216 <_vfiprintf_r+0xe2>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	1d19      	adds	r1, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	9103      	str	r1, [sp, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	bfbb      	ittet	lt
 800927c:	425b      	neglt	r3, r3
 800927e:	f042 0202 	orrlt.w	r2, r2, #2
 8009282:	9307      	strge	r3, [sp, #28]
 8009284:	9307      	strlt	r3, [sp, #28]
 8009286:	bfb8      	it	lt
 8009288:	9204      	strlt	r2, [sp, #16]
 800928a:	7823      	ldrb	r3, [r4, #0]
 800928c:	2b2e      	cmp	r3, #46	; 0x2e
 800928e:	d10c      	bne.n	80092aa <_vfiprintf_r+0x176>
 8009290:	7863      	ldrb	r3, [r4, #1]
 8009292:	2b2a      	cmp	r3, #42	; 0x2a
 8009294:	d135      	bne.n	8009302 <_vfiprintf_r+0x1ce>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	1d1a      	adds	r2, r3, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	9203      	str	r2, [sp, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bfb8      	it	lt
 80092a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80092a6:	3402      	adds	r4, #2
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009390 <_vfiprintf_r+0x25c>
 80092ae:	7821      	ldrb	r1, [r4, #0]
 80092b0:	2203      	movs	r2, #3
 80092b2:	4650      	mov	r0, sl
 80092b4:	f7f6 ff6c 	bl	8000190 <memchr>
 80092b8:	b140      	cbz	r0, 80092cc <_vfiprintf_r+0x198>
 80092ba:	2340      	movs	r3, #64	; 0x40
 80092bc:	eba0 000a 	sub.w	r0, r0, sl
 80092c0:	fa03 f000 	lsl.w	r0, r3, r0
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	4303      	orrs	r3, r0
 80092c8:	3401      	adds	r4, #1
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d0:	482c      	ldr	r0, [pc, #176]	; (8009384 <_vfiprintf_r+0x250>)
 80092d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092d6:	2206      	movs	r2, #6
 80092d8:	f7f6 ff5a 	bl	8000190 <memchr>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d03f      	beq.n	8009360 <_vfiprintf_r+0x22c>
 80092e0:	4b29      	ldr	r3, [pc, #164]	; (8009388 <_vfiprintf_r+0x254>)
 80092e2:	bb1b      	cbnz	r3, 800932c <_vfiprintf_r+0x1f8>
 80092e4:	9b03      	ldr	r3, [sp, #12]
 80092e6:	3307      	adds	r3, #7
 80092e8:	f023 0307 	bic.w	r3, r3, #7
 80092ec:	3308      	adds	r3, #8
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f2:	443b      	add	r3, r7
 80092f4:	9309      	str	r3, [sp, #36]	; 0x24
 80092f6:	e767      	b.n	80091c8 <_vfiprintf_r+0x94>
 80092f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092fc:	460c      	mov	r4, r1
 80092fe:	2001      	movs	r0, #1
 8009300:	e7a5      	b.n	800924e <_vfiprintf_r+0x11a>
 8009302:	2300      	movs	r3, #0
 8009304:	3401      	adds	r4, #1
 8009306:	9305      	str	r3, [sp, #20]
 8009308:	4619      	mov	r1, r3
 800930a:	f04f 0c0a 	mov.w	ip, #10
 800930e:	4620      	mov	r0, r4
 8009310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009314:	3a30      	subs	r2, #48	; 0x30
 8009316:	2a09      	cmp	r2, #9
 8009318:	d903      	bls.n	8009322 <_vfiprintf_r+0x1ee>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0c5      	beq.n	80092aa <_vfiprintf_r+0x176>
 800931e:	9105      	str	r1, [sp, #20]
 8009320:	e7c3      	b.n	80092aa <_vfiprintf_r+0x176>
 8009322:	fb0c 2101 	mla	r1, ip, r1, r2
 8009326:	4604      	mov	r4, r0
 8009328:	2301      	movs	r3, #1
 800932a:	e7f0      	b.n	800930e <_vfiprintf_r+0x1da>
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	462a      	mov	r2, r5
 8009332:	4b16      	ldr	r3, [pc, #88]	; (800938c <_vfiprintf_r+0x258>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	4630      	mov	r0, r6
 8009338:	f3af 8000 	nop.w
 800933c:	4607      	mov	r7, r0
 800933e:	1c78      	adds	r0, r7, #1
 8009340:	d1d6      	bne.n	80092f0 <_vfiprintf_r+0x1bc>
 8009342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009344:	07d9      	lsls	r1, r3, #31
 8009346:	d405      	bmi.n	8009354 <_vfiprintf_r+0x220>
 8009348:	89ab      	ldrh	r3, [r5, #12]
 800934a:	059a      	lsls	r2, r3, #22
 800934c:	d402      	bmi.n	8009354 <_vfiprintf_r+0x220>
 800934e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009350:	f7ff fd0f 	bl	8008d72 <__retarget_lock_release_recursive>
 8009354:	89ab      	ldrh	r3, [r5, #12]
 8009356:	065b      	lsls	r3, r3, #25
 8009358:	f53f af12 	bmi.w	8009180 <_vfiprintf_r+0x4c>
 800935c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800935e:	e711      	b.n	8009184 <_vfiprintf_r+0x50>
 8009360:	ab03      	add	r3, sp, #12
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	462a      	mov	r2, r5
 8009366:	4b09      	ldr	r3, [pc, #36]	; (800938c <_vfiprintf_r+0x258>)
 8009368:	a904      	add	r1, sp, #16
 800936a:	4630      	mov	r0, r6
 800936c:	f000 f880 	bl	8009470 <_printf_i>
 8009370:	e7e4      	b.n	800933c <_vfiprintf_r+0x208>
 8009372:	bf00      	nop
 8009374:	0800a3ec 	.word	0x0800a3ec
 8009378:	0800a40c 	.word	0x0800a40c
 800937c:	0800a3cc 	.word	0x0800a3cc
 8009380:	0800a42c 	.word	0x0800a42c
 8009384:	0800a436 	.word	0x0800a436
 8009388:	00000000 	.word	0x00000000
 800938c:	0800910f 	.word	0x0800910f
 8009390:	0800a432 	.word	0x0800a432

08009394 <_printf_common>:
 8009394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009398:	4616      	mov	r6, r2
 800939a:	4699      	mov	r9, r3
 800939c:	688a      	ldr	r2, [r1, #8]
 800939e:	690b      	ldr	r3, [r1, #16]
 80093a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a4:	4293      	cmp	r3, r2
 80093a6:	bfb8      	it	lt
 80093a8:	4613      	movlt	r3, r2
 80093aa:	6033      	str	r3, [r6, #0]
 80093ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093b0:	4607      	mov	r7, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	b10a      	cbz	r2, 80093ba <_printf_common+0x26>
 80093b6:	3301      	adds	r3, #1
 80093b8:	6033      	str	r3, [r6, #0]
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	0699      	lsls	r1, r3, #26
 80093be:	bf42      	ittt	mi
 80093c0:	6833      	ldrmi	r3, [r6, #0]
 80093c2:	3302      	addmi	r3, #2
 80093c4:	6033      	strmi	r3, [r6, #0]
 80093c6:	6825      	ldr	r5, [r4, #0]
 80093c8:	f015 0506 	ands.w	r5, r5, #6
 80093cc:	d106      	bne.n	80093dc <_printf_common+0x48>
 80093ce:	f104 0a19 	add.w	sl, r4, #25
 80093d2:	68e3      	ldr	r3, [r4, #12]
 80093d4:	6832      	ldr	r2, [r6, #0]
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	42ab      	cmp	r3, r5
 80093da:	dc26      	bgt.n	800942a <_printf_common+0x96>
 80093dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093e0:	1e13      	subs	r3, r2, #0
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	bf18      	it	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	0692      	lsls	r2, r2, #26
 80093ea:	d42b      	bmi.n	8009444 <_printf_common+0xb0>
 80093ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093f0:	4649      	mov	r1, r9
 80093f2:	4638      	mov	r0, r7
 80093f4:	47c0      	blx	r8
 80093f6:	3001      	adds	r0, #1
 80093f8:	d01e      	beq.n	8009438 <_printf_common+0xa4>
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	68e5      	ldr	r5, [r4, #12]
 80093fe:	6832      	ldr	r2, [r6, #0]
 8009400:	f003 0306 	and.w	r3, r3, #6
 8009404:	2b04      	cmp	r3, #4
 8009406:	bf08      	it	eq
 8009408:	1aad      	subeq	r5, r5, r2
 800940a:	68a3      	ldr	r3, [r4, #8]
 800940c:	6922      	ldr	r2, [r4, #16]
 800940e:	bf0c      	ite	eq
 8009410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009414:	2500      	movne	r5, #0
 8009416:	4293      	cmp	r3, r2
 8009418:	bfc4      	itt	gt
 800941a:	1a9b      	subgt	r3, r3, r2
 800941c:	18ed      	addgt	r5, r5, r3
 800941e:	2600      	movs	r6, #0
 8009420:	341a      	adds	r4, #26
 8009422:	42b5      	cmp	r5, r6
 8009424:	d11a      	bne.n	800945c <_printf_common+0xc8>
 8009426:	2000      	movs	r0, #0
 8009428:	e008      	b.n	800943c <_printf_common+0xa8>
 800942a:	2301      	movs	r3, #1
 800942c:	4652      	mov	r2, sl
 800942e:	4649      	mov	r1, r9
 8009430:	4638      	mov	r0, r7
 8009432:	47c0      	blx	r8
 8009434:	3001      	adds	r0, #1
 8009436:	d103      	bne.n	8009440 <_printf_common+0xac>
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009440:	3501      	adds	r5, #1
 8009442:	e7c6      	b.n	80093d2 <_printf_common+0x3e>
 8009444:	18e1      	adds	r1, r4, r3
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	2030      	movs	r0, #48	; 0x30
 800944a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944e:	4422      	add	r2, r4
 8009450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009458:	3302      	adds	r3, #2
 800945a:	e7c7      	b.n	80093ec <_printf_common+0x58>
 800945c:	2301      	movs	r3, #1
 800945e:	4622      	mov	r2, r4
 8009460:	4649      	mov	r1, r9
 8009462:	4638      	mov	r0, r7
 8009464:	47c0      	blx	r8
 8009466:	3001      	adds	r0, #1
 8009468:	d0e6      	beq.n	8009438 <_printf_common+0xa4>
 800946a:	3601      	adds	r6, #1
 800946c:	e7d9      	b.n	8009422 <_printf_common+0x8e>
	...

08009470 <_printf_i>:
 8009470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009474:	460c      	mov	r4, r1
 8009476:	4691      	mov	r9, r2
 8009478:	7e27      	ldrb	r7, [r4, #24]
 800947a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800947c:	2f78      	cmp	r7, #120	; 0x78
 800947e:	4680      	mov	r8, r0
 8009480:	469a      	mov	sl, r3
 8009482:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009486:	d807      	bhi.n	8009498 <_printf_i+0x28>
 8009488:	2f62      	cmp	r7, #98	; 0x62
 800948a:	d80a      	bhi.n	80094a2 <_printf_i+0x32>
 800948c:	2f00      	cmp	r7, #0
 800948e:	f000 80d8 	beq.w	8009642 <_printf_i+0x1d2>
 8009492:	2f58      	cmp	r7, #88	; 0x58
 8009494:	f000 80a3 	beq.w	80095de <_printf_i+0x16e>
 8009498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800949c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094a0:	e03a      	b.n	8009518 <_printf_i+0xa8>
 80094a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094a6:	2b15      	cmp	r3, #21
 80094a8:	d8f6      	bhi.n	8009498 <_printf_i+0x28>
 80094aa:	a001      	add	r0, pc, #4	; (adr r0, 80094b0 <_printf_i+0x40>)
 80094ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094b0:	08009509 	.word	0x08009509
 80094b4:	0800951d 	.word	0x0800951d
 80094b8:	08009499 	.word	0x08009499
 80094bc:	08009499 	.word	0x08009499
 80094c0:	08009499 	.word	0x08009499
 80094c4:	08009499 	.word	0x08009499
 80094c8:	0800951d 	.word	0x0800951d
 80094cc:	08009499 	.word	0x08009499
 80094d0:	08009499 	.word	0x08009499
 80094d4:	08009499 	.word	0x08009499
 80094d8:	08009499 	.word	0x08009499
 80094dc:	08009629 	.word	0x08009629
 80094e0:	0800954d 	.word	0x0800954d
 80094e4:	0800960b 	.word	0x0800960b
 80094e8:	08009499 	.word	0x08009499
 80094ec:	08009499 	.word	0x08009499
 80094f0:	0800964b 	.word	0x0800964b
 80094f4:	08009499 	.word	0x08009499
 80094f8:	0800954d 	.word	0x0800954d
 80094fc:	08009499 	.word	0x08009499
 8009500:	08009499 	.word	0x08009499
 8009504:	08009613 	.word	0x08009613
 8009508:	680b      	ldr	r3, [r1, #0]
 800950a:	1d1a      	adds	r2, r3, #4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	600a      	str	r2, [r1, #0]
 8009510:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009518:	2301      	movs	r3, #1
 800951a:	e0a3      	b.n	8009664 <_printf_i+0x1f4>
 800951c:	6825      	ldr	r5, [r4, #0]
 800951e:	6808      	ldr	r0, [r1, #0]
 8009520:	062e      	lsls	r6, r5, #24
 8009522:	f100 0304 	add.w	r3, r0, #4
 8009526:	d50a      	bpl.n	800953e <_printf_i+0xce>
 8009528:	6805      	ldr	r5, [r0, #0]
 800952a:	600b      	str	r3, [r1, #0]
 800952c:	2d00      	cmp	r5, #0
 800952e:	da03      	bge.n	8009538 <_printf_i+0xc8>
 8009530:	232d      	movs	r3, #45	; 0x2d
 8009532:	426d      	negs	r5, r5
 8009534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009538:	485e      	ldr	r0, [pc, #376]	; (80096b4 <_printf_i+0x244>)
 800953a:	230a      	movs	r3, #10
 800953c:	e019      	b.n	8009572 <_printf_i+0x102>
 800953e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009542:	6805      	ldr	r5, [r0, #0]
 8009544:	600b      	str	r3, [r1, #0]
 8009546:	bf18      	it	ne
 8009548:	b22d      	sxthne	r5, r5
 800954a:	e7ef      	b.n	800952c <_printf_i+0xbc>
 800954c:	680b      	ldr	r3, [r1, #0]
 800954e:	6825      	ldr	r5, [r4, #0]
 8009550:	1d18      	adds	r0, r3, #4
 8009552:	6008      	str	r0, [r1, #0]
 8009554:	0628      	lsls	r0, r5, #24
 8009556:	d501      	bpl.n	800955c <_printf_i+0xec>
 8009558:	681d      	ldr	r5, [r3, #0]
 800955a:	e002      	b.n	8009562 <_printf_i+0xf2>
 800955c:	0669      	lsls	r1, r5, #25
 800955e:	d5fb      	bpl.n	8009558 <_printf_i+0xe8>
 8009560:	881d      	ldrh	r5, [r3, #0]
 8009562:	4854      	ldr	r0, [pc, #336]	; (80096b4 <_printf_i+0x244>)
 8009564:	2f6f      	cmp	r7, #111	; 0x6f
 8009566:	bf0c      	ite	eq
 8009568:	2308      	moveq	r3, #8
 800956a:	230a      	movne	r3, #10
 800956c:	2100      	movs	r1, #0
 800956e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009572:	6866      	ldr	r6, [r4, #4]
 8009574:	60a6      	str	r6, [r4, #8]
 8009576:	2e00      	cmp	r6, #0
 8009578:	bfa2      	ittt	ge
 800957a:	6821      	ldrge	r1, [r4, #0]
 800957c:	f021 0104 	bicge.w	r1, r1, #4
 8009580:	6021      	strge	r1, [r4, #0]
 8009582:	b90d      	cbnz	r5, 8009588 <_printf_i+0x118>
 8009584:	2e00      	cmp	r6, #0
 8009586:	d04d      	beq.n	8009624 <_printf_i+0x1b4>
 8009588:	4616      	mov	r6, r2
 800958a:	fbb5 f1f3 	udiv	r1, r5, r3
 800958e:	fb03 5711 	mls	r7, r3, r1, r5
 8009592:	5dc7      	ldrb	r7, [r0, r7]
 8009594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009598:	462f      	mov	r7, r5
 800959a:	42bb      	cmp	r3, r7
 800959c:	460d      	mov	r5, r1
 800959e:	d9f4      	bls.n	800958a <_printf_i+0x11a>
 80095a0:	2b08      	cmp	r3, #8
 80095a2:	d10b      	bne.n	80095bc <_printf_i+0x14c>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	07df      	lsls	r7, r3, #31
 80095a8:	d508      	bpl.n	80095bc <_printf_i+0x14c>
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	6861      	ldr	r1, [r4, #4]
 80095ae:	4299      	cmp	r1, r3
 80095b0:	bfde      	ittt	le
 80095b2:	2330      	movle	r3, #48	; 0x30
 80095b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095bc:	1b92      	subs	r2, r2, r6
 80095be:	6122      	str	r2, [r4, #16]
 80095c0:	f8cd a000 	str.w	sl, [sp]
 80095c4:	464b      	mov	r3, r9
 80095c6:	aa03      	add	r2, sp, #12
 80095c8:	4621      	mov	r1, r4
 80095ca:	4640      	mov	r0, r8
 80095cc:	f7ff fee2 	bl	8009394 <_printf_common>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d14c      	bne.n	800966e <_printf_i+0x1fe>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	b004      	add	sp, #16
 80095da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095de:	4835      	ldr	r0, [pc, #212]	; (80096b4 <_printf_i+0x244>)
 80095e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	680e      	ldr	r6, [r1, #0]
 80095e8:	061f      	lsls	r7, r3, #24
 80095ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80095ee:	600e      	str	r6, [r1, #0]
 80095f0:	d514      	bpl.n	800961c <_printf_i+0x1ac>
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	bf44      	itt	mi
 80095f6:	f043 0320 	orrmi.w	r3, r3, #32
 80095fa:	6023      	strmi	r3, [r4, #0]
 80095fc:	b91d      	cbnz	r5, 8009606 <_printf_i+0x196>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	f023 0320 	bic.w	r3, r3, #32
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	2310      	movs	r3, #16
 8009608:	e7b0      	b.n	800956c <_printf_i+0xfc>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	f043 0320 	orr.w	r3, r3, #32
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	2378      	movs	r3, #120	; 0x78
 8009614:	4828      	ldr	r0, [pc, #160]	; (80096b8 <_printf_i+0x248>)
 8009616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800961a:	e7e3      	b.n	80095e4 <_printf_i+0x174>
 800961c:	065e      	lsls	r6, r3, #25
 800961e:	bf48      	it	mi
 8009620:	b2ad      	uxthmi	r5, r5
 8009622:	e7e6      	b.n	80095f2 <_printf_i+0x182>
 8009624:	4616      	mov	r6, r2
 8009626:	e7bb      	b.n	80095a0 <_printf_i+0x130>
 8009628:	680b      	ldr	r3, [r1, #0]
 800962a:	6826      	ldr	r6, [r4, #0]
 800962c:	6960      	ldr	r0, [r4, #20]
 800962e:	1d1d      	adds	r5, r3, #4
 8009630:	600d      	str	r5, [r1, #0]
 8009632:	0635      	lsls	r5, r6, #24
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	d501      	bpl.n	800963c <_printf_i+0x1cc>
 8009638:	6018      	str	r0, [r3, #0]
 800963a:	e002      	b.n	8009642 <_printf_i+0x1d2>
 800963c:	0671      	lsls	r1, r6, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0x1c8>
 8009640:	8018      	strh	r0, [r3, #0]
 8009642:	2300      	movs	r3, #0
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	4616      	mov	r6, r2
 8009648:	e7ba      	b.n	80095c0 <_printf_i+0x150>
 800964a:	680b      	ldr	r3, [r1, #0]
 800964c:	1d1a      	adds	r2, r3, #4
 800964e:	600a      	str	r2, [r1, #0]
 8009650:	681e      	ldr	r6, [r3, #0]
 8009652:	6862      	ldr	r2, [r4, #4]
 8009654:	2100      	movs	r1, #0
 8009656:	4630      	mov	r0, r6
 8009658:	f7f6 fd9a 	bl	8000190 <memchr>
 800965c:	b108      	cbz	r0, 8009662 <_printf_i+0x1f2>
 800965e:	1b80      	subs	r0, r0, r6
 8009660:	6060      	str	r0, [r4, #4]
 8009662:	6863      	ldr	r3, [r4, #4]
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	2300      	movs	r3, #0
 8009668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800966c:	e7a8      	b.n	80095c0 <_printf_i+0x150>
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	4632      	mov	r2, r6
 8009672:	4649      	mov	r1, r9
 8009674:	4640      	mov	r0, r8
 8009676:	47d0      	blx	sl
 8009678:	3001      	adds	r0, #1
 800967a:	d0ab      	beq.n	80095d4 <_printf_i+0x164>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	079b      	lsls	r3, r3, #30
 8009680:	d413      	bmi.n	80096aa <_printf_i+0x23a>
 8009682:	68e0      	ldr	r0, [r4, #12]
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	4298      	cmp	r0, r3
 8009688:	bfb8      	it	lt
 800968a:	4618      	movlt	r0, r3
 800968c:	e7a4      	b.n	80095d8 <_printf_i+0x168>
 800968e:	2301      	movs	r3, #1
 8009690:	4632      	mov	r2, r6
 8009692:	4649      	mov	r1, r9
 8009694:	4640      	mov	r0, r8
 8009696:	47d0      	blx	sl
 8009698:	3001      	adds	r0, #1
 800969a:	d09b      	beq.n	80095d4 <_printf_i+0x164>
 800969c:	3501      	adds	r5, #1
 800969e:	68e3      	ldr	r3, [r4, #12]
 80096a0:	9903      	ldr	r1, [sp, #12]
 80096a2:	1a5b      	subs	r3, r3, r1
 80096a4:	42ab      	cmp	r3, r5
 80096a6:	dcf2      	bgt.n	800968e <_printf_i+0x21e>
 80096a8:	e7eb      	b.n	8009682 <_printf_i+0x212>
 80096aa:	2500      	movs	r5, #0
 80096ac:	f104 0619 	add.w	r6, r4, #25
 80096b0:	e7f5      	b.n	800969e <_printf_i+0x22e>
 80096b2:	bf00      	nop
 80096b4:	0800a43d 	.word	0x0800a43d
 80096b8:	0800a44e 	.word	0x0800a44e

080096bc <_sbrk_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d06      	ldr	r5, [pc, #24]	; (80096d8 <_sbrk_r+0x1c>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	f7f8 f8e8 	bl	800189c <_sbrk>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_sbrk_r+0x1a>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_sbrk_r+0x1a>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	20001688 	.word	0x20001688

080096dc <__sread>:
 80096dc:	b510      	push	{r4, lr}
 80096de:	460c      	mov	r4, r1
 80096e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e4:	f000 faf4 	bl	8009cd0 <_read_r>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	bfab      	itete	ge
 80096ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096ee:	89a3      	ldrhlt	r3, [r4, #12]
 80096f0:	181b      	addge	r3, r3, r0
 80096f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096f6:	bfac      	ite	ge
 80096f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80096fa:	81a3      	strhlt	r3, [r4, #12]
 80096fc:	bd10      	pop	{r4, pc}

080096fe <__swrite>:
 80096fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009702:	461f      	mov	r7, r3
 8009704:	898b      	ldrh	r3, [r1, #12]
 8009706:	05db      	lsls	r3, r3, #23
 8009708:	4605      	mov	r5, r0
 800970a:	460c      	mov	r4, r1
 800970c:	4616      	mov	r6, r2
 800970e:	d505      	bpl.n	800971c <__swrite+0x1e>
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	2302      	movs	r3, #2
 8009716:	2200      	movs	r2, #0
 8009718:	f000 f9c8 	bl	8009aac <_lseek_r>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	4632      	mov	r2, r6
 800972a:	463b      	mov	r3, r7
 800972c:	4628      	mov	r0, r5
 800972e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	f000 b869 	b.w	8009808 <_write_r>

08009736 <__sseek>:
 8009736:	b510      	push	{r4, lr}
 8009738:	460c      	mov	r4, r1
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f000 f9b5 	bl	8009aac <_lseek_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	bf15      	itete	ne
 8009748:	6560      	strne	r0, [r4, #84]	; 0x54
 800974a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800974e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009752:	81a3      	strheq	r3, [r4, #12]
 8009754:	bf18      	it	ne
 8009756:	81a3      	strhne	r3, [r4, #12]
 8009758:	bd10      	pop	{r4, pc}

0800975a <__sclose>:
 800975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975e:	f000 b8d3 	b.w	8009908 <_close_r>
	...

08009764 <__swbuf_r>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	460e      	mov	r6, r1
 8009768:	4614      	mov	r4, r2
 800976a:	4605      	mov	r5, r0
 800976c:	b118      	cbz	r0, 8009776 <__swbuf_r+0x12>
 800976e:	6983      	ldr	r3, [r0, #24]
 8009770:	b90b      	cbnz	r3, 8009776 <__swbuf_r+0x12>
 8009772:	f7ff fa5f 	bl	8008c34 <__sinit>
 8009776:	4b21      	ldr	r3, [pc, #132]	; (80097fc <__swbuf_r+0x98>)
 8009778:	429c      	cmp	r4, r3
 800977a:	d12b      	bne.n	80097d4 <__swbuf_r+0x70>
 800977c:	686c      	ldr	r4, [r5, #4]
 800977e:	69a3      	ldr	r3, [r4, #24]
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	071a      	lsls	r2, r3, #28
 8009786:	d52f      	bpl.n	80097e8 <__swbuf_r+0x84>
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	b36b      	cbz	r3, 80097e8 <__swbuf_r+0x84>
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	1ac0      	subs	r0, r0, r3
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	b2f6      	uxtb	r6, r6
 8009796:	4283      	cmp	r3, r0
 8009798:	4637      	mov	r7, r6
 800979a:	dc04      	bgt.n	80097a6 <__swbuf_r+0x42>
 800979c:	4621      	mov	r1, r4
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 f948 	bl	8009a34 <_fflush_r>
 80097a4:	bb30      	cbnz	r0, 80097f4 <__swbuf_r+0x90>
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	6022      	str	r2, [r4, #0]
 80097b2:	701e      	strb	r6, [r3, #0]
 80097b4:	6963      	ldr	r3, [r4, #20]
 80097b6:	3001      	adds	r0, #1
 80097b8:	4283      	cmp	r3, r0
 80097ba:	d004      	beq.n	80097c6 <__swbuf_r+0x62>
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	07db      	lsls	r3, r3, #31
 80097c0:	d506      	bpl.n	80097d0 <__swbuf_r+0x6c>
 80097c2:	2e0a      	cmp	r6, #10
 80097c4:	d104      	bne.n	80097d0 <__swbuf_r+0x6c>
 80097c6:	4621      	mov	r1, r4
 80097c8:	4628      	mov	r0, r5
 80097ca:	f000 f933 	bl	8009a34 <_fflush_r>
 80097ce:	b988      	cbnz	r0, 80097f4 <__swbuf_r+0x90>
 80097d0:	4638      	mov	r0, r7
 80097d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d4:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <__swbuf_r+0x9c>)
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d101      	bne.n	80097de <__swbuf_r+0x7a>
 80097da:	68ac      	ldr	r4, [r5, #8]
 80097dc:	e7cf      	b.n	800977e <__swbuf_r+0x1a>
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <__swbuf_r+0xa0>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	bf08      	it	eq
 80097e4:	68ec      	ldreq	r4, [r5, #12]
 80097e6:	e7ca      	b.n	800977e <__swbuf_r+0x1a>
 80097e8:	4621      	mov	r1, r4
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 f81e 	bl	800982c <__swsetup_r>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d0cb      	beq.n	800978c <__swbuf_r+0x28>
 80097f4:	f04f 37ff 	mov.w	r7, #4294967295
 80097f8:	e7ea      	b.n	80097d0 <__swbuf_r+0x6c>
 80097fa:	bf00      	nop
 80097fc:	0800a3ec 	.word	0x0800a3ec
 8009800:	0800a40c 	.word	0x0800a40c
 8009804:	0800a3cc 	.word	0x0800a3cc

08009808 <_write_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	; (8009828 <_write_r+0x20>)
 800980c:	4604      	mov	r4, r0
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	2200      	movs	r2, #0
 8009814:	602a      	str	r2, [r5, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f7fd fcde 	bl	80071d8 <_write>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_write_r+0x1e>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_write_r+0x1e>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20001688 	.word	0x20001688

0800982c <__swsetup_r>:
 800982c:	4b32      	ldr	r3, [pc, #200]	; (80098f8 <__swsetup_r+0xcc>)
 800982e:	b570      	push	{r4, r5, r6, lr}
 8009830:	681d      	ldr	r5, [r3, #0]
 8009832:	4606      	mov	r6, r0
 8009834:	460c      	mov	r4, r1
 8009836:	b125      	cbz	r5, 8009842 <__swsetup_r+0x16>
 8009838:	69ab      	ldr	r3, [r5, #24]
 800983a:	b913      	cbnz	r3, 8009842 <__swsetup_r+0x16>
 800983c:	4628      	mov	r0, r5
 800983e:	f7ff f9f9 	bl	8008c34 <__sinit>
 8009842:	4b2e      	ldr	r3, [pc, #184]	; (80098fc <__swsetup_r+0xd0>)
 8009844:	429c      	cmp	r4, r3
 8009846:	d10f      	bne.n	8009868 <__swsetup_r+0x3c>
 8009848:	686c      	ldr	r4, [r5, #4]
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009850:	0719      	lsls	r1, r3, #28
 8009852:	d42c      	bmi.n	80098ae <__swsetup_r+0x82>
 8009854:	06dd      	lsls	r5, r3, #27
 8009856:	d411      	bmi.n	800987c <__swsetup_r+0x50>
 8009858:	2309      	movs	r3, #9
 800985a:	6033      	str	r3, [r6, #0]
 800985c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	e03e      	b.n	80098e6 <__swsetup_r+0xba>
 8009868:	4b25      	ldr	r3, [pc, #148]	; (8009900 <__swsetup_r+0xd4>)
 800986a:	429c      	cmp	r4, r3
 800986c:	d101      	bne.n	8009872 <__swsetup_r+0x46>
 800986e:	68ac      	ldr	r4, [r5, #8]
 8009870:	e7eb      	b.n	800984a <__swsetup_r+0x1e>
 8009872:	4b24      	ldr	r3, [pc, #144]	; (8009904 <__swsetup_r+0xd8>)
 8009874:	429c      	cmp	r4, r3
 8009876:	bf08      	it	eq
 8009878:	68ec      	ldreq	r4, [r5, #12]
 800987a:	e7e6      	b.n	800984a <__swsetup_r+0x1e>
 800987c:	0758      	lsls	r0, r3, #29
 800987e:	d512      	bpl.n	80098a6 <__swsetup_r+0x7a>
 8009880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009882:	b141      	cbz	r1, 8009896 <__swsetup_r+0x6a>
 8009884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009888:	4299      	cmp	r1, r3
 800988a:	d002      	beq.n	8009892 <__swsetup_r+0x66>
 800988c:	4630      	mov	r0, r6
 800988e:	f000 f9a9 	bl	8009be4 <_free_r>
 8009892:	2300      	movs	r3, #0
 8009894:	6363      	str	r3, [r4, #52]	; 0x34
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	2300      	movs	r3, #0
 80098a0:	6063      	str	r3, [r4, #4]
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f043 0308 	orr.w	r3, r3, #8
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	b94b      	cbnz	r3, 80098c6 <__swsetup_r+0x9a>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098bc:	d003      	beq.n	80098c6 <__swsetup_r+0x9a>
 80098be:	4621      	mov	r1, r4
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 f929 	bl	8009b18 <__smakebuf_r>
 80098c6:	89a0      	ldrh	r0, [r4, #12]
 80098c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098cc:	f010 0301 	ands.w	r3, r0, #1
 80098d0:	d00a      	beq.n	80098e8 <__swsetup_r+0xbc>
 80098d2:	2300      	movs	r3, #0
 80098d4:	60a3      	str	r3, [r4, #8]
 80098d6:	6963      	ldr	r3, [r4, #20]
 80098d8:	425b      	negs	r3, r3
 80098da:	61a3      	str	r3, [r4, #24]
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	b943      	cbnz	r3, 80098f2 <__swsetup_r+0xc6>
 80098e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098e4:	d1ba      	bne.n	800985c <__swsetup_r+0x30>
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	0781      	lsls	r1, r0, #30
 80098ea:	bf58      	it	pl
 80098ec:	6963      	ldrpl	r3, [r4, #20]
 80098ee:	60a3      	str	r3, [r4, #8]
 80098f0:	e7f4      	b.n	80098dc <__swsetup_r+0xb0>
 80098f2:	2000      	movs	r0, #0
 80098f4:	e7f7      	b.n	80098e6 <__swsetup_r+0xba>
 80098f6:	bf00      	nop
 80098f8:	20000034 	.word	0x20000034
 80098fc:	0800a3ec 	.word	0x0800a3ec
 8009900:	0800a40c 	.word	0x0800a40c
 8009904:	0800a3cc 	.word	0x0800a3cc

08009908 <_close_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d06      	ldr	r5, [pc, #24]	; (8009924 <_close_r+0x1c>)
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	4608      	mov	r0, r1
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	f7f7 ff8d 	bl	8001832 <_close>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_close_r+0x1a>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_close_r+0x1a>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	20001688 	.word	0x20001688

08009928 <__sflush_r>:
 8009928:	898a      	ldrh	r2, [r1, #12]
 800992a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	4605      	mov	r5, r0
 8009930:	0710      	lsls	r0, r2, #28
 8009932:	460c      	mov	r4, r1
 8009934:	d458      	bmi.n	80099e8 <__sflush_r+0xc0>
 8009936:	684b      	ldr	r3, [r1, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	dc05      	bgt.n	8009948 <__sflush_r+0x20>
 800993c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800993e:	2b00      	cmp	r3, #0
 8009940:	dc02      	bgt.n	8009948 <__sflush_r+0x20>
 8009942:	2000      	movs	r0, #0
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800994a:	2e00      	cmp	r6, #0
 800994c:	d0f9      	beq.n	8009942 <__sflush_r+0x1a>
 800994e:	2300      	movs	r3, #0
 8009950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009954:	682f      	ldr	r7, [r5, #0]
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	d032      	beq.n	80099c0 <__sflush_r+0x98>
 800995a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	075a      	lsls	r2, r3, #29
 8009960:	d505      	bpl.n	800996e <__sflush_r+0x46>
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	1ac0      	subs	r0, r0, r3
 8009966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009968:	b10b      	cbz	r3, 800996e <__sflush_r+0x46>
 800996a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800996c:	1ac0      	subs	r0, r0, r3
 800996e:	2300      	movs	r3, #0
 8009970:	4602      	mov	r2, r0
 8009972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009974:	6a21      	ldr	r1, [r4, #32]
 8009976:	4628      	mov	r0, r5
 8009978:	47b0      	blx	r6
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	d106      	bne.n	800998e <__sflush_r+0x66>
 8009980:	6829      	ldr	r1, [r5, #0]
 8009982:	291d      	cmp	r1, #29
 8009984:	d82c      	bhi.n	80099e0 <__sflush_r+0xb8>
 8009986:	4a2a      	ldr	r2, [pc, #168]	; (8009a30 <__sflush_r+0x108>)
 8009988:	40ca      	lsrs	r2, r1
 800998a:	07d6      	lsls	r6, r2, #31
 800998c:	d528      	bpl.n	80099e0 <__sflush_r+0xb8>
 800998e:	2200      	movs	r2, #0
 8009990:	6062      	str	r2, [r4, #4]
 8009992:	04d9      	lsls	r1, r3, #19
 8009994:	6922      	ldr	r2, [r4, #16]
 8009996:	6022      	str	r2, [r4, #0]
 8009998:	d504      	bpl.n	80099a4 <__sflush_r+0x7c>
 800999a:	1c42      	adds	r2, r0, #1
 800999c:	d101      	bne.n	80099a2 <__sflush_r+0x7a>
 800999e:	682b      	ldr	r3, [r5, #0]
 80099a0:	b903      	cbnz	r3, 80099a4 <__sflush_r+0x7c>
 80099a2:	6560      	str	r0, [r4, #84]	; 0x54
 80099a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099a6:	602f      	str	r7, [r5, #0]
 80099a8:	2900      	cmp	r1, #0
 80099aa:	d0ca      	beq.n	8009942 <__sflush_r+0x1a>
 80099ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099b0:	4299      	cmp	r1, r3
 80099b2:	d002      	beq.n	80099ba <__sflush_r+0x92>
 80099b4:	4628      	mov	r0, r5
 80099b6:	f000 f915 	bl	8009be4 <_free_r>
 80099ba:	2000      	movs	r0, #0
 80099bc:	6360      	str	r0, [r4, #52]	; 0x34
 80099be:	e7c1      	b.n	8009944 <__sflush_r+0x1c>
 80099c0:	6a21      	ldr	r1, [r4, #32]
 80099c2:	2301      	movs	r3, #1
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b0      	blx	r6
 80099c8:	1c41      	adds	r1, r0, #1
 80099ca:	d1c7      	bne.n	800995c <__sflush_r+0x34>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0c4      	beq.n	800995c <__sflush_r+0x34>
 80099d2:	2b1d      	cmp	r3, #29
 80099d4:	d001      	beq.n	80099da <__sflush_r+0xb2>
 80099d6:	2b16      	cmp	r3, #22
 80099d8:	d101      	bne.n	80099de <__sflush_r+0xb6>
 80099da:	602f      	str	r7, [r5, #0]
 80099dc:	e7b1      	b.n	8009942 <__sflush_r+0x1a>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	e7ad      	b.n	8009944 <__sflush_r+0x1c>
 80099e8:	690f      	ldr	r7, [r1, #16]
 80099ea:	2f00      	cmp	r7, #0
 80099ec:	d0a9      	beq.n	8009942 <__sflush_r+0x1a>
 80099ee:	0793      	lsls	r3, r2, #30
 80099f0:	680e      	ldr	r6, [r1, #0]
 80099f2:	bf08      	it	eq
 80099f4:	694b      	ldreq	r3, [r1, #20]
 80099f6:	600f      	str	r7, [r1, #0]
 80099f8:	bf18      	it	ne
 80099fa:	2300      	movne	r3, #0
 80099fc:	eba6 0807 	sub.w	r8, r6, r7
 8009a00:	608b      	str	r3, [r1, #8]
 8009a02:	f1b8 0f00 	cmp.w	r8, #0
 8009a06:	dd9c      	ble.n	8009942 <__sflush_r+0x1a>
 8009a08:	6a21      	ldr	r1, [r4, #32]
 8009a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a0c:	4643      	mov	r3, r8
 8009a0e:	463a      	mov	r2, r7
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b0      	blx	r6
 8009a14:	2800      	cmp	r0, #0
 8009a16:	dc06      	bgt.n	8009a26 <__sflush_r+0xfe>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	e78e      	b.n	8009944 <__sflush_r+0x1c>
 8009a26:	4407      	add	r7, r0
 8009a28:	eba8 0800 	sub.w	r8, r8, r0
 8009a2c:	e7e9      	b.n	8009a02 <__sflush_r+0xda>
 8009a2e:	bf00      	nop
 8009a30:	20400001 	.word	0x20400001

08009a34 <_fflush_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	690b      	ldr	r3, [r1, #16]
 8009a38:	4605      	mov	r5, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	b913      	cbnz	r3, 8009a44 <_fflush_r+0x10>
 8009a3e:	2500      	movs	r5, #0
 8009a40:	4628      	mov	r0, r5
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	b118      	cbz	r0, 8009a4e <_fflush_r+0x1a>
 8009a46:	6983      	ldr	r3, [r0, #24]
 8009a48:	b90b      	cbnz	r3, 8009a4e <_fflush_r+0x1a>
 8009a4a:	f7ff f8f3 	bl	8008c34 <__sinit>
 8009a4e:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <_fflush_r+0x6c>)
 8009a50:	429c      	cmp	r4, r3
 8009a52:	d11b      	bne.n	8009a8c <_fflush_r+0x58>
 8009a54:	686c      	ldr	r4, [r5, #4]
 8009a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0ef      	beq.n	8009a3e <_fflush_r+0xa>
 8009a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a60:	07d0      	lsls	r0, r2, #31
 8009a62:	d404      	bmi.n	8009a6e <_fflush_r+0x3a>
 8009a64:	0599      	lsls	r1, r3, #22
 8009a66:	d402      	bmi.n	8009a6e <_fflush_r+0x3a>
 8009a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6a:	f7ff f981 	bl	8008d70 <__retarget_lock_acquire_recursive>
 8009a6e:	4628      	mov	r0, r5
 8009a70:	4621      	mov	r1, r4
 8009a72:	f7ff ff59 	bl	8009928 <__sflush_r>
 8009a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a78:	07da      	lsls	r2, r3, #31
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	d4e0      	bmi.n	8009a40 <_fflush_r+0xc>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	059b      	lsls	r3, r3, #22
 8009a82:	d4dd      	bmi.n	8009a40 <_fflush_r+0xc>
 8009a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a86:	f7ff f974 	bl	8008d72 <__retarget_lock_release_recursive>
 8009a8a:	e7d9      	b.n	8009a40 <_fflush_r+0xc>
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <_fflush_r+0x70>)
 8009a8e:	429c      	cmp	r4, r3
 8009a90:	d101      	bne.n	8009a96 <_fflush_r+0x62>
 8009a92:	68ac      	ldr	r4, [r5, #8]
 8009a94:	e7df      	b.n	8009a56 <_fflush_r+0x22>
 8009a96:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <_fflush_r+0x74>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	bf08      	it	eq
 8009a9c:	68ec      	ldreq	r4, [r5, #12]
 8009a9e:	e7da      	b.n	8009a56 <_fflush_r+0x22>
 8009aa0:	0800a3ec 	.word	0x0800a3ec
 8009aa4:	0800a40c 	.word	0x0800a40c
 8009aa8:	0800a3cc 	.word	0x0800a3cc

08009aac <_lseek_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_lseek_r+0x20>)
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7f7 fee0 	bl	8001880 <_lseek>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_lseek_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_lseek_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20001688 	.word	0x20001688

08009ad0 <__swhatbuf_r>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	460e      	mov	r6, r1
 8009ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	b096      	sub	sp, #88	; 0x58
 8009adc:	4614      	mov	r4, r2
 8009ade:	461d      	mov	r5, r3
 8009ae0:	da07      	bge.n	8009af2 <__swhatbuf_r+0x22>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	602b      	str	r3, [r5, #0]
 8009ae6:	89b3      	ldrh	r3, [r6, #12]
 8009ae8:	061a      	lsls	r2, r3, #24
 8009aea:	d410      	bmi.n	8009b0e <__swhatbuf_r+0x3e>
 8009aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af0:	e00e      	b.n	8009b10 <__swhatbuf_r+0x40>
 8009af2:	466a      	mov	r2, sp
 8009af4:	f000 f8fe 	bl	8009cf4 <_fstat_r>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	dbf2      	blt.n	8009ae2 <__swhatbuf_r+0x12>
 8009afc:	9a01      	ldr	r2, [sp, #4]
 8009afe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b06:	425a      	negs	r2, r3
 8009b08:	415a      	adcs	r2, r3
 8009b0a:	602a      	str	r2, [r5, #0]
 8009b0c:	e7ee      	b.n	8009aec <__swhatbuf_r+0x1c>
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	2000      	movs	r0, #0
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	b016      	add	sp, #88	; 0x58
 8009b16:	bd70      	pop	{r4, r5, r6, pc}

08009b18 <__smakebuf_r>:
 8009b18:	898b      	ldrh	r3, [r1, #12]
 8009b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b1c:	079d      	lsls	r5, r3, #30
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460c      	mov	r4, r1
 8009b22:	d507      	bpl.n	8009b34 <__smakebuf_r+0x1c>
 8009b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	6163      	str	r3, [r4, #20]
 8009b30:	b002      	add	sp, #8
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	ab01      	add	r3, sp, #4
 8009b36:	466a      	mov	r2, sp
 8009b38:	f7ff ffca 	bl	8009ad0 <__swhatbuf_r>
 8009b3c:	9900      	ldr	r1, [sp, #0]
 8009b3e:	4605      	mov	r5, r0
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff f917 	bl	8008d74 <_malloc_r>
 8009b46:	b948      	cbnz	r0, 8009b5c <__smakebuf_r+0x44>
 8009b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4c:	059a      	lsls	r2, r3, #22
 8009b4e:	d4ef      	bmi.n	8009b30 <__smakebuf_r+0x18>
 8009b50:	f023 0303 	bic.w	r3, r3, #3
 8009b54:	f043 0302 	orr.w	r3, r3, #2
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	e7e3      	b.n	8009b24 <__smakebuf_r+0xc>
 8009b5c:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <__smakebuf_r+0x7c>)
 8009b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	6020      	str	r0, [r4, #0]
 8009b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b68:	81a3      	strh	r3, [r4, #12]
 8009b6a:	9b00      	ldr	r3, [sp, #0]
 8009b6c:	6163      	str	r3, [r4, #20]
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	6120      	str	r0, [r4, #16]
 8009b72:	b15b      	cbz	r3, 8009b8c <__smakebuf_r+0x74>
 8009b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f000 f8cd 	bl	8009d18 <_isatty_r>
 8009b7e:	b128      	cbz	r0, 8009b8c <__smakebuf_r+0x74>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f023 0303 	bic.w	r3, r3, #3
 8009b86:	f043 0301 	orr.w	r3, r3, #1
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	89a0      	ldrh	r0, [r4, #12]
 8009b8e:	4305      	orrs	r5, r0
 8009b90:	81a5      	strh	r5, [r4, #12]
 8009b92:	e7cd      	b.n	8009b30 <__smakebuf_r+0x18>
 8009b94:	08008bcd 	.word	0x08008bcd

08009b98 <memmove>:
 8009b98:	4288      	cmp	r0, r1
 8009b9a:	b510      	push	{r4, lr}
 8009b9c:	eb01 0402 	add.w	r4, r1, r2
 8009ba0:	d902      	bls.n	8009ba8 <memmove+0x10>
 8009ba2:	4284      	cmp	r4, r0
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	d807      	bhi.n	8009bb8 <memmove+0x20>
 8009ba8:	1e43      	subs	r3, r0, #1
 8009baa:	42a1      	cmp	r1, r4
 8009bac:	d008      	beq.n	8009bc0 <memmove+0x28>
 8009bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bb6:	e7f8      	b.n	8009baa <memmove+0x12>
 8009bb8:	4402      	add	r2, r0
 8009bba:	4601      	mov	r1, r0
 8009bbc:	428a      	cmp	r2, r1
 8009bbe:	d100      	bne.n	8009bc2 <memmove+0x2a>
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bca:	e7f7      	b.n	8009bbc <memmove+0x24>

08009bcc <__malloc_lock>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	; (8009bd4 <__malloc_lock+0x8>)
 8009bce:	f7ff b8cf 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	20001680 	.word	0x20001680

08009bd8 <__malloc_unlock>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	; (8009be0 <__malloc_unlock+0x8>)
 8009bda:	f7ff b8ca 	b.w	8008d72 <__retarget_lock_release_recursive>
 8009bde:	bf00      	nop
 8009be0:	20001680 	.word	0x20001680

08009be4 <_free_r>:
 8009be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009be6:	2900      	cmp	r1, #0
 8009be8:	d048      	beq.n	8009c7c <_free_r+0x98>
 8009bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bee:	9001      	str	r0, [sp, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8009bf6:	bfb8      	it	lt
 8009bf8:	18e4      	addlt	r4, r4, r3
 8009bfa:	f7ff ffe7 	bl	8009bcc <__malloc_lock>
 8009bfe:	4a20      	ldr	r2, [pc, #128]	; (8009c80 <_free_r+0x9c>)
 8009c00:	9801      	ldr	r0, [sp, #4]
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	4615      	mov	r5, r2
 8009c06:	b933      	cbnz	r3, 8009c16 <_free_r+0x32>
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	6014      	str	r4, [r2, #0]
 8009c0c:	b003      	add	sp, #12
 8009c0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c12:	f7ff bfe1 	b.w	8009bd8 <__malloc_unlock>
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	d90b      	bls.n	8009c32 <_free_r+0x4e>
 8009c1a:	6821      	ldr	r1, [r4, #0]
 8009c1c:	1862      	adds	r2, r4, r1
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	bf04      	itt	eq
 8009c22:	681a      	ldreq	r2, [r3, #0]
 8009c24:	685b      	ldreq	r3, [r3, #4]
 8009c26:	6063      	str	r3, [r4, #4]
 8009c28:	bf04      	itt	eq
 8009c2a:	1852      	addeq	r2, r2, r1
 8009c2c:	6022      	streq	r2, [r4, #0]
 8009c2e:	602c      	str	r4, [r5, #0]
 8009c30:	e7ec      	b.n	8009c0c <_free_r+0x28>
 8009c32:	461a      	mov	r2, r3
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	b10b      	cbz	r3, 8009c3c <_free_r+0x58>
 8009c38:	42a3      	cmp	r3, r4
 8009c3a:	d9fa      	bls.n	8009c32 <_free_r+0x4e>
 8009c3c:	6811      	ldr	r1, [r2, #0]
 8009c3e:	1855      	adds	r5, r2, r1
 8009c40:	42a5      	cmp	r5, r4
 8009c42:	d10b      	bne.n	8009c5c <_free_r+0x78>
 8009c44:	6824      	ldr	r4, [r4, #0]
 8009c46:	4421      	add	r1, r4
 8009c48:	1854      	adds	r4, r2, r1
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	6011      	str	r1, [r2, #0]
 8009c4e:	d1dd      	bne.n	8009c0c <_free_r+0x28>
 8009c50:	681c      	ldr	r4, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	6053      	str	r3, [r2, #4]
 8009c56:	4421      	add	r1, r4
 8009c58:	6011      	str	r1, [r2, #0]
 8009c5a:	e7d7      	b.n	8009c0c <_free_r+0x28>
 8009c5c:	d902      	bls.n	8009c64 <_free_r+0x80>
 8009c5e:	230c      	movs	r3, #12
 8009c60:	6003      	str	r3, [r0, #0]
 8009c62:	e7d3      	b.n	8009c0c <_free_r+0x28>
 8009c64:	6825      	ldr	r5, [r4, #0]
 8009c66:	1961      	adds	r1, r4, r5
 8009c68:	428b      	cmp	r3, r1
 8009c6a:	bf04      	itt	eq
 8009c6c:	6819      	ldreq	r1, [r3, #0]
 8009c6e:	685b      	ldreq	r3, [r3, #4]
 8009c70:	6063      	str	r3, [r4, #4]
 8009c72:	bf04      	itt	eq
 8009c74:	1949      	addeq	r1, r1, r5
 8009c76:	6021      	streq	r1, [r4, #0]
 8009c78:	6054      	str	r4, [r2, #4]
 8009c7a:	e7c7      	b.n	8009c0c <_free_r+0x28>
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bd30      	pop	{r4, r5, pc}
 8009c80:	20001480 	.word	0x20001480

08009c84 <_realloc_r>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	4607      	mov	r7, r0
 8009c88:	4614      	mov	r4, r2
 8009c8a:	460e      	mov	r6, r1
 8009c8c:	b921      	cbnz	r1, 8009c98 <_realloc_r+0x14>
 8009c8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c92:	4611      	mov	r1, r2
 8009c94:	f7ff b86e 	b.w	8008d74 <_malloc_r>
 8009c98:	b922      	cbnz	r2, 8009ca4 <_realloc_r+0x20>
 8009c9a:	f7ff ffa3 	bl	8009be4 <_free_r>
 8009c9e:	4625      	mov	r5, r4
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca4:	f000 f848 	bl	8009d38 <_malloc_usable_size_r>
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d20f      	bcs.n	8009ccc <_realloc_r+0x48>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f7ff f860 	bl	8008d74 <_malloc_r>
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0f2      	beq.n	8009ca0 <_realloc_r+0x1c>
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	f7fe fec5 	bl	8008a4c <memcpy>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff ff8d 	bl	8009be4 <_free_r>
 8009cca:	e7e9      	b.n	8009ca0 <_realloc_r+0x1c>
 8009ccc:	4635      	mov	r5, r6
 8009cce:	e7e7      	b.n	8009ca0 <_realloc_r+0x1c>

08009cd0 <_read_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	; (8009cf0 <_read_r+0x20>)
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	602a      	str	r2, [r5, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f7f7 fd8a 	bl	80017f8 <_read>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_read_r+0x1e>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_read_r+0x1e>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20001688 	.word	0x20001688

08009cf4 <_fstat_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d07      	ldr	r5, [pc, #28]	; (8009d14 <_fstat_r+0x20>)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	4611      	mov	r1, r2
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	f7f7 fda2 	bl	800184a <_fstat>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d102      	bne.n	8009d10 <_fstat_r+0x1c>
 8009d0a:	682b      	ldr	r3, [r5, #0]
 8009d0c:	b103      	cbz	r3, 8009d10 <_fstat_r+0x1c>
 8009d0e:	6023      	str	r3, [r4, #0]
 8009d10:	bd38      	pop	{r3, r4, r5, pc}
 8009d12:	bf00      	nop
 8009d14:	20001688 	.word	0x20001688

08009d18 <_isatty_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d06      	ldr	r5, [pc, #24]	; (8009d34 <_isatty_r+0x1c>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	f7f7 fda1 	bl	800186a <_isatty>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_isatty_r+0x1a>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_isatty_r+0x1a>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	20001688 	.word	0x20001688

08009d38 <_malloc_usable_size_r>:
 8009d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d3c:	1f18      	subs	r0, r3, #4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfbc      	itt	lt
 8009d42:	580b      	ldrlt	r3, [r1, r0]
 8009d44:	18c0      	addlt	r0, r0, r3
 8009d46:	4770      	bx	lr

08009d48 <_init>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	bf00      	nop
 8009d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4e:	bc08      	pop	{r3}
 8009d50:	469e      	mov	lr, r3
 8009d52:	4770      	bx	lr

08009d54 <_fini>:
 8009d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d56:	bf00      	nop
 8009d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5a:	bc08      	pop	{r3}
 8009d5c:	469e      	mov	lr, r3
 8009d5e:	4770      	bx	lr
